#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 26325583-ffcb-49bb-8678-2d9a3c76c357
# Source File: TSTool3.1.4.pff
#------------------------------------------------------------------------
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.0.7
# Generated On: 23/02/2014 2:44 PM
# Generated By: Matt
#========================================================================

Param([string]$RunningAs)

#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {

    set-variable -name TSToolVersion -value "3.1.4" -scope script -description "TSTool Version" 
    
    function Global:Get-ActiveMonitor
    {    
        param($computer = $env:computername)
        
        try
        {
            $ActiveMonitors = Get-WmiObject -Namespace root\wmi -Class wmiMonitorID -ComputerName $Computer -ErrorAction 'stop'
        }
        catch
        {
            if ($_.Exception.Message.trim() -eq "Not supported")
            {
                $hash = @{"ErrorMessage"="Not Supported - Maybe you are accessing a Virtual Machine?"}
            }
            else
            {
                $hash = @{"ErrorMessage"=$_.Exception.Message}
            }
            
            return New-Object PSObject -Property $hash
        }    

        $count = 0
        
        # Monitor(s) Information
        foreach($monitor in $ActiveMonitors)
        {
            $count += 1
            New-Object PSObject -Property @{
                Monitor=$count    
                ManufacturerName=($monitor.ManufacturerName | % {[char]$_}) -join ''
                ProductCodeID=($monitor.ProductCodeID | % {[char]$_}) -join ''
                SerialNumberID=($monitor.SerialNumberID | % {[char]$_}) -join ''
                Description=($monitor.UserFriendlyName | % {[char]$_}) -join ''
                ComputerName=$Computer 
                WeekOfManufacture=$monitor.WeekOfManufacture                       
                YearOfManufacture=$monitor.YearOfManufacture
            }         
        } 
    }
    
    Function Global:Get-MonitorResolution
    {
        Param($computer = $env:computername)          
        
        try
        {
        $sysMon = Get-WmiObject Win32_DesktopMonitor -ComputerName $Computer -ErrorAction 'stop'
        }
        catch                
        {
        } 
        
        $sysMON | %{
            if($_.ScreenWidth)
            {
                "{0} [{2} x {3}]`n" -f $_.Description, $_.Name, $_.ScreenWidth,$_.ScreenHeight
            }
        }
    }
        
    function Global:Update-Display
    {
        param($ResultToDisplay, $color= '238, 237, 240')        

        if ($color -eq "Yellow"){$richtextbox1.text = ""}
        
        $ResultToDisplay = ($ResultToDisplay | Out-String).replace($null, " ")
       
        $richTextBox1.SelectionColor = $color
        $richtextbox1.appendText($ResultToDisplay)
        $richtextbox1.appendText("`n")
    }
           
    function Global:Test-PSRemoting 
    { 
        Param(
            [string]$ComputerName,
            [switch]$report
        )  
            
        try 
        {            
            $result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
            
            if($result -eq 1 )
            {
                return $True
            }
        } 
        catch 
        {}
        
        if ($report)
        {
            [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
            $Answer = [Windows.Forms.MessageBox]::Show("PS Remoting Not Enabled on $ComputerName", "TSTool $TSToolVersion","OK","Exclamation")
        }
        return $False 
    }
            
    function Global:Clean-NumberQLD-AU 
    {     
        param($ph)
        #This function has been optimised for Queensland Australia
        
        $pattern = '[0-9\-\s\()]{1,50}'
     
        filter Matches($pattern) {
            $_ | Select-String -AllMatches $pattern |
            Select-Object -ExpandProperty Matches | 
            Select-Object -ExpandProperty Value
        }
     
        $numbers = $ph | Matches $pattern
     
        foreach ($check in $numbers )
        {
            $number = $check -replace '[\.\-\()\s]' , ""
            $len = $number.length
            
            if ($len -ge 8)
            {
                $digit1 = $number.substring(0,1)
                $digit2 = $number.substring(1,1)
                $digit3 = $number.substring(2,1)
                $digit5 = $number.substring(4,1)
            }
            
            if ($len -eq 8 -and $digit1 -eq "5") 
            {
                # standard number starting with 54 
                "07$number"
                break
            }
            elseif ($len -eq 10 -and $digit1 -eq "0" -and ($digit2 -eq "7" -or $digit2 -eq "4")) 
            {
                # standard full number starting with 07 or 04
                $number
                break
            }
            elseif ($len -gt 10) 
            {
                if ($digit1 -eq "6" -and $digit5 -eq "0" -and $len -ge 14)
                {
                    # mobile number with 6000 prefix?
                    $number.substring(4,10)
                }
                elseif ($digit1 -eq "0" -and ($digit2 -eq "7" -or $digit2 -eq "4"))
                {
                    # joined number starting with 07 or 04 
                    $number.substring(0,10)
                }
                elseif ($digit1 -eq "0" -and $digit2 -eq "6" -and $digit3 -eq "1")
                {
                    # number starting with 061 
                    "0$($number.substring(3,9))"
                }            
                elseif ($digit1 -eq "5")
                {
                    # joined number starting with 54  
                    "07$($number.substring(0,8))"
                }
            }    
        } 
    }
    
    function global:Get-RegKey
    {
        param
        (
            [string]$Key, 
            [string]$Value, 
            [switch]$Set,
            [string]$Reg="HKCU:\Software\PowerShell\TSTool"
        ) 
              
        
        if (-not(Test-Path -Path $Reg))
        {
            New-Item -Path $Reg -Force | Out-Null
        }

        if ($Set)
        {
            Set-ItemProperty -Path $Reg -Name $Key -Value $Value
        }
        else
        {
            try
            {
                Get-ItemProperty -Path $Reg -Name $Key -ErrorAction 'stop' | Select-Object -ExpandProperty $Key
            }
            catch
            {
                0
            }
        }
    }
                
    function Global:Use-RunAs
    {   
        # Test if script is running as Adminstrator and if not use RunAs
        # -Check ( Return true if Administrator )
        
        param([Switch]$Check)
        
        $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
            
        if ($Check) { return $IsAdmin }    

        if ($MyInvocation.ScriptName -ne "")
        { 
            if (-not $IsAdmin) 
            { 
                try
                { 
                    $arg = "-executionpolicy bypass -windowstyle hidden -sta -file `"$($MyInvocation.ScriptName)`" $env:UserName $env:UserName"
                    Start-Process "$psHome\powershell.exe" -Verb Runas -ArgumentList $arg -ErrorAction 'stop' 
                }
                catch
                {
                    Write-Warning "Error - Failed to run script.... Credential problem?"
                    break
                }
                exit # Quit this session of powershell
            } 
        } 
        else 
        { 
            Write-Warning "Error - Script must be saved as a .ps1 file first" 
            break 
        } 
    }

    function Global:Get-ScriptPath
    {
        try
        {
           $ScriptFullName = $MyInvocation.ScriptName
            
           $path = @{ 
                parent = split-path $ScriptFullName
                leaf = split-path $ScriptFullName -leaf
                ScriptFullName = $ScriptFullName
            }

            New-Object PSObject -Property $path
        }
        catch
        {        
        }  
    }
    
    function Global:Get-logonUser
    {
        try
        {
            Get-WmiObject Win32_Process -filter "Name = 'explorer.exe'" -ErrorAction 'stop' | % {$_.GetOwner().User} | select -Unique
        }
        catch
        {
            break
        }        
    }
    
    function Global:Get-SCCMSoftwareInstalled
    {
    <#
        .Synopsis
            Get Add Remove Programs from SCCM Query
       
        .Description
            Gets all software installed on SCCM client computer as per SCCM audit time. 
        
        .Parameter ResourceID
            Specifies a computer ResourceID
            
        .Parameter NameSpace
            Set this to your SCCM environment
            
        .Parameter SiteServer
            Set this to your SCCM environment
    
       .Example
            PS C:\>Get-SCCMSoftwareInstalled -ResourceID 1 -NameSpace -SiteServer server1
           
        Description
        -----------
            Gets all software installed on SCCM client computer as per SCCM audit time.                 

        .Inputs
            none                
                        
        .Outputs
            PSObject
                       
        .Notes
            NAME:      Get-SCCMSoftwareInstalled
            PURPOSE:   Get software installed 
            VERSION:   1.0
            AUTHOR:    Matthew Painter
            LASTEDIT:  5/Aug/2012            
    #>

            
        param(         
            [Parameter(         
            Mandatory=$true, 
            Position=1,        
            ValueFromPipeline=$false)]         
            [string]$ResourceID,
            
            [Parameter(
            Mandatory=$true,
            ValueFromPipeline=$false)]
            [string]$SiteServer,                
                    
            [Parameter(
            Mandatory=$false,
            ValueFromPipeline=$false)]
            [string]$NameSpace = "root\sms\site_SC1"
        )
        
        if ($ResourceID)
        {        
            try
            {
                $Query = "select * from SMS_G_System_ADD_REMOVE_PROGRAMS where ResourceID=`'$ResourceID`'"
                Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer -ErrorAction 'stop' | Select-Object DisplayName, Publisher, Version, InstallDate | 
                % {        
                    if ($_.DisplayName)
                    {
                        $VerCorrected = if ($_.Version){$_.Version}else{"1"}
                        $AppIndex = "$($_.DisplayName)  -  $VerCorrected"
                    }
                    else
                    {
                        $AppIndex = $null
                    }
                    
                
                    $Hash = @{ 
                        DisplayName = $_.DisplayName
                        Publisher = $_.Publisher
                        Version = $_.Version
                        InstallDate = $_.InstallDate
                        AppIndex = $AppIndex       
                    } 
                    
                    New-Object -TypeName PSObject -Property $Hash | 
                    Select-Object DisplayName, Publisher, Version, InstallDate, AppIndex
                }
            }
            catch
            {
            
            }
          }
    }    
    
    function Global:Get-SCCMResourceID
    {
    <#
        .Synopsis
            Get Computer ResourceID
       
        .Description
            Get Computer ResourceID searching 2 SCCM servers
            
            We are in the process of moving to a second SCCM server as part of OS upgrade
            Identify the SCCM server that is managing a specific computer
            
            Machines are managed by new SCCM (primary) after OS upgrade
            
        
        .Parameter ComputerName
            Specifies a computer. The default is the local computer.
            
        .Parameter NameSpace1
            Set this to your SCCM environment
            Primary SCCM Server
            
        .Parameter SiteServer1
            Set this to your SCCM environment
            Primary SCCM Server
            
        .Parameter NameSpace2
            Set this to your SCCM environment
            SCCM Server migrating from 
            
        .Parameter SiteServer2
            Set this to your SCCM environment
            SCCM Server migrating from         

           
       .Example
            PS C:\>Get-ResourceID
           
        Description
        -----------
            Returns ResourceID and server managing this computer  
          
            

        .Inputs
            System.String
            You can pipe a ComputerName to Get-ResourceID
                        
        .Outputs
            PSObject
                       
        .Notes
            NAME:      Get-ResourceID
            PURPOSE:   Get-ResourceID when SCCM server could be one of two
            VERSION:   1.0
            AUTHOR:    Matthew Painter
            LASTEDIT:  3/Aug/2012            
    #>


    [CmdletBinding()]         
    
    param(         
        [Parameter(         
        Mandatory=$false, 
        Position=0,        
        ValueFromPipeline=$True)]         
        [string[]]$ComputerName = $env:ComputerName,
        
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$SiteServer1,
        
                
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$NameSpace1,
        
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$SiteServer2,
        
                
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$NameSpace2
    )
    
    

    Process
    {   
        foreach ($Computer in $ComputerName)
        {
            $ResourceID1 = $null
            $ResourceID2 = $null
            
            try
            {
                if (Test-Connection -ComputerName $SiteServer1 -Count 1 -Quiet)
                {
                    $Query = "select * from SMS_G_System_COMPUTER_SYSTEM where Name=`'$computer`'"
                    $ResourceID1 = Get-WmiObject -Query $Query -Namespace $NameSpace1 -ComputerName $SiteServer1 -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty ResourceID -First 1
                    
                    $ResourceID = $ResourceID1
                    $SiteServer = $SiteServer1 
                    $NameSpace = $NameSpace1
                }
            }
            catch
            {
                $errorMessage = $_.Exception.Message
            }
            
            try
            {
                if ((Test-Connection -ComputerName $SiteServer2 -Count 1 -Quiet) -and -not $ResourceID1 -and $SiteServer2)
                {
                    $Query = "select * from SMS_G_System_COMPUTER_SYSTEM where Name=`'$computer`'"
                    $ResourceID2 = Get-WmiObject -Query $Query -Namespace $NameSpace2 -ComputerName $SiteServer2 -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty ResourceID -First 1
          
                    $ResourceID = $ResourceID2                
                    $SiteServer = $SiteServer2 
                    $NameSpace = $NameSpace2
                }           
            }
            catch
            {
                $errorMessage = $_.Exception.Message
            }
            
            
            
            $Hash = @{ 
                Computer = $Computer
                SiteServer1 = $SiteServer1 
                NameSpace1 = $NameSpace1
                ResourceID1 = $ResourceID1                
                SiteServer2 = $SiteServer2 
                NameSpace2 = $NameSpace2
                ResourceID2 = $ResourceID2
                SiteServer = $SiteServer 
                NameSpace = $NameSpace
                ResourceID = $ResourceID
                error = $errorMessage
            }  
            
            New-Object -TypeName PSObject -Property $Hash 
        }            
    }
}

    function Global:Get-SCCMNetworkAdaptor
    {
        <#
        .Synopsis
            Primary Network Adaptor Settings from SCCM
       
        .Description
            Primary Network Adaptor Settings from SCCM
        
        .Parameter ResourceID
            Specifies a computer ResourceID
            
        .Parameter NameSpace
            Set this to your SCCM environment
            
        .Parameter SiteServer
            Set this to your SCCM environment
    
       .Example
            PS C:\>Get-SCCMNetworkAdaptor -ResourceID 1 -NameSpace -SiteServer server1
           
        Description
        -----------
            Primary Network Adaptor Settings from SCCM
            IP, Subnet, MAC

        .Inputs
            none                
                        
        .Outputs
            PSObject
                       
        .Notes
            NAME:      Get-SCCMNetworkAdaptor
            PURPOSE:   IP, Subnet and MAC from SCCM
            VERSION:   1.0
            AUTHOR:    Matthew Painter
            LASTEDIT:  5/Aug/2012            
        #>

            
        param(         
            [Parameter(         
            Mandatory=$true, 
            Position=1,        
            ValueFromPipeline=$false)]         
            [string]$ResourceID,
            
            [Parameter(
            Mandatory=$true,
            ValueFromPipeline=$false)]
            [string]$SiteServer,                
                    
            [Parameter(
            Mandatory=$false,
            ValueFromPipeline=$false)]
            [string]$NameSpace
        )
        
        if ($ResourceID)
        {        
            try
            {
                $Query = "select * from SMS_G_System_NETWORK_ADAPTER_CONFIGURATION where ResourceID=`'$ResourceID`' and IPEnabled=1"
                $NETWORK_ADAPTER_CONFIGURATION = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer | Where-Object {$_.IPAddress -ne "0.0.0.0"}
                
                # Get First IP enabled IPv4 from SCCM
                $matches = $null
                ($NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty IPAddress -First 1) -match "\b(?:\d{1,3}\.){3}\d{1,3}\b" | out-null
                $IPAddress = if ($matches){$matches[0]}
                
                $matches = $null
                ($NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty IPSubnet -First 1) -match "\b(?:\d{1,3}\.){3}\d{1,3}\b" | out-null
                $IPSubnet = if ($matches){$matches[0]}
                 
                $computer = $NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty DNSHostName -First 1
                $MACAddress = $NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty MACAddress    -First 1        
                
               
                $Hash = @{ 
                    Computer = $Computer
                    IPAddress = $IPAddress
                    IPSubnet = $IPSubnet
                    MACAddress = $MACAddress        
                } 
                
                New-Object -TypeName PSObject -Property $Hash               
            }
            catch
            {        
            }
        }
    }
            
    function Global:ConvertToGrayScale 
    {       
        # Anonimista - http://gallery.technet.microsoft.com/scriptcenter/6d7bf29b-bbbb-4176-a3a8-77bbd0e81407
        
        param($image) 
         
        $grayImage = New-Object System.Drawing.Bitmap($image.Width, $image.Height) 
        $g = [System.Drawing.Graphics]::FromImage($grayImage) 
             
        $matrix = New-Object System.Drawing.Imaging.Colormatrix 
         
        $matrix.Matrix00 = 0.3 
        $matrix.Matrix01 = 0.3 
        $matrix.Matrix02 = 0.3 
        $matrix.Matrix03 = 0.0 
        $matrix.Matrix04 = 0.0 
         
        $matrix.Matrix10 = 0.59 
        $matrix.Matrix11 = 0.59 
        $matrix.Matrix12 = 0.59 
        $matrix.Matrix13 = 0.0 
        $matrix.Matrix14 = 0.0 
         
        $matrix.Matrix20 = 0.11 
        $matrix.Matrix21 = 0.11 
        $matrix.Matrix22 = 0.11 
        $matrix.Matrix23 = 0.0 
        $matrix.Matrix24 = 0.0 
         
        $matrix.Matrix30 = 0.0 
        $matrix.Matrix31 = 0.0 
        $matrix.Matrix32 = 0.0 
        $matrix.Matrix33 = 1.0 
        $matrix.Matrix34 = 0.0 
         
        $matrix.Matrix40 = 0.0 
        $matrix.Matrix41 = 0.0 
        $matrix.Matrix42 = 0.0 
        $matrix.Matrix43 = 0.0 
        $matrix.Matrix44 = 1.0 
         
        $attributes = New-Object System.Drawing.Imaging.ImageAttributes 
        $attributes.SetColorMatrix($matrix) 
         
        $imageRectangle = New-Object System.Drawing.Rectangle( 
            0, 0, $image.Width, $image.Height) 
        $g.DrawImage($image, $imageRectangle, 0, 0,  
            $image.Width, $image.Height,  
            [System.Drawing.GraphicsUnit]::Pixel, $attributes) 
         
        $g.Dispose() 
         
        $grayImage 
    }
    
    <#
    Check OS compatiblity.
    W8 "6.2.9200" 
    W7SP1 "6.1.7601"
    #>
    
    try
    {
        $OSVersion = gwmi Win32_OperatingSystem | select -ExpandProperty Version
    }
    catch{}
    if ($OSVersion -lt "6.1.7600")
    {
        [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
        $Answer = [Windows.Forms.MessageBox]::Show("Sorry TSTool3 requires at least Windows7.", "TSTool $TSToolVersion","OK","Exclamation")
        exit
    }
    
    
    If($RunningAs)
    {
        # if script is still not running as Admin - abort something is wrong. 
        if (!(Use-RunAs -check))
        {
            [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
            $Answer = [Windows.Forms.MessageBox]::Show("RunAs failed to work - Check if RunAS is disabled on this computer.`nMaybe $($env:COMPUTERNAME) is a Citrix server?", "TSTool $TSToolVersion","OK","Exclamation")
            exit
        } 
    }
    else
    {
        Use-RunAs        
    }        

    
    
    #Previously script did not need STA mode but now does
    #Check if Script is running in STA mode - because $textbox1 autocomplete will not work
    set-variable -name STA -value ([System.Management.Automation.Runspaces.Runspace]::DefaultRunspace.ApartmentState -eq [Threading.ApartmentState]::STA) -scope script -description "True if running STA mode" 
    
    
    if (-not($STA))
    {
        # Ok lets update the shortcut gracefully in case someone has an old shortcut
        $StartMenuIcon = "$([System.Environment]::GetFolderPath("ApplicationData"))\Microsoft\Windows\Start Menu\Programs\TSTool3.lnk"
        $QuickLaunchIcon = "$([System.Environment]::GetFolderPath("ApplicationData"))\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\TSTool3.lnk"
        $DesktopIcon = "$([System.Environment]::GetFolderPath("Desktop"))\TSTool3.lnk"

        $StartMenuIcon, $QuickLaunchIcon, $DesktopIcon | 
        %{
            if (test-path $_)
            {
                # Update main TSTool3 shortcuts with -sta switch
                $shell = New-Object -COM WScript.Shell
                $TSToolShortcut = get-item $_ 
                $shortcut = $shell.CreateShortcut($TSToolShortcut) 
                if ($shortcut.Arguments -match "TSTool3")
                {
                    $shortcut.Arguments = $shortcut.Arguments.replace("-executionpolicy bypass -file", "-executionpolicy bypass -sta -file")
                }
                $shortcut.Save() 
            }
        }
    }
    
    
    #Check screen resolution is at least 1024 wide 
    [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null   
    try
    {
        $ScreenWidthPass = $null
        $ScreenWidthProperty = $null 
        $desktops = Get-WmiObject -Class Win32_DesktopMonitor -ComputerName $env:computername -ErrorAction 'stop'
        foreach ($desktop in $desktops) 
        {
            if ($desktop.ScreenWidth -ge 1024)
            {
                $ScreenWidthPass = $true
            }
            if ($desktop.ScreenWidth){$ScreenWidthProperty = $true} 
        }
    }
    catch
    {
        # Cant read screen width - skip check
        $ScreenWidthPass = $true
    }

    # fallback code in case Win8 or virtual machine
    if(!($ScreenWidthPass))
    {
        [System.Windows.Forms.Screen]::AllScreens | %{$_.WorkingArea.width} | 
        %{
            if($_ -ge 1024){$ScreenWidthPass = $true }
        }
    }

    if (!($ScreenWidthPass))
    {
        [Windows.Forms.MessageBox]::Show("TSTool3 requires a screen resolution width =>1024","TSTool $TSToolVersion")
    }
    
    
    # even though console may be hidden, need to increase width to ensure output in rtb1 is correct. 
    if ((get-host).name -eq "ConsoleHost")
    {        
        $pshost = get-host
        $pswindow = $pshost.ui.rawui

        $newsize = $pswindow.buffersize
        $newsize.height = 3000
        $newsize.width = 150
        $pswindow.buffersize = $newsize

        $newsize = $pswindow.windowsize
        $newsize.height = 50
        $newsize.width = 150
        $pswindow.windowsize = $newsize
        
        Write-Host "TSTool $TSToolVersion`n`n" -ForegroundColor 'DarkYellow'
        $pswindow.windowtitle = "TSTool $TSToolVersion Console"
    }
    

    
    # Set path and create external setting files
    set-variable -name ParentDirectory -value ("$(Get-ScriptPath | select -ExpandProperty Parent)")  -scope script -description "Parent Directory of Script"     
    set-variable -name locationsCSV -value "$ParentDirectory\locations.csv" -scope script -description "Path to location/subnet lookup CSV"     
    if (!(Test-Path -Path $locationsCSV))
    {
        New-Object -TypeName PSObject -Property @{"Subnet"="0.0.0.0"; "Location"="Unknown"}    | Export-Csv -Path $locationsCSV -NoTypeInformation
    }
    
    set-variable -name FilterFile -value "$ParentDirectory\filterFile.txt" -scope script -description "Path to file with list of programs for filter"
    if (!(Test-Path -Path $FilterFile))
    {        
        New-Item -path $FilterFile -type file -force -value "Dont edit this file directly (use editor)  -  1.0.0"
    }
    
    return $true #just leave this true
}

function OnApplicationExit {
    #Note: This function is not called in Projects
    #Note: This function runs after the form is closed
    
    $script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-TSTool3_1_4_pff {

    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
    [void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
    [void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formTSTool3 = New-Object 'System.Windows.Forms.Form'
    $buttonCopy = New-Object 'System.Windows.Forms.Button'
    $richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
    $buttonClear = New-Object 'System.Windows.Forms.Button'
    $labelBarcode = New-Object 'System.Windows.Forms.Label'
    $picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
    $buttonHistory = New-Object 'System.Windows.Forms.Button'
    $labelLOCKED = New-Object 'System.Windows.Forms.Label'
    $labelUserID = New-Object 'System.Windows.Forms.Label'
    $labelLocation = New-Object 'System.Windows.Forms.Label'
    $statusstrip1 = New-Object 'System.Windows.Forms.StatusStrip'
    $buttonDisconnect = New-Object 'System.Windows.Forms.Button'
    $labelUserName = New-Object 'System.Windows.Forms.Label'
    $buttonStartJob = New-Object 'System.Windows.Forms.Button'
    $picturebox3 = New-Object 'System.Windows.Forms.PictureBox'
    $buttonClose = New-Object 'System.Windows.Forms.Button'
    $picturebox2 = New-Object 'System.Windows.Forms.PictureBox'
    $textbox1 = New-Object 'System.Windows.Forms.TextBox'
    $tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
    $tabpage1 = New-Object 'System.Windows.Forms.TabPage'
    $buttonLogOff = New-Object 'System.Windows.Forms.Button'
    $buttonMonitors = New-Object 'System.Windows.Forms.Button'
    $textbox2 = New-Object 'System.Windows.Forms.TextBox'
    $labelUpTime = New-Object 'System.Windows.Forms.Label'
    $buttonIPConfig = New-Object 'System.Windows.Forms.Button'
    $buttonRDP = New-Object 'System.Windows.Forms.Button'
    $buttonOU = New-Object 'System.Windows.Forms.Button'
    $buttonProcesses = New-Object 'System.Windows.Forms.Button'
    $buttonC = New-Object 'System.Windows.Forms.Button'
    $buttonWarranty = New-Object 'System.Windows.Forms.Button'
    $buttonWakeUp = New-Object 'System.Windows.Forms.Button'
    $buttonShutDown = New-Object 'System.Windows.Forms.Button'
    $buttonReboot = New-Object 'System.Windows.Forms.Button'
    $buttonGPUpdate = New-Object 'System.Windows.Forms.Button'
    $label1 = New-Object 'System.Windows.Forms.Label'
    $labelMachineModelOSRamSer = New-Object 'System.Windows.Forms.Label'
    $tabpage2 = New-Object 'System.Windows.Forms.TabPage'
    $buttonAPPV = New-Object 'System.Windows.Forms.Button'
    $FilteredSCCM = New-Object 'System.Windows.Forms.Button'
    $buttonWin8Apps = New-Object 'System.Windows.Forms.Button'
    $InstalledMSI = New-Object 'System.Windows.Forms.Button'
    $labelLIVE = New-Object 'System.Windows.Forms.Label'
    $labelSCCMLive = New-Object 'System.Windows.Forms.Label'
    $AddRemovePrograms = New-Object 'System.Windows.Forms.Button'
    $FilteredLive = New-Object 'System.Windows.Forms.Button'
    $SCCM_2007_SW3 = New-Object 'System.Windows.Forms.Button'
    $tabpage4 = New-Object 'System.Windows.Forms.TabPage'
    $buttonSCCM = New-Object 'System.Windows.Forms.Button'
    $buttonMSTSC = New-Object 'System.Windows.Forms.Button'
    $labelLocalApps = New-Object 'System.Windows.Forms.Label'
    $labelRemoteApps = New-Object 'System.Windows.Forms.Label'
    $buttonSysInfo = New-Object 'System.Windows.Forms.Button'
    $buttonManage = New-Object 'System.Windows.Forms.Button'
    $buttonPowerShell = New-Object 'System.Windows.Forms.Button'
    $buttonPSRemote = New-Object 'System.Windows.Forms.Button'
    $buttonRegEdit = New-Object 'System.Windows.Forms.Button'
    $buttonCMD = New-Object 'System.Windows.Forms.Button'
    $tabpage3 = New-Object 'System.Windows.Forms.TabPage'
    $buttonSCCMU2M = New-Object 'System.Windows.Forms.Button'
    $buttonProfileSvr = New-Object 'System.Windows.Forms.Button'
    $buttonHome = New-Object 'System.Windows.Forms.Button'
    $buttonProfile = New-Object 'System.Windows.Forms.Button'
    $buttonMySite = New-Object 'System.Windows.Forms.Button'
    $button1 = New-Object 'System.Windows.Forms.Button'
    $buttonEmail = New-Object 'System.Windows.Forms.Button'
    $label2 = New-Object 'System.Windows.Forms.Label'
    $labelUserIDNameEmailPhone = New-Object 'System.Windows.Forms.Label'
    $buttonRA = New-Object 'System.Windows.Forms.Button'
    $menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
    $fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $helpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
    $timerJobTracker = New-Object 'System.Windows.Forms.Timer'
    $timer1 = New-Object 'System.Windows.Forms.Timer'
    $toolstripstatuslabel1 = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
    $optionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $exitToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $licenceToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $addQLDPhoneFilterToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $clearHistoryToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $setHistoryLimitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $checkForUpdatesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
    $toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $setProfileServerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $editSoftwareFilterToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
    
    
    
    
    
    
    
    
    
    
    
    
    $FormEvent_Load={
        
        
        
    #Region Dynamic Graphics
    # used in menu
    $cross = [System.Convert]::FromBase64String('R0lGODlhDQANAIUAALcuLtiSkvLf37QkJLw7O89zc7QlJbo2Ns5ycvr29vjy8sNSUspnZ8hfX/ft
7daLi75CQsBISNSDg8toaMVXV7UpKfPh4bgwMPbo6LctLevMzLUmJt6kpLQmJuOwsM1xcb1BQfTl
5cFLS+Szs9WIiN+lpbcvL9OBgbo3N8llZfjw8MxtbeS2trk1NdF9fbMjI/Tj47MiIvz8/AAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEBAAAh+QQA
AAAAACwAAAAADQANAAAIdQApmEgBQ4bBgzIkBOgQI8aLFQgDRBghg4SIAwNitBBggUCDgghluDCw
4UUBFSEPTogxQENKGQkgvPCwoIKDkCEyxOBgcAEIhDAOxECAkMCDgwhiXAiJAYACgwZenEhZgoHB
GABAhvyQQAaKAi9lKGARFqGAgAA7')
        
    $tick = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABEAAAAQCAIAAAB/UwMIAAAABGdBTUEAAK/INwWK6QAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAADSSURBVDhPY/hDNHj/833/pX6gcgYitay/
v55/Pr/+Gv37n+4TpSf/aD7DTAagBqBVhO0BKvLf6Y+sgYAeoAag2Wga8OmBawB6A+gHZG/j9A/E
BiA6/+Y8Wjhh1xO/Px6iARK46HogoV5/ph4SJkAA5EI0AH2PNSZAIQhRYb/JHqgC6BIIF+gNuCno
9sBNhbhEfqk8RA8wEnFFN8g/cNcDzcbvKogpID2g5AA2G47QAhd7uMGtAmoDhgf+RAgNa7jXgSGB
y+twgxDxAwxAgjZAtAEA+Nmc14IfYYIAAAAASUVORK5CYII=')
    
        
    # no user (blank)    
    $picturebox3Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmBKKAAAABGdBTUEAAK/INwWK6QAAAAZQTFRF
8PDwAAAAfqfmLAAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAABxSURBVHhe
7dCBAAAAAMOg+VMf5IVQYcCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMG
DBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBj4GhhRkAAB4TTD
rAAAAABJRU5ErkJggg==')    
        
    # user (shadow image)    
    $picturebox3UserImage = [System.Convert]::FromBase64String('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
md9HtBjRP25y7vTp0PtIAAAAAElFTkSuQmCC')
    #endregion
        
    
        
        $AdminLabel = if (Use-RunAs -check){"Administrator:"}
        $formTSTool3.Text = "$AdminLabel TSTool $TSToolVersion - Matthew Painter"
        
        $timer1.Enabled = $false
        
        
        # If max history count is 0 then it needs to be initialised to default 
        [int]$HistoryCountOriginal = Get-RegKey -Key Count
        if($HistoryCountOriginal -eq 0)
        {
            Get-RegKey -Key Count -Value 20 -Set 
        }
        
        
    
        if (!(Test-Path "$env:temp\history.csv"))
        {
            $History = New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u);"Computer"= $env:COMPUTERNAME; "User"= $env:USERNAME}
            $History | Export-csv -Path "$env:temp\history.csv"    -NoTypeInformation    
        }
        else
        {
            $History = Import-csv -Path "$env:temp\history.csv"
        }
        
        
        $ComputerHistory = $History | Where-Object {$_} | select -ExpandProperty computer
           if ($ComputerHistory.count -ne $null -and $STA)
        {
           $textbox1.AutoCompleteCustomSource.AddRange($ComputerHistory)
        }
    
    
            
    
    
        $ErrorActionPreference = 'stop'
        try
        {
            $computer = ($History[0] | Select-Object -ExpandProperty Computer).toupper()
        }
        catch
        {
            $computer = ($env:ComputerName).toupper()
        }
        $ErrorActionPreference = 'continue'    
        
        $textbox1.Text = $computer 
        
        $formTSTool3.ActiveControl = $textbox1 
        $SelectionStart = $textbox1.SelectionStart
        $textbox1.Focus()
        $textbox1.Select($SelectionStart, 0)
        
        If ($env:logonserver -eq "\\$env:computername" -or $env:logonserver -eq "\\MicrosoftAccount")
        {
            $Domain = "Connected to: Local Machine"
        }
        else
        {
            $ErrorActionPreference = 'stop'
            try
            {
                $Domain = "Connected to: $(([DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).Name)"
            }
            catch
            {
                $Domain = "Connected to: Local Machine"    
            }
            $ErrorActionPreference = 'continue'
        }
        
        # Writing the $Domain variable directly to status strip from here crashes the editor? this is a workaround
        $toolstripstatuslabel1_Click.invoke()
        
            
        $PictureBox3.Image = $picturebox3Image
        set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD"
        
    
        # Display QLD Filter option selection image
        if ([int](Get-RegKey -Key UseQLDFilter))
        {
            $addQLDPhoneFilterToolStripMenuItem.Image = $tick    
        }
        else
        {
            $addQLDPhoneFilterToolStripMenuItem.Image = $Cross        
        }
        
            
        # Retrieve SCCM Server settings (Set globally for all users of TSTool)
        if (Test-Path "$ParentDirectory\GlobalSettings.csv")
        {
            $SettingsCSV = Import-Csv "$ParentDirectory\GlobalSettings.csv"
    
            if($SettingsCSV.SCCMServer) 
            {
                set-variable -name SCCMSiteServer -value $($SettingsCSV.SCCMServer) -scope script -description "SCCM SiteServer" 
                set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCMNameSpace) -scope script -description "SCCM NameSpace" 
            }
            else
            {
                # Backward compatibility
                if($SettingsCSV.SCCM12Server)
                {
                    set-variable -name SCCMSiteServer -value $($SettingsCSV.SCCM12Server) -scope script -description "SCCM SiteServer" 
                    set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCM12NS) -scope script -description "SCCM NameSpace"
                }
                else
                {
                    set-variable -name SCCMSiteServer -value $($SettingsCSV.SCCM07Server) -scope script -description "SCCM SiteServer" 
                    set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCM07NS) -scope script -description "SCCM NameSpace"
                }
            }
        }
        
        # Check ExecutionPolicy
        if (!( "Unrestricted", "RemoteSigned", "Bypass" | % { if ( (Get-ExecutionPolicy) -eq $_ ){ $True } } ))
        {
          [Windows.Forms.MessageBox]::Show("Warning`nExecution policy is not set correctly!`n`nPS C:\>Set-ExecutionPolicy RemoteSigned", "TSTool $TSToolVersion","Ok","Warning")
        }
        
        $buttonDisconnect.Enabled = $false
        
    }
    
    $formMain_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
    #Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
        #Stop any pending jobs
        Stop-JobTracker
    }
    
    
    
    
    
    #region Main remote machine data retrieval jobs
    
    $buttonStartJob_Click={
        
        $buttonDisconnect.Enabled = $true
        
        [System.Windows.Forms.SendKeys]::SendWait("{ESC}")
        
        $timer1.Enabled = $false
        
        $TextBox1Validated = $textbox1.Text.Replace("`t", "")
        $TextBox1Validated = $TextBox1Validated.Trim()
        $textbox1.Text = $TextBox1Validated.toupper()
            
        if (-not($TextBox1Validated -eq $null -or $TextBox1Validated -eq ""))
        {
               $labelBarcode.foreColor = 'SteelBlue'
            $labelBarcode.Text = "$($textbox1.Text) "
            
            $StartJob0_Connectivity.invoke()
            $timer1.Enabled = $true
        }
        
        $picturebox2.BackColor = 'DarkGray'
    }
    
    
    $StartJob0_Connectivity={
        
        # Test connectivity (target machine)
        
        $Computer = $labelBarcode.text
        
        $buttonStartJob.Enabled = $false
        $buttonHistory.Enabled = $false
        $labelBarcode.foreColor = 'SteelBlue'
        
        $SelectionStart = $textbox1.SelectionStart
        $textbox1.Focus()
        $textbox1.Select($SelectionStart, 0)
        
        Add-JobTracker -Name "Connectivity" `
        -JobScript {
               #--------------------------------------------------
       
            Param($Argument1)
            
            $Computer = $Argument1.Get_Item("Computer")
            
                
            function Global:Test-WMI
            {
                param(
                    [string]$Computer = $env:computername,
                    [int]$WMITimeOutSec = 10, 
                    [switch]$CleanUp
                )
    
                $Hash = @{"ComputerName" = $Computer}
    
    
                $start = Get-Date
                if ($computer.trim() -as [ipaddress]){$isValidIP = $true}else{$isValidIP = $false}
                if ($isValidIP) 
                {
                    if (Test-Connection -ComputerName ($Computer.trim()) -Count 1 -Quiet)
                    {
                        $IP4 = $computer.trim()
                    }
                    else
                    {
                        $IP4 = $null
                    }
                } 
                else 
                {
                    try{$IP4 = Test-Connection -ErrorAction 'stop' -ComputerName ($Computer.trim()) -Count 1 | select -ExpandProperty IPV4Address | select -ExpandProperty IPAddressToString}catch{}
                }
                
                if ($IP4)
                {
                    Get-Job | where {$_.Command -match "Test-WMI" -and $_.State -eq "Completed"} | Remove-Job -force
                    $JobName = Start-Job -ArgumentList $IP4 -ScriptBlock { "Test-WMI"; (GWMI Win32_ComputerSystem -ComputerName $args).name } | select -ExpandProperty Name
    
                    do{
                        $state = Get-Job -name $JobName | select -ExpandProperty State
                        Start-Sleep -Milliseconds 50
                        $TimeSpan = New-TimeSpan $start (Get-Date) 
    
                    }until($TimeSpan.TotalSeconds -ge $WMITimeOutSec -or $State -eq "Completed")
    
    
                    if ($State -eq "Completed")
                    {
                        $Name = (Receive-Job -name $JobName)[1]
                        $Hash.Set_Item("WMIAccess", $true)
                        if ($Name){ $Hash.Set_Item("ComputerName", $name) }
                        Remove-Job -Name $JobName -Force
                    }
                    else
                    {
                        $Hash.Set_Item("WMIAccess", $false)
    
                        if ($CleanUp)
                        {
                            Get-Job -Name $JobName | Remove-Job -force
                        }
                    }
                    $Hash.Set_Item("Ping", $true) 
                    $Hash.Set_Item("WMI_Timer", (New-TimeSpan $start (Get-Date) | select -ExpandProperty TotalMilliseconds)) 
                }
                else
                {
                    $Hash.Set_Item("Ping", $false)
                    $Hash.Set_Item("WMIAccess", $false)
                }
                
                if ( $name -eq $computer.trim() )
                {
                    $Hash.Set_Item("DNSCheck", $true)
                }
                else
                {
                    if ($isValidIP)
                    {
                        $Hash.Set_Item("DNSCheck", $true)
                    }
                    else
                    {
                        $Hash.Set_Item("DNSCheck", $false)
                    }
                }
                
                $Hash.Set_Item("isValidIP", $isValidIP)
                New-Object -TypeName psobject -Property $Hash 
            }
    
    
            $Connectivity = Test-WMI -computer $Computer 
    
            # Build hash table 
            $Hash = @{
            Computer = $Computer
            ComputerName = $Connectivity.ComputerName
            Ping = $Connectivity.Ping
            WMIAccess = $Connectivity.WMIAccess
            WMI_Timer = $Connectivity.WMI_Timer
            C_Permissions = $false
            WinRM = $false
            RDP = $false 
            DNS = $Connectivity.DNSCheck 
            isValidIP = $Connectivity.isValidIP 
            }
    
            # Return Connectivity Object
            New-Object -TypeName PSObject -Property $Hash
            
            #--------------------------------------------------
        }`
        -CompletedScript {
            Param($Job)
    
            $Connectivity = Receive-Job -Job $Job 
            
            if ($Connectivity.Ping -and $Connectivity.WMIAccess -and $Connectivity.DNS -eq $true)
            {
                if ($picturebox2.BackColor -ne 'LimeGreen')
                {
                    $labelBarcode.Text = "$($labelBarcode.Text) "
                    $picturebox2.BackColor = 'LimeGreen'
                }
    
                # Note labelBarcode is subtley changed when button pressed (space added after name) 
                # Also labelBarcode is also subtley changed if previously no ping or wmi issue
                if ($labelBarcode.Text -eq $Connectivity.ComputerName)
                {
                    # we have already loaded this computer due to timer1
                    # just do the user specific queries
                    $StartJob1.Invoke() 
                }
                else
                { 
                    # New computer loaded via connect button click
                    # Or it has gone offline and come back again 
                    if ($Connectivity.Computer.trim() -as [ipaddress] -and $Connectivity.ComputerName)
                    {
                        $labelBarcode.Text = $Connectivity.ComputerName
                    } 
    
                    $StartJob1.invoke()
                    $StartJob2.invoke()
    
                    [System.Media.SystemSounds]::Asterisk.Play()
                }
            }
            elseif ($Connectivity.Ping -and -not $Connectivity.WMIAccess)
            {
                if ($picturebox2.BackColor -ne 'Blue')
                {
                    [System.Media.SystemSounds]::Hand.Play()
                }
    
                $picturebox2.BackColor = 'blue'
                $labelLOCKED.Text = "WMI Issue" 
                $labelLocation.text = ""
                $label1.text = ""
                $label2.Text = ""
                $textbox2.Text = ""
                $labelUserID.Text = ""
                $labelUserName.text = ""
                $PictureBox3.Image = $picturebox3Image
                set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD" 
                $labelUpTime.text = ""
    
                $labelBarcode.Text = "$($textbox1.Text) "
            }
            elseif($Connectivity.WMIAccess -and -not $Connectivity.DNS)
            {
                if ($picturebox2.BackColor -ne 'Blue')
                {
                    [System.Media.SystemSounds]::Hand.Play()
                } 
                $picturebox2.BackColor = 'blue'
                $labelLOCKED.Text = "DNS Issue" 
                $labelLocation.text = ""
                $label1.text = ""
                $label2.Text = ""
                $textbox2.Text = ""
                $labelUserID.Text = ""
                $labelUserName.text = ""
                $PictureBox3.Image = $picturebox3Image
                set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD" 
                $labelUpTime.text = ""
                $labelBarcode.Text = "$($textbox1.Text) "
            }
            else
            {
                if ($picturebox2.BackColor -ne 'Red')
                {
                    [System.Media.SystemSounds]::Hand.Play()
                }
                
                $picturebox2.BackColor = 'Red'
                $labelLOCKED.Text = "OFF LINE"    
                $labelLocation.text = ""
                $label1.text = ""
                $label2.Text = ""
                $textbox2.Text = ""
                $labelUserID.Text = ""
                $labelUserName.text = ""
                $PictureBox3.Image = $picturebox3Image    
                $labelUpTime.text = ""            
            }
            
                    
            # calculate refresh interval time here based on WMI access time (cater for slow machines/connections)
            $timer1.Interval = 30000 + ($Connectivity.WMI_Timer * 6)
    
            $buttonStartJob.Enabled = $true    
            $buttonHistory.Enabled = $true
            
            $labelBarcode.foreColor = 'MediumBlue'
                
        }`
        -UpdateScript {
            Param($Job)
            #$results = Receive-Job -Job $Job -Keep
            
        }`
        -ArgumentList @{'Computer'= $Computer}
    }
    
    
    $StartJob1={
        
        # User Specific Queries + uptime (Dynamic type properties)
        # Assume ping and wmi test passed 
        
        $Computer = $labelBarcode.text.Trim()
        
        $labelUserID.foreColor = 'SteelBlue'
        $labelUserName.foreColor = 'SteelBlue'    
        $label2.foreColor = 'SteelBlue'
        $labelUpTime.foreColor = 'SteelBlue'
        
        Add-JobTracker -Name "RemoteQuery" `
        -JobScript {
               #--------------------------------------------------
       
            Param($Argument1)    
            
            $Computer = $Argument1.Get_Item("Computer")
            $DomainConnected = $Argument1.Get_Item("DomainConnected")
            
            
            
            function Global:Get-ScreenSaver
            {
                param(
                   $computername = $env:computername
                )
                
                $hash = @{on = $false}
    
                try
                {
                    if (GWMI Win32_Process -ComputerName $computername | ?{$_.Name -match "\.scr"})
                    {
                        $hash = @{on = $true}
                    }
                }
                catch
                {}
                
                New-Object -TypeName psobject -Property $hash
            }
            
            
            
            function Global:Get-LockedWorkStation
            {
                param(
                    $computername = $env:computername
                )
    
                $regexa = '.+Domain="(.+)",Name="(.+)"$'
                $regexd = '.+LogonId="(\d+)"$'
    
                try
                {
                    $logon_sessions = @(Get-WmiObject win32_logonsession -ComputerName $computername -ErrorAction 'stop')
                    $logon_users = @(Get-WmiObject win32_loggedonuser -ComputerName $computername -ErrorAction 'stop')
                    $LogonUI = Get-WmiObject win32_process -computername $computername -ErrorAction 'stop' -filter "name like 'LogonUI.exe'" | select name
                }
                catch
                {
                    break
                }
    
                $session_user = @{}
    
                $logon_users |% {
                $_.antecedent -match $regexa > $nul
                $username = $matches[1] + "\" + $matches[2]
                $_.dependent -match $regexd > $nul
                $session = $matches[1]
                $session_user[$session] += $username
                }
    
    
                if (($logon_sessions | ?{$_.logontype -eq 2} | %{$session_user[$_.logonid]}) -and $logonUI)
                {
                    New-Object -TypeName psobject -Property @{isLocked = $true}   
                } 
                else
                {
                    New-Object -TypeName psobject -Property @{isLocked = $false} 
                }
            }
    
            function Get-UserLogonFull
            {
                <#
                .Synopsis
                   Get active user sessions from computer
                
                .Description
                   Function leverages mjolinor's Get-LoggedonUser that uses WMI and Boe Prox's Get-ComputerSessions 
                   that gets logon sessions using windows utility query.exe
                   
                   Essentially this script only focus's on user sessions retrieved by query.exe and binds 
                   some extra properties like user logon time and authentication type from WMI to the output object. 
                   
                   The benefit of this script over something simple like getting the process owner of explorer.exe
                   Is that you can identify active and disconnected sessions and list the output in the order that 
                   the users logged in.   
                   
                   This is particularly useful when the remote computer you are querying has switched users or is 
                   a terminal server. 
                   
                   Script requires administrator privilege and by default will :-
                   Start the "RemoteRegistry" service if required
                   Changing this key "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\AllowRemoteRPC" = 1
                    
             
                .parameter ComputerName 
                   Remote computer to query, by default will act on local machine
                         
               .Example
                   Get-UserLogonFull -computername Server01 | sort-object -property @{Expression="state";Descending=$false}, @{Expression="starttime";Descending=$true} | ft computer, username, state, StartTime -auto
                   
                Description
                -----------
                   List all user logon sessions of computer Server01 
                   Active sessions are listed first then disconnected sessions
                   Sessions are listed in order of logon time with latest logon at top. 
                   
                .Example
                   Get-Content computers.txt | Get-UserLogonFull | Export-Csv report.csv -NoTypeInformation
                   
                Description
                -----------
                   List all logon sessions of all computers saved in computer.txt and output to CSV
                                
               .Inputs
                   System.string
                   computer name(s)
                            
                .Outputs
                   System.object
                   
                              
                .Notes
                   NAME:      Get-UserLogonFull
                   PURPOSE:   Get active user sessions
                   VERSION:   1.0
                   AUTHOR:    Matthew Painter
                   LASTEDIT:  01/Aug/2013     
                      
            #>
             
                
                [CmdletBinding()]
                     
                Param( 
                    [Parameter( 
                    Mandatory = $false, 
                    Position = 0, 
                    ValueFromPipeline = $True)] 
                    [string[]]$computername=$env:computername
                )
                
                begin 
                {            
                    Function Get-ComputerSessions 
                    { 
                        # Original Boe Prox 01Nov2010 
                        
                        Param(
                        [string]$computer,
                        [switch]$force
                        ) 
             
                        if ($force)
                        {
                            try{
                                $RemoteRegistry = gwmi -computername $computer -class win32_service -ErrorAction 'stop' | Where-Object { $_.Name -eq "RemoteRegistry" }
                            }catch{}
                            
                            if ($RemoteRegistry.State -eq "Stopped" -and $computer -ne $env:computername) 
                            {                        
                                $return = $RemoteRegistry.changestartmode("automatic") 
                                if($return.returnvalue -eq 0) {
                                    $RemoteRegistry.StartService()
                                    
                                    Write-Verbose "Attempting to Start Remote Registry"
                                    Start-Sleep -Seconds 15                     
                                }
                            }
                            
                            $erroractionpreference = 'silentlycontinue'                        
                                 
                            $registryPath = "SYSTEM\CurrentControlSet\Control\Terminal Server"
                            $PropertyName = "AllowRemoteRPC"
                            $baseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $computer)
                            $key = $baseKey.OpenSubKey($registryPath, $true)
                                    
                            if ([Int32]($key.GetValue($propertyName)) -eq 0)
                            { 
                                $key.SetValue($propertyName, "1", "DWORD")
                                Write-Verbose "Attempt To Set Registry Key AllowRemoteRPC "
                                start-sleep -s 5 
                            } 
                            
                            $key.Close()
                            $baseKey.Close()                
                        }
                        
                        
                        $erroractionpreference = 'stop' 
                          
                        try{
                            $sessions = query session /server:$computer
                        }
                        catch{
                            write-warning $error[0].Exception.Message
    
                            # fall back in case of remote RPC failure
                            try{
                                $users = Get-WmiObject Win32_Process -ErrorAction 'stop' -ComputerName $computer -filter "Name = 'explorer.exe'"  | foreach -process {$_.GetOwner().User}
                                foreach ($user in $users){
                                    $temp = "" | Select Computer,SessionName, Username, Id, State, Type, Device 
                                    $temp.Computer = $computer 
                                    $temp.State = "unknown"
                                    $temp.Username = $user
                                    $temp
                                } 
                                 
                            }catch{break}
                        } 
                        $erroractionpreference = 'continue'
                        
                        if (!$temp.username){             
                            1..($sessions.count -1) | % { 
                                $temp = "" | Select Computer,SessionName, Username, Id, State, Type, Device 
                                $temp.Computer = $computer 
                                $temp.SessionName = $sessions[$_].Substring(1,18).Trim() 
                                $temp.Username = $sessions[$_].Substring(19,20).Trim() 
                                $temp.Id = $sessions[$_].Substring(39,9).Trim() 
                                $temp.State = $sessions[$_].Substring(48,8).Trim()
                                $temp.Type = $sessions[$_].Substring(56,12).Trim() 
                                $temp.Device = $sessions[$_].Substring(68).Trim() 
                                $temp 
                            }
                        }
                    }
                     
                    function Get-LoggedonUser
                    {    
                        # Original mjolinor 3/17/10
                           
                        param($computername)
                         
                        $regexa = '.+Domain="(.+)",Name="(.+)"$' 
                        $regexd = '.+LogonId="(\d+)"$'     
                         
                        $logontype = @{ 
                            "0"="Local System" 
                            "2"="Interactive" #(Local logon) 
                            "3"="Network" # (Remote logon) 
                            "4"="Batch" # (Scheduled task) 
                            "5"="Service" # (Service account logon) 
                            "7"="Unlock" #(Screen saver) 
                            "8"="NetworkCleartext" # (Cleartext network logon) 
                            "9"="NewCredentials" #(RunAs using alternate credentials) 
                            "10"="RemoteInteractive" #(RDP\TS\RemoteAssistance) 
                            "11"="CachedInteractive" #(Local w\cached credentials) 
                        }
                        
                        try{
                            $err=$null
                            $logon_sessions = @(gwmi win32_logonsession -ComputerName $computername -ErrorAction 'stop') 
                            $logon_users = @(gwmi win32_loggedonuser -ComputerName $computername -ErrorAction 'stop') 
                        }
                        catch{
                            write-warning $error[0].Exception.Message
                            break
                        } 
                         
                        $session_user = @{}  
                         
                        $logon_users |% { 
                            $_.antecedent -match $regexa > $nul 
                            $username = $matches[1] + "\" + $matches[2] 
                            $_.dependent -match $regexd > $nul 
                            $session = $matches[1] 
                            $session_user[$session] += $username 
                        }
                         
                         
                        $logon_sessions |%{ 
                            $starttime = [management.managementdatetimeconverter]::todatetime($_.starttime) 
                             
                            $loggedonuser = New-Object -TypeName psobject 
                            $loggedonuser | Add-Member -MemberType NoteProperty -Name "Session" -Value $_.logonid 
                            $loggedonuser | Add-Member -MemberType NoteProperty -Name "User" -Value $session_user[$_.logonid] 
                            $loggedonuser | Add-Member -MemberType NoteProperty -Name "Type" -Value $logontype[$_.logontype.tostring()] 
                            $loggedonuser | Add-Member -MemberType NoteProperty -Name "Auth" -Value $_.authenticationpackage 
                            $loggedonuser | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $starttime
                              
                            $loggedonuser 
                        }
                    } 
                }    
                Process { 
                    ForEach($computer in $computername) 
                    {
                        if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
                        {            
                            Write-Verbose "Connecting Computer $computer"
                            
                            $loggedonuser = Get-LoggedonUser -computer $computer 
                            
                            Get-ComputerSessions -computer $computer -force | sort username -unique | sort starttime -Descending | ? {$_.username} | %{
                                
                                :foo foreach ($User in $loggedonuser)
                                {
                                    if ($User.User){
                                        if ($User.User.split("\")[1] -eq $_.UserName){
                                            $_ | add-member -MemberType noteproperty -name User -value $User.user -PassThru |
                                            add-member -MemberType noteproperty -name Auth -value $User.Auth -PassThru |
                                            add-member -MemberType noteproperty -name TypeFull -value $User.Type -PassThru |
                                            add-member -MemberType noteproperty -name StartTime -value $User.StartTime -PassThru
                                            
                                            break foo
                                        }
                                    }
                                }
                            } 
                        }else
                        {
                            write-verbose "Cant Ping $computer"
                        }
                    }
                }
            }
    
            
        
            # Build hash table            
            $Hash = @{
                ComputerName = $Computer
                UserID = " "
                Name = " "
                Phone = " "
                Mobile = " "
                Locked = " " 
                ScreenSaver = " "
                email = " "
                ExceptionMessage = $null
            }
    
        
            try
            {
                $Win32_OperatingSystem = Get-WmiObject -class Win32_OperatingSystem -ComputerName $Computer -ErrorAction 'stop'
                $UserID = Get-UserLogonFull -computername $computer | sort-object -property @{Expression="state";Descending=$false}, @{Expression="starttime";Descending=$true} | Select-Object -ExpandProperty username -First 1
                            
                $SystemUptime = (New-TimeSpan ([System.Management.ManagementDateTimeconverter]::ToDateTime($Win32_OperatingSystem.LastBootUpTime)) (Get-Date)) 
                Switch ($SystemUptime) 
                { 
                   {$_.days -eq 1} {$Days="1 Day"} 
                   {$_.days -gt 1} {$Days=[string]$_.days + " Days"} 
                   {$_.hours -eq 1} {$Hrs="1 Hour"} 
                   {$_.hours -gt 1} {$Hrs=[string]$_.hours + " Hours"} 
                   {$_.Minutes -eq 1} {$Mins="1 Minute "} 
                   {$_.Minutes -gt 1} {$Mins=[string]$_.minutes + " Minutes"} 
                   {$_.Seconds -eq 1} {$Secs="1 Second "} 
                   {$_.Seconds -gt 1} {$Secs=[string]$_.seconds + " Seconds"} 
                } 
                 
                $Hash.Set_Item("UpTime", "$Days $Hrs $Mins $Secs".Trim())
                
            }
            catch
            {
                $Hash.Set_Item("ExceptionMessage", $_.Exception.Message)
            }
            
            $Hash.Set_Item("UserId", $UserID)    
            
    
            if ($UserID)
            {
                if (-not($DomainConnected -match 'Local'))
                {    
                    # get properties from AD
                    $ErrorActionPreference = 'stop'
                    try
                    {
                        $Searcher = New-Object DirectoryServices.DirectorySearcher([ADSI]"")
                        $Searcher.Filter = "(&(ObjectClass=User)(SAMAccountName=$UserID))"
                        $FoundUser = $Searcher.findOne()
                        $P = $FoundUser | Select path
                        $User = [ADSI]$P.path
                        
                        $Hash.Set_Item("Photo", $User.Properties["thumbnailPhoto"].Value)
                        $Hash.Set_Item("Name", $User.Properties["DisplayName"].Value)
                        $Hash.Set_Item("Phone", $User.Properties["telephoneNumber"].Value)
                        $Hash.Set_Item("Mobile", $User.Properties["Mobile"].Value)
                        $Hash.Set_Item("email", $User.Properties["mail"].Value)
                        
                    }
                    Catch
                    {
                        $Hash.Set_Item("Name", "Failed to access AD")
                    }
                    $ErrorActionPreference = 'Continue'
                }
                
                # Get-LockedWorkStation only works W7 and up, whereas Get-ScreenSaver works XP and up
                if (Get-LockedWorkStation -computer $Computer | Select-Object -ExpandProperty isLocked)
                {                
                    $Hash.Set_Item("Locked", $true)
                }
                else
                {                
                    if ((Get-ScreenSaver -computer $Computer).on)
                    {
                        $Hash.Set_Item("ScreenSaver", $true)
                    }
                }            
            }    
            else
            {
                $Hash.Set_Item("UserID", "No User")
            }
                
             # Return Inventory object
            New-Object -TypeName PSObject -Property $Hash
            
            #--------------------------------------------------
        }`
        -CompletedScript {
            Param($Job)
        
            $results = Receive-Job -Job $Job    
            
            If ($results.ExceptionMessage)
            {
                $picturebox2.BackColor = 'Blue'
                Update-Display ($results.ExceptionMessage) -color 'red'
            }
            else
            {
                # Update machine access history 
                $History = "$env:temp\history.csv"                       
                
                if (test-path $History)
                {
                    $HistoryObj = Import-Csv -Path $History
                }
                else
                {
                    $HistoryObj = New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u); "Computer"= "$($results.ComputerName)"; "User"= "$($results.UserID)"}
                }  
                
                # Do not want to overwrite a user name in the history with 'no user' just because that user logged off or shutdown
                $ErrorActionPreference = 'stop'
                try
                {
                    if (($HistoryObj[0] | Select-Object -ExpandProperty computer) -eq $results.ComputerName)
                    {
                        if ($results.UserID -eq "No User")
                        {
                            # stick with history version of last user
                            $lastUser = $HistoryObj[0] | Select-Object -ExpandProperty user                        
                        }
                        else
                        {
                            $lastUser = $results.UserID
                        }                    
                    }
                    else
                    {
                        $lastUser = $results.UserID
                    }
                }
                catch
                {
                    $lastUser = $results.UserID
                }
                $ErrorActionPreference = 'continue'    
                
            
                $temp = @( New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u); "Computer"= "$($results.ComputerName)"; "User"= $lastUser} )
                $HistoryObj = $HistoryObj | % { if( $_.Computer -ne $results.ComputerName) { $_ } } 
                
                $temp += $HistoryObj    
                          
                $count = [int](Get-RegKey -Key Count)            
                $temp | Where-Object {$_} | select -first $count | Export-csv -Path $History -NoTypeInformation
                
                $ComputerHistory = $temp | Where-Object {$_} | select -ExpandProperty computer
                if ($ComputerHistory.count -and $STA)
                {
                   $textbox1.AutoCompleteCustomSource.AddRange($ComputerHistory)
                }
            }
            
            
            # Update "blue text" results panes        
            $labelUserID.foreColor = 'MediumBlue'
            $labelUserName.foreColor = 'MediumBlue'
            
            $label2.foreColor = 'MediumBlue'
            
            # Many of my users have entered phone number information like "My number is 5412 3456 but dont give to public" (instead of just a number)
            # Using the QLD filter the displayed number will be "0754123456"
            # If you want to use a filter you will probably have to create your own for your particular region
            if ([int](Get-RegKey -Key UseQLDFilter))
            {
                $label2.text = "$($results.UserID) `n$($results.name) `n$($results.email) `n`n$(Clean-NumberQLD-AU $results.phone) `n$(Clean-NumberQLD-AU $results.mobile) "
            }
            else
            {
                $label2.text = "$($results.UserID) `n$($results.name) `n$($results.email) `n`n$($results.phone) `n$($results.mobile) "
            }
            
            set-variable -name email -value $results.email -scope script -description "Email Address of User" 
                
            $labelUserName.text = $results.Name
            $labelUserID.text = $results.UserID
            
            $labelUpTime.foreColor = 'MediumBlue'        
            $labelUpTime.text = "$($results.UpTime)"
        
            
            
            # Update image from AD or put in a dummy image
            
            if ($results.UserID -eq "No User")
            {
                $PictureBox3.Image = $picturebox3Image  
                set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD"          
            }        
            else
            {
                $PictureBox3.Image = $picturebox3UserImage  
                set-variable -name CurrentImageSet -value $picturebox3UserImage -scope script -description "Alt to Raw image in bytes from AD"          
            }
            
            if ($results.Photo)
            {
                $PictureBox3.Image = $results.Photo
                set-variable -name CurrentImageSet -value $results.Photo -scope script -description "Raw image in bytes from AD"                        
            }
            
    
            
            
            
            # Red Text Staus Banner    
            if ($results.Locked -eq $true)
            {
                $labelLOCKED.Text = "LOCKED"
            }
            else
            {
                if ($results.ScreenSaver -eq $true)
                {            
                    $labelLOCKED.Text = "SCREEN SAVER"    
                }
                else
                {
                    $labelLOCKED.Text = ""    
                }
            }
        
        }`
        -UpdateScript {
            Param($Job)
            #$results = Receive-Job -Job $Job -Keep
    
        }`
        -ArgumentList @{'DomainConnected' = $toolstripstatuslabel1.Text; 'Computer'= $Computer}
    }
    
    
    $StartJob2={
        
        # Machine Specific Queries     (static type properties)
        
        $Computer = $labelBarcode.text.Trim()
        
        $labelLocation.foreColor = 'SteelBlue'    
        $label1.foreColor = 'SteelBlue'
    
        
        Add-JobTracker -Name "RemoteQuery" `
        -JobScript {
               #--------------------------------------------------
            Param($Argument1)
            
            $Computer = $Argument1.Get_Item("Computer")
            $LocationsCSV = $Argument1.Get_Item("LocationsCSV")
            
            $HashLookup = @{}
            foreach($rec in (Import-Csv -Path $LocationsCSV))
            {
                $HashLookup.Set_Item($rec.subnet, $rec.location)
            }
            
            
            # Build hash table            
            $Hash = @{            
                Machine = $computer
                Location = " "
                IPv4 = " "
                UpTime = " "
                ExceptionMessage = $null
            }
    
    
            try
            {
                # $computer = $env:computername
                $Win32_NetworkAdapter = Get-WmiObject win32_networkadapter -ComputerName $computer -ErrorAction 'stop'    
                $Win32_NetworkAdapterConfiguration = Get-WmiObject Win32_NetworkAdapterConfiguration -ComputerName $computer -ErrorAction 'stop'
                $Win32_OperatingSystem = Get-WmiObject -class Win32_OperatingSystem -ComputerName $computer -ErrorAction 'stop'
                $Win32_ComputerSystem = Get-WmiObject -class Win32_ComputerSystem -ComputerName $computer -ErrorAction 'stop'
                $Win32_Bios = Get-WMIObject -Class Win32_Bios -ComputerName $computer -ErrorAction 'stop'
                
                $Hash.Set_Item("Machine", "$($Win32_ComputerSystem.Name)")
                $Hash.Set_Item("Model", "$($Win32_ComputerSystem.Manufacturer)$($Win32_ComputerSystem.Model)")
                $Ram = [math]::round($Win32_ComputerSystem.TotalPhysicalMemory /1Gb,1); if ($Ram -gt 0){ $Hash.Set_Item("Ram", "$Ram Gb") }
                $Hash.Set_Item("OS", "$($Win32_OperatingSystem.Caption) $($Win32_OperatingSystem.CSDVersion)")
                $Hash.Set_Item("ServiceTag", "$($Win32_Bios | select -expandproperty serialnumber)")   
                $Hash.Set_Item("BuildDate", "$([System.Management.ManagementDateTimeconverter]::ToDateTime($Win32_OperatingSystem.installdate))")
                        
            }
            catch
            {
                $Hash.Set_Item("ExceptionMessage", $_.Exception.Message)
                # Return Inventory object
                return New-Object -TypeName PSObject -Property $Hash
            }
            
            
            function Test-Property
            {
                param($TestObject, $TestProperty)
    
                Get-Member -InputObject $TestObject |
                % {                                            
                    if(($_.MemberType -eq "Property" ) -and ($_.Name -eq $TestProperty))                        
                    {                            
                        return $true                        
                    }                    
                }                    
                return $false 
            }
                    
            
            try
            {          
                $NetEnabledExists = Test-Property -TestObject $Win32_NetworkAdapter -TestProperty "netenabled"    
                $index = $win32_NetworkAdapter | Where-Object {$_.NetConnectionID -and $_.MACAddress -and ($_.netenabled -or !$NetEnabledExists)} | Select-Object -ExpandProperty index 
     
                $Hash.Set_Item("AdaptorIndex", $index)
    
                foreach ($i in $index)
                {     
                    $ip += ($Win32_NetworkAdapterConfiguration | ? {$_.index -eq $i}).IPAddress
                    $sn += ($Win32_NetworkAdapterConfiguration | ? {$_.index -eq $i}).IPSubnet
                }
                        
                $IPv4 = $ip | ? { $_ -like '*.*' } | Select-Object -First 1                
                $Hash.Set_Item("IPv4", $IPv4)
                $ips = $IPv4.split(".")  
                        
                $SubnetMask = $sn| ? { $_ -like '*.*' } | Select-Object -First 1     
                $Hash.Set_Item("SubnetMask", $SubnetMask)
                $SubnetMasks = $SubnetMask.split(".")
                
                   
                $Subnet = $null            
                for ($i=0; $i -lt 4; $i++ )   
                {  
                    $Subnet  += [string]($ips[$i] -band $SubnetMasks[$i])  
                    if($i -lt 3)  
                    {  
                        $Subnet  += "."  
                    }  
                } 
                
                $Hash.Set_Item("Subnet", $Subnet)
                $Hash.Set_Item("Location", ($HashLookup.Get_Item($Subnet)))
             
            }
            catch
            {
                $Hash.Set_Item("ExceptionMessage", $_.Exception.Message)
            }
            
                                
            # Return Inventory object
            New-Object -TypeName PSObject -Property $Hash
            
        }`
        -CompletedScript {
            Param($Job)
            
            $results = Receive-Job -Job $Job 
            
            # Update "blue text" results panes    
            $label1.foreColor = 'MediumBlue'
            $labelLocation.foreColor = 'MediumBlue'            
               $label1.text = "$($results.Machine)`n$($results.Model)`n$($results.OS)`n$($results.Ram)`n$($results.ServiceTag)`n$($results.IPv4)`n$($results.BuildDate)"
            $textbox2.Text = $results.ServiceTag
            
            # In the case a machine name was resolved from IP passed to script:-
            if ($results.Machine)
            {
                $labelBarcode.Text = $results.Machine.toUpper()
            }
                    
            
            # To do - Add something a bit more intuitive around this 
            if ($results.Location)
            {
                $labelLocation.text = $results.Location
            }
            else
            {
                $labelLocation.text = $results.subnet
            }
            
    
        }`
        -UpdateScript {
            Param($Job)
            
        }`
        -ArgumentList @{'LocationsCSV' = $locationsCSV; 'Computer'= $Computer}
    }
    
    #endregion 
    
    
    
    
    #Region Remote Data Retrieval Buttons
    
    $buttonProfileSvr_Click={
        
        $profileServer = Get-RegKey -Key profileServer
        
        if ($profileServer -eq "0")
        {
            # hardcoded but user can edit from application (in a roaming profile environment this method will identify user's active workstations)
            Get-RegKey -Key profileServer -Value "scfs11" -Set 
            $setProfileServerToolStripMenuItem_Click.invoke()
        }
        
        $profileServer = Get-RegKey -Key profileServer
        
        if (Test-Connection -ComputerName $profileServer -Count 1 -Quiet)
        {
    
            [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
            $UserID = [Microsoft.VisualBasic.Interaction]::InputBox("Enter UserID of specific user or enter none to list all users connected to profile server", "TSTool $TSToolVersion", $null)
            
            if ($UserID)
            {
                $ButtonJob = "Filter-NameServerConnection -userID $userID -computer $profileServer | Format-Table username,computername,sharename,activetime -AutoSize"
                $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $profileServer; 'JobBlurb' = "User $userID - Open file conections on profile server $profileServert"; 'userID' = $UserID ; }
                $RemoteJobButtons2.invoke()
            }
            else
            {
                $ButtonJob = "Get-WmiObject win32_serverconnection -computerName $profileServer | sort username | Format-Table username,computername,sharename,activetime -AutoSize"
                $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $profileServer; 'JobBlurb' = "Users with open files on profile server $profileServert"; }
                $RemoteJobButtons2.invoke()
            }
            
        }
        else
        {
            Update-Display "Check you can ping profile server or `nUpdate server name under options menu" -color 'red'        
        }
    }
    
    $buttonMonitors_Click={
            
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            Update-Display "$computer Monitor Info" -Color 'Yellow'
        
            if ($label1.Text -match "Windows 7" -or $label1.Text -match "Windows 8")
            {
                $ActiveMonitors = Get-ActiveMonitor -computer $computer
                if (!($ActiveMonitors.ErrorMessage))
                { 
                    Update-Display ($ActiveMonitors | select Monitor, Description, SerialNumberID, ProductCodeID, YearOfManufacture, WeekOfManufacture)
                    Update-Display (Get-MonitorResolution -computer $computer)
                }
                else
                {
                    Update-Display $ActiveMonitors.ErrorMessage -color 'Red'
                }
            }
            else
            {
                Update-Display "This function is only supported on Windows 7 and Windows 8" -color 'Red'
            }
        }
    }
    
    
    $AddRemovePrograms_Click={    
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            $OS = Get-WMIObject -Class win32_operatingsystem
            $ThisOS = $OS.OSArchitecture
            
            $OS = Get-WMIObject -Class win32_operatingsystem -ComputerName $computer
            $RemoteOS = $OS.OSArchitecture
            
            if ($ThisOS -match "32" -and $RemoteOS -match "64" )
            {
                $Warning =  "Warning - Cant read 64bit registry from this 32bit machine"         
            }
            else
            {
                $Warning = $null
            }    
            
            $ButtonJob = "Get-AddRemovePrograms $Computer | select name, version, InstallDate | ft -autosize"
            $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Add Remove Programs (Live) - $computer"; 'Warning' = $Warning; }
            $RemoteJobButtons.invoke()
        }
    }
    
    $buttonWin8Apps_Click={    
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            if ($label1.Text -match "Windows 8")
            {
                if (Use-RunAs -check)
                {
                    $ButtonJob = "Invoke-Command {Get-AppxPackage -allusers | sort name | select name, version | ft -autosize | out-string} -computername $computer"
                    $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Get Windows8 Style 'Modern Apps' (Live) - $computer"; }
                    $RemoteJobButtons.invoke()
                }
                else
                {
                    Update-Display "Get Windows8 Style 'Modern Apps' (Live) - $computer" -color 'Yellow'
                    Update-Display "This command requires Administrator privilage" -color 'Red'    
                }
            }
            else
            {
                # bit dry - yes i know
                Update-Display "Get Windows8 Style 'Modern Apps' (Live) - $computer" -color 'Yellow'
                Update-Display "Computer $computer is not Windows8" -color 'Red'
            }
        }
    }
    
    $InstalledMSI_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            $Answer = [Windows.Forms.MessageBox]::Show("Warning - May Take Several Minutes`nAlso a consistency check is performed on every MSI", "TSTool $TSToolVersion","YESNO","Exclamation")
       
            if ($answer -eq "Yes")
            {
                $ButtonJob = "Get-WmiObject win32_Product -computer $computer | Select Name,Version,Vendor,Installdate | Sort-Object name | ft * -autosize"
                $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "MSI Installed (Live) - $computer"; }
                $RemoteJobButtons.invoke()
            }
        }
    }
    
    $buttonIPConfig_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            $ButtonJob = "Get-IPConfig $computer"
            $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Basic IPConfig - $computer"; }
            $RemoteJobButtons.invoke()
        }
    }
    
    
    $buttonGPUpdate_Click={    
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            $ButtonJob = @"
        if ((Invoke-WmiMethod -ComputerName $Computer -Path win32_process -Name create  -ArgumentList "gpupdate /target:Computer /force /wait:0").ReturnValue -eq 0){"Success"}else{"Fail"}
"@
            $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Refreshing Machine GroupPolicy - $computer"; }
            $RemoteJobButtons.invoke()
        }
    }
    
    
    $buttonProcesses_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            $ButtonJob = @"    
        Get-WmiObject win32_process -computername $computer -ErrorAction 'stop' | select description, CommandLine | sort description | ft -AutoSize
        
"@
            $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Processes Running - $computer"; }
            $RemoteJobButtons.invoke()
        }
    }
    
    
    
    
    $RemoteJobButtons={
        
        # These remote job buttons are to be run against connected pc
        if ($buttonStartJob.Enabled -eq $true)
        {        
            # All job type buttons disabled
            $buttonProcesses.Enabled = $false
            $buttonGPUpdate.Enabled = $false
            $buttonIPConfig.Enabled = $false
            $InstalledMSI.Enabled = $false
            $AddRemovePrograms.Enabled = $false
            $FilteredLive.Enabled = $false
            $buttonWin8Apps.Enabled = $false
            $buttonProfileSvr.Enabled = $False
            $buttonWakeUp.Enabled = $False
            
            $formTSTool3.Cursor = 'AppStarting'        
            set-variable -name "JobBlurb" -value $RemoteJobButtonArgs.Get_Item("JobBlurb") -scope script -description "jobBlurb"
            Update-Display $JobBlurb -color 'Yellow'
            Update-Display $RemoteJobButtonArgs.Get_Item("Warning") -color 'Red'
            
            Add-JobTracker -Name "JobName" `
            -JobScript {
                   #--------------------------------------------------
                Param($Argument1)
                
                $ScriptJob = $Argument1.Get_Item("ScriptJob")
                $computer = $Argument1.Get_Item("computer")
                
                function Get-IPConfig($computer)
                {        
                    try
                    {
                        $Win32_NetworkAdapterConfiguration = Get-WmiObject -Class Win32_NetworkAdapterConfiguration -ComputerName $Computer -ErrorAction 'stop' 
                        
                        $Win32_NetworkAdapterConfiguration | ? {$_.IPEnabled -eq $true -and $_.DHCPEnabled -eq $true} | 
                        Format-List @{ Label="Computer Name"; Expression= { $_.__SERVER }}, Description, MACAddress, IPAddress, IPSubnet, DefaultIPGateway, DHCPEnabled, DHCPServer, @{ Label="DHCP Lease Obtained"; Expression= { [System.Management.ManagementDateTimeconverter]::ToDateTime($_.DHCPLeaseObtained) }},@{ Label="DHCP Lease Expires"; Expression= { [System.Management.ManagementDateTimeconverter]::ToDateTime($_.DHCPLeaseExpires) }}
                        
                        $Win32_NetworkAdapterConfiguration | ? {$_.IPEnabled -eq $true -and $_.DHCPEnabled -eq $false} | 
                        Format-List @{ Label="Computer Name"; Expression= { $_.__SERVER }}, Description, MACAddress, IPAddress, IPSubnet, DefaultIPGateway, DHCPEnabled
                    }
                    catch
                    {
                        $_.Exception.Message    
                    }                    
                }
                
                
                function Get-AddRemovePrograms
                {
                    param([string]$computer)
                    
                    try{
                        $RemoteRegistry = gwmi -computername $computer -class win32_service -ErrorAction 'stop' | Where-Object { $_.Name -eq "RemoteRegistry" }
                    }catch{}
                    
                    if ($RemoteRegistry.State -eq "Stopped" -and $computer -ne $env:computername) 
                    {                        
                        $return = $RemoteRegistry.changestartmode("automatic") 
                        if($return.returnvalue -eq 0) {
                            $RemoteRegistry.StartService()
                            Start-Sleep -Seconds 15                     
                        }
                    }
                    else
                    {            
                        $array = @()
                        
                        $UninstallKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" 
                        $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine',$computer) 
    
                        $regkey=$reg.OpenSubKey($UninstallKey) 
                        
                        if ($regkey -ne $null)
                        {
                        
                            $subkeys=$regkey.GetSubKeyNames() 
                             
                            foreach($key in $subkeys)
                            {
                                $thisKey=$UninstallKey+"\\"+$key 
                                $thisSubKey=$reg.OpenSubKey($thisKey) 
                                $obj = New-Object PSObject
                                $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computer
                                $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value $($thisSubKey.GetValue("DisplayName"))
                                $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($thisSubKey.GetValue("DisplayVersion"))
                                $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($thisSubKey.GetValue("InstallDate"))
                                $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher"))
                                $obj | Add-Member -MemberType NoteProperty -Name "SystemComponent" -Value $($thisSubKey.GetValue("SystemComponent")) 
                                $array += $obj          
                            } 
                        }        
                    
                        # 32bit software installed on a 64 bit machine               
                        $UninstallKey="SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
                        $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine',$computer)
                            
                        $regkey=$reg.OpenSubKey($UninstallKey)
                        
                        if ($regkey -ne $null)
                        {                     
                            $subkeys=$regkey.GetSubKeyNames()
                            
                            foreach($key in $subkeys){                     
                                $thisKey=$UninstallKey+"\\"+$key  
                                $thisSubKey=$reg.OpenSubKey($thisKey)  
                                $obj = New-Object PSObject 
                                $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computer 
                                $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value $($thisSubKey.GetValue("DisplayName")) 
                                $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($thisSubKey.GetValue("DisplayVersion")) 
                                $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value $($thisSubKey.GetValue("InstallLocation")) 
                                $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($thisSubKey.GetValue("InstallDate")) 
                                $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher")) 
                                $obj | Add-Member -MemberType NoteProperty -Name "SystemComponent" -Value $($thisSubKey.GetValue("SystemComponent"))
                                $array += $obj                          
                            }
                        }                 
    
                        $hklm = 2147483650
                        $key = "SOFTWARE\Microsoft\Internet Explorer"
                        $value = "Version"                        
    
                        try
                        {
                            $wmi = [wmiclass]"\\$computer\root\default:stdRegProv"
                            $IEVer = ($wmi.GetStringValue($hklm,$key,$value)).svalue
                        }
                        catch
                        {                        
                        }
                        
                        $obj = New-Object PSObject 
                        $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computer 
                        $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value "Internet Explorer"
                        $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($IEVer) 
                        $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value "" 
                        $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value ""
                        $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value ""
                        $obj | Add-Member -MemberType NoteProperty -Name "SystemComponent" -Value ""
                        $array += $obj 
                        
                        
                        $array = $array | %{
                            $VerCorrected = if ($_.Version){$_.Version}else{"1"}
                            $AppIndex = "$($_.Name)  -  $VerCorrected"
                            $_ | Add-Member -MemberType NoteProperty -Name "AppIndex" -Value $AppIndex -PassThru
                         }
                        
                        $array | Where-Object { $_.Name -and -not($_.SystemComponent) } | select ComputerName, Name, Version, InstallDate, appindex | sort appindex -Unique
                    } # end if
                }
            
        
                Invoke-Expression $ScriptJob
                
                #--------------------------------------------------
            }`
            -CompletedScript {
                Param($Job)
                #Enable remote job type Buttons
                $buttonProcesses.Enabled = $true
                $buttonGPUpdate.Enabled = $true
                $buttonIPConfig.Enabled = $true
                $InstalledMSI.Enabled = $true
                $AddRemovePrograms.Enabled = $true
                $FilteredLive.Enabled = $true
                $buttonWin8Apps.Enabled = $true
                $buttonProfileSvr.Enabled = $true
                $buttonWakeUp.Enabled = $true
    
                $formTSTool3.Cursor = 'Default'
                
                $JobButtonResult = Receive-Job -Job $Job             
                
            
                if ($JobBlurb -match "Filtered Add Remove Programs")
                {
                    set-variable -name "filteredResult" -value $JobButtonResult -scope script -description "output of JobButtonResult"
                    update-display ( $filteredResult | %{ if ( -not ($filterList.ContainsKey($_.AppIndex)) ){$_} } | select name, version, InstallDate | ft -AutoSize ) 
                }
                else
                {
                    Update-Display $JobButtonResult
                }
                
                
                 
                
            }`
            -UpdateScript {
                Param($Job)
                #$results = Receive-Job -Job $Job -Keep
            }`
            -ArgumentList $RemoteJobButtonArgs        
        }
    }
    
    $RemoteJobButtons2={
        
        # These remote job buttons are to be run against remote servers etc (not connected pc)
        if ($true)
        {        
            # All job type buttons disabled
            $buttonProcesses.Enabled = $false
            $buttonGPUpdate.Enabled = $false
            $buttonIPConfig.Enabled = $false
            $InstalledMSI.Enabled = $false
            $AddRemovePrograms.Enabled = $false
            $buttonWin8Apps.Enabled = $false
            $buttonProfileSvr.Enabled = $False
            $buttonWakeUp.Enabled = $False
            
            $formTSTool3.Cursor = 'AppStarting'         
            Update-Display $RemoteJobButtonArgs.Get_Item("JobBlurb") -color 'Yellow'
            Update-Display $RemoteJobButtonArgs.Get_Item("Warning") -color 'Red'
            
            Add-JobTracker -Name "JobName" `
            -JobScript {
                   #--------------------------------------------------
                Param($Argument1)
                
                $ScriptJob = $Argument1.Get_Item("ScriptJob")
                $computer = $Argument1.Get_Item("computer")
                $userID = $Argument1.Get_Item("userID")
                
                # insert remote functions here    \/
                
                function Filter-NameServerConnection
                {
                    param($userID, $computer)
                    $filter = "UserName = `'$userID`' "
                    Get-WmiObject win32_serverconnection -computerName $computer -filter $filter
                }
                
                
            
                function Send-WOL
                {                
                    param($Computer, $NameSpace, $SiteServer, $max)    
                 
                    try
                    {
                        $Query = "select * from SMS_R_System where name=`'$Computer`'"
                        $R_System = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer
                        
                        foreach ($System in $R_System)
                        { 
                            $Subnet = $System.IPSubnets
                            $MACAddress = $System.MACAddresses
                            $System | ft name, LastLogonUserName, IPSubnets, MACAddresses -AutoSize                 
                            break 
                        }
                        
                        $Query = "select * from SMS_R_System where IPSubnets=`'$Subnet`'"
                        $SubnetComputers = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer | select -ExpandProperty name        
    
                    }
                    catch
                    {
                        $SubnetComputers = $env:computername
                        "Target computer not found in SCCM"                    
                    }
                    
                  
                    $scriptblock = {                    
                        param ($MACAddress)
                        
                        
                        $WOLScript = @"
                function WOL{
                param(`$MACAddress)
                `$WOLString = `$MACAddress.split(':') | %{ [byte]('0x' + `$_) };
                `$UDPclient = new-Object System.Net.Sockets.UdpClient;
                `$UDPclient.Connect(([System.Net.IPAddress]::Broadcast),4000);
                `$packet = [byte[]](,0xFF * 6);
                `$packet += `$WOLString * 16;
                [void]`$UDPclient.Send(`$packet, `$packet.Length);
                # New-Item c:\temp\wol.txt -type file -force -value "WOL packet sent to `$MACAddress" | out-null
                
                }
                WOL "$MACAddress"
                Remove-Item `$MyINvocation.InvocationName
"@
                          
                        New-Item c:\temp -type directory -force | out-null
                        $WOLScript | Out-File -FilePath c:\temp\wol.ps1 -Encoding ascii 
                        powershell -executionpolicy bypass -file c:\temp\wol.ps1
                        return $env:computername 
                    }
                 
                    if ($MACAddress)
                    {
                        try
                        {
                            for ($i=1; $i-le 1; $i++)
                            {
                                Invoke-Command -ComputerName $SubnetComputers -ScriptBlock $scriptblock -ArgumentList $MACAddress -ErrorAction 'silentlycontinue' |
                                %{
                                    $count = $count+1
                                    "Wakeup packet sent from $_"
                                    if ($count -ge $max){continue}
                                }
                            } 
                        }    
                        catch{}                         
                        
                    }
                    else
                    {
                        "`nFailed to retrieve MAC Address for computer $computer"        
                    }
                }
                
                                   
                Invoke-Expression $ScriptJob            
                #--------------------------------------------------
            }`
            -CompletedScript {
                Param($Job)
                #Enable remote job type Buttons
                $buttonProcesses.Enabled = $true
                $buttonGPUpdate.Enabled = $true
                $buttonIPConfig.Enabled = $true
                $InstalledMSI.Enabled = $true
                $AddRemovePrograms.Enabled = $true
                $buttonWin8Apps.Enabled = $true
                $buttonProfileSvr.Enabled = $true
                $buttonWakeUp.Enabled = $true
    
                $formTSTool3.Cursor = 'Default'
                
                $JobButtonResult = Receive-Job -Job $Job             
                Update-Display $JobButtonResult 
                
            }`
            -UpdateScript {
                Param($Job)
                #$results = Receive-Job -Job $Job -Keep
            }`
            -ArgumentList $RemoteJobButtonArgs        
        }
    }
    
    
    #endregion
    
    
    
    
    #region Applaunch Tab Items
    
    $buttonCMD_Click={
        Update-Display "Open Command Prompt" -color "Yellow"
        ii "$env:windir\system32\cmd.exe"
    }
    
    $buttonPSRemote_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and (Test-PSRemoting $Computer -report))
        {
            Update-Display "Start PS Remote Session with $Computer" -color "Yellow"
            $arg = "-noexit -executionpolicy bypass -command Enter-PSSession -ComputerName $Computer"
            Start-Process "$psHome\powershell.exe" -ArgumentList $arg    
        }
        else
        {
            Update-Display "Start PS Remote Session with $Computer" -color "Yellow"
            Update-Display "Computer $computer is offline or does not have PSRemoting enabled - Launching just console" -color "Red"
            $buttonPowerShell_Click.invoke()
        }
        
    }
    
    $buttonPowerShell_Click={
        Update-Display "Open Powershell Console" -color "Yellow"
        $arg = "-executionpolicy bypass"
        Start-Process "$psHome\powershell.exe" -ArgumentList $arg     
    }
    
    
    $buttonRegEdit_Click={
        Update-Display "Open registry editing tool regedit.exe" -color "Yellow"
        ii "$env:windir\regedit.exe"
    }
    
    $buttonMSTSC_Click={
        $remote =  "mstsc.exe"
        iex $remote    
    }
    
    #endregion
    
    
    
    
    #region TSTool buttons that wont freeze GUI
    
    
    $buttonRDP_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -or $picturebox2.BackColor.Name -eq 'Blue')
        {
            $remote =  "mstsc.exe /v: $computer"
            iex $remote
        }
    }
    
    
    $button1_Click={
        #This is the second RDP button
        $buttonRDP_Click.invoke()
    }
    
    $buttonRA_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $labelUserID.Text -ne "No User")
        {
            Update-Display "Initiating Remote Assistance Session with computer $computer" -color 'Yellow'
            msra /offerRA $computer    
        }
    }
    
    $buttonEmail_Click={
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and -not($labelUserID.Text -eq "" -or $labelUserID.Text -eq "No User" -or $labelUserID.Text -eq "UserID"))
        {        
            if ( $email -ne $null -and $email -ne "".Trim() -and $email -ne " " )
            {
                Update-Display "Compose email to - $email" -color 'Yellow'
                try
                {
                    Start-Process -FilePath "mailto:$email" -ErrorAction "Stop"
                }
                catch
                {
                    Update-Display "Cant email $email" -color 'red'
                }
            }    
        }    
    }
    
    $buttonMySite_Click={
        if (-not($labelUserID.Text -eq "" -or $labelUserID.Text -eq "No User" -or $labelUserID.Text -eq "UserID"))
        {
            Start-Process -FilePath "http://mysite/person.aspx?accountname=$($labelUserID.Text)"
        }
        else
        {
            Start-Process -FilePath "http://mysite"
        }
    }
    
    $buttonWarranty_Click={
        # Start-Process -FilePath "http://www.dell.com/support/troubleshooting/us/en/04/Index?c=us&s=bsd&cs=04&l=en&t=warranty&servicetag=$($textbox2.text)" 
        Start-Process -FilePath "http://www.dell.com/support/my-support/us/en/555/product-support/servicetag/$($textbox2.text)" 
    }
    
    
    
    
    
    
    $buttonManage_Click={
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $label1.Text -ne "")
        {
            $computer = $labelBarcode.text.Trim()
        }
        else
        {
            $computer = $env:COMPUTERNAME
        }
        
        compmgmt.msc /computer=$computer
        Update-Display "Connect to compmgmt MMC $computer" -color 'Yellow'    
    }
    
    $buttonSysInfo_Click={
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $label1.text -ne "")
        {
            $computer = $labelBarcode.text.Trim()        
        }
        else
        {
            $computer = $env:COMPUTERNAME
        }
        
        msinfo32.exe /computer $computer
        Update-Display "connect to msinfo32 $computer" -color 'Yellow'
    }
    
    
    
    $buttonOU_Click={
        
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $labelBarcode.text.Trim() -ne "")
        {
            Update-Display "Get - Computer and User OU" -color 'Yellow'
            if (-not($toolstripstatuslabel1.Text -match 'Local'))
            {
                Try
                {
                    $UserID = $labelUserID.Text
                    $Computer = $labelBarcode.text.Trim()
                    
                    if ($UserID -and $UserID -ne "UserID")
                    {
                        $UserOU = $null
                        $searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
                        $searcher.Filter = "(&(objectClass=User)(samAccountName=$UserID))" 
                        $result = $searcher.FindOne() 
    
                        if ($result)
                        {
                            $UserOU = "$UserID OU - $($result.GetDirectoryEntry().Parent)"
                        }
                        else
                        {
                            $UserOU = "$UserID account not found in AD"
                        }
                    }
    
                    if ($Computer -ne "")
                    {
                        $ComputerOU = $null
                        $searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
                        $searcher.Filter = "(&(objectClass=Computer)(Name=$Computer))" 
                        $result = $searcher.FindOne() 
    
                        if ($result)
                        {
                            $ComputerOU = "$Computer OU - $($result.GetDirectoryEntry().Parent)"
                        }
                        else
                        {
                            $ComputerOU = "$Computer account not found in AD"
                        }
                    }
                }
                catch
                {
                    Update-Display "Error accessing AD" -color "Red"
                }
                
                Update-Display "$UserOU`n$ComputerOU`n "
                If (-not($UserOU -or $ComputerOU)){ Update-Display "-" }
            }
            else
            {
                Update-Display "`nNot on Domain`n " -color "Red"        
            }
        }
    }
    
    $buttonC_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            explorer.exe "\\$Computer\c$"    
        }
    }
    
    $buttonHome_Click={
        
        $UserID = $labelUserID.Text
        if  (-not($UserID -eq "UserID" -or $UserID -eq ""))
        {
            Update-Display "Get - $UserID Home Path" -Color 'Yellow'
            if ($UserID -and (-not($toolstripstatuslabel1.Text -match 'Local')))
            {
                Try
                {
                    $searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
                    $searcher.Filter = "(&(objectClass=User)(samAccountName=$UserID))" 
                    $result = $searcher.FindOne() 
    
                    $HomeDirectory = $result.GetDirectoryEntry().HomeDirectory
                }
                catch
                {
                    $HomeDirectory = "Error accessing AD"            
                }
                
                Update-Display $HomeDirectory
    
                if (-not($HomeDirectory))
                {
                    Update-Display "Error - No HomeDirectory Path Set in AD" -color "Red"
                }
                else
                {
                    if (-not($HomeDirectory -match "Error"))
                    {
                        explorer.exe "$HomeDirectory"
                    }    
                }
            }
            else
            {
                Update-Display "Not On Domain" -color "Red"
            }
        }
    }
    
    $buttonProfile_Click={
        
        $UserID = $labelUserID.Text
        if  (-not($UserID -eq "UserID" -or $UserID -eq ""))
        {
            Update-Display "Get - $UserID Profile Path" -Color 'Yellow'
            if ($UserID -and (-not($toolstripstatuslabel1.Text -match 'Local')))
            {
                Try
                {
                    $searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
                    $searcher.Filter = "(&(objectClass=User)(samAccountName=$UserID))" 
                    $result = $searcher.FindOne() 
    
                    $ProfilePath = $result.GetDirectoryEntry().ProfilePath
                }
                catch
                {
                    $ProfilePath = "Error accessing AD"            
                }
                
                Update-Display $ProfilePath
    
                if (-not($ProfilePath))
                {
                    Update-Display "Error - No Profile Path Set in AD" -color "Red"
                }
                else
                {
                    if (-not($ProfilePath -match "Error"))
                    {
                        explorer.exe "$ProfilePath"
                    }    
                }
            }
            else
            {
                Update-Display "Not On Domain" -color "Red"
            }
        }
    }
    
    
    
    
    
    
    $buttonLogOff_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
            {
                $Answer = [Windows.Forms.MessageBox]::Show("Log-Off $computer ?", "TSTool $TSToolVersion","YesNo","Question")
                if( $Answer -eq "Yes" )
                {
                    Update-Display "LogOff $computer" -Color 'Yellow'
                    try
                    {
                        $return = (Get-WmiObject win32_operatingsystem -ComputerName $Computer -ErrorAction 'stop').Win32Shutdown(4).ReturnValue
                        if ($return -eq 0)
                        {
                            Update-Display "$computer accepted Forced Log-Off command"
                        }
                    }
                    catch
                    {
                        Update-Display $_.Exception.Message    -color "Red"
                        $buttonStartJob_Click.invoke()
                    }        
                }
            }
            else
            {
                $buttonStartJob_Click.invoke()
            }
        }
        
    }
    
    $buttonReboot_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
            {
                $Answer = [Windows.Forms.MessageBox]::Show("Reboot $computer ?", "TSTool $TSToolVersion","YesNo","Question")
                if( $Answer -eq "Yes" )
                {
                    Update-Display "Reboot $computer" -Color 'Yellow'
                    try
                    {
                        $return = (Get-WmiObject win32_operatingsystem -ComputerName $Computer -ErrorAction 'stop').Win32Shutdown(6).ReturnValue
                        if ($return -eq 0)
                        {
                            Update-Display "$computer accepted forced reboot command"
                        }
                    }
                    catch
                    {
                        Update-Display $_.Exception.Message    -color "Red"    
                        $buttonStartJob_Click.invoke()
                    }        
                }
            }
            else
            {
                $buttonStartJob_Click.invoke()
            }
        }
    }
    
    $buttonShutDown_Click={
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
        {
            if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
            {
                $Answer = [Windows.Forms.MessageBox]::Show("Shutdown $Computer ?", "TSTool $TSToolVersion","YesNo","Question")
                if( $Answer -eq "Yes" )
                {
                    Update-Display "ShutDown $computer" -Color 'Yellow'
                    try
                    {
                        $return = (Get-WmiObject win32_operatingsystem -ComputerName $Computer -ErrorAction 'stop').Win32Shutdown(5).ReturnValue
                        if ($return -eq 0)
                        {
                            Update-Display "$computer accepted forced shutdown command"
                        }
                    }
                    catch
                    {
                        Update-Display $_.Exception.Message    -color "Red"    
                        $buttonStartJob_Click.invoke()
                    }
                }
            }
            else
            {
                $buttonStartJob_Click.invoke()
            }
        }    
    }
    
    $buttonWakeUp_Click={
           
        $Computer = $labelBarcode.text.Trim()
        
        Update-Display "Send Wakeup packet to $computer" -Color 'Yellow'    
        
        if ( -not($computer -as [ipaddress]) )
        {
            if ($picturebox2.BackColor.Name -eq 'LimeGreen')
            {
                Update-Display "Computer $computer Already On"                        
            }
            elseif ($picturebox2.BackColor.Name -eq 'Blue')
            {
                Update-Display "Computer $computer Already On - however there is a connectivity issue"        
            }
            elseif ($picturebox2.BackColor.Name -eq 'DarkGray')
            {
                Update-Display "Connect to computer first then click on wakeup again if neccesary"     
            }
            else
            {
                $ButtonJob = "Send-WOL -computer $computer -NameSpace $SCCMNameSpace -SiteServer $SCCMSiteServer -max 1"
                $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $profileServer; 'JobBlurb' = "Send Wakeup packet to $computer"; 'userID' = $UserID ; }
                $RemoteJobButtons2.invoke()
            }
        }
        else
        {
            Update-Display "Supply computer name - Cannot wake up a computer using an IP" -color "Red"    
        }
    }
    
    
    
    $SCCM_2007_SW3_Click={
            
        $Computer = $labelBarcode.text.Trim()
        if ($Computer -ne "")
        {
            Update-Display "SCCM Report - 'Add Remove Programs' $computer" -color Yellow
            
            $SCCMServer = Get-SCCMResourceID -Computer $Computer -SiteServer1 $SCCMSiteServer -NameSpace1 $SCCMNameSpace 
    
            if ($SCCMServer.ResourceID)
            {
                Update-Display (Get-SCCMSoftwareInstalled -NameSpace $SCCMServer.NameSpace -SiteServer $SCCMServer.SiteServer -ResourceID $SCCMServer.ResourceID | Select-Object DisplayName, Version, InstallDate | sort DisplayName -Unique | ft * -AutoSize )
            }
            else
            {
                Update-Display "Computer $computer not found in SCCM" -color "Red"
            }
        }
    }
    
    
    #endregion
    
    
    
    
    
    
    
    
    #region form function controls
    
    $ShowHelp={
        #display popup help
        Switch ($this.name) {        
            "buttonProfileSvr" {$tip="Find user's active computer(s) based on open connection to profile server"}
            "buttonSCCMU2M" {$tip="Find user's primary computer based on SCCM 2012 report"}
            "buttonWakeUp" {$tip="SCCM 2012 WOL over subnet"}
            "SCCM_2007_SW2" {$tip="SCCM 2007 HTML Report - All advertisements for a specific computer"}
            "SCCM_2007_SW3" {$tip="SCCM Report - All software in 'Add Remove Programs'"}
            "buttonEmail" {$tip=$email}
            "buttonSCCM" {$tip="Launch SCCM 2012 Console"}
            "buttonAPPV_Click" {$tip="List App-V Applications Installed"}
            default {$tip="No help found for $($this.name)"}
        }
        $tooltip1.SetToolTip($this,$tip)
    } #end ShowHelp
    
    $NotImplemented={
        $Answer = [Windows.Forms.MessageBox]::Show("Sorry Not Implemented Yet", "TSTool $TSToolVersion","OK","Exclamation")
    }
    
    $richtextbox1_LinkClicked=[System.Windows.Forms.LinkClickedEventHandler]{
    #Event Argument: $_ = [System.Windows.Forms.LinkClickedEventArgs]
        ii $_.linktext
    }
    
    $buttonDisconnect_Click={
        
        $Computer = $labelBarcode.text.Trim()
        
        Update-Display "Disconnecting $Computer" -color "yellow"    
        Update-Display "Cancelling remote job threads"     
        Update-Display "Stopping refresh timer" 
        
        Stop-JobTracker    
        
        $buttonDisconnect.Enabled = $false    
        $buttonStartJob.Enabled = $true    
        $buttonHistory.Enabled = $true
        $timer1.Enabled = $false
        $picturebox2.BackColor = 'DarkGray'
        
        #Enable remote job type Buttons
        $buttonProcesses.Enabled = $true
        $buttonGPUpdate.Enabled = $true
        $buttonIPConfig.Enabled = $true
        $InstalledMSI.Enabled = $true
        $AddRemovePrograms.Enabled = $true
    
        $formTSTool3.Cursor = 'Default'    
        
        # greyout image
        $ms = New-Object -ComObject System.IO.MemoryStream
        $ms.Write($CurrentImageSet, 0, $CurrentImageSet.Length)
        Add-Type -AssemblyName System.Drawing
        $image = [System.Drawing.Image]::FromStream($ms)
                        
        $pictureBox3.Image = ConvertToGrayScale($image)
    }
    
    $toolstripstatuslabel1_Click={
        $toolstripstatuslabel1.Text = $Domain    
    }
    
    $addQLDPhoneFilterToolStripMenuItem_Click={
        if ([int](Get-RegKey -Key UseQLDFilter))
        {
            $addQLDPhoneFilterToolStripMenuItem.Image = $Cross    
            Get-RegKey -Key UseQLDFilter -Value 0 -Set  
        }
        else
        {
            $addQLDPhoneFilterToolStripMenuItem.Image = $tick
            Get-RegKey -Key UseQLDFilter -Value 1 -Set  
        }
        
    }
    
    
    $aboutToolStripMenuItem_Click={
        [System.Windows.Forms.MessageBox]::Show("TSTool3`n`nMatthew Painter`nTechnical Services Team`n@painter1024","TSTool $TSToolVersion");
    }
    
    $licenceToolStripMenuItem_Click={
        [System.Windows.Forms.MessageBox]::Show("TSTool3 is subject to Microsoft Public License (Ms-PL)`n`nhttp://www.microsoft.com/en-us/openness/licenses.aspx","TSTool $TSToolVersion"); 
        ii "$ParentDirectory\licence.txt"    
    }
    
    $picturebox1_Click={
        $aboutToolStripMenuItem_Click.invoke()
    }
    
    $exitToolStripMenuItem1_Click={
        $formTSTool3.Close()    
    }
    
    $buttonClear_Click={
        cls    
        $richtextbox1.Text = ""
    }
    
    $buttonCopy_Click={
        
        
    $RichTextBox1.SetFocus
         $richtextbox1.SelectAll() 
         $richtextbox1.copy()
        $richtextbox1.DeselectAll()
        
    }
    
    $buttonClose_Click={
        $formTSTool3.Close()
    }
    
    $timer1_Tick={
        $StartJob0_Connectivity.invoke()
    }
    
    $timerJobTracker_Tick={
        Update-JobTracker
    }
    
    #endregion
    
    #region History
    
    $buttonHistory_Click={
        
        Update-Display "TSTool Connection History" -color "Yellow"
        
        $History = Import-Csv -Path "$env:temp\history.csv"     
        Update-Display ($History | select date, computer, user | ft -auto)     
    }
    
    
    $clearHistoryToolStripMenuItem_Click={
    
        $Answer = [Windows.Forms.MessageBox]::Show("Delete History File", "TSTool $TSToolVersion","YesNo","Question")
        if( $Answer -eq "Yes" -and (Test-Path "$env:temp\history.csv"))
        {
            Update-Display "Delete History File" -color 'Yellow'
            Remove-Item "$env:temp\history.csv"
            $History = New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u); "Computer"= $env:COMPUTERNAME; "User"= $env:USERNAME}
            $History | Export-csv -Path "$env:temp\history.csv"    -NoTypeInformation
            
            $ComputerHistory = $History | Where-Object {$_} | select -ExpandProperty computer
            if ($ComputerHistory.count -ne $null -and $STA)
            {
               $textbox1.AutoCompleteCustomSource.AddRange($ComputerHistory)
            }
        }
    }
    
    $setHistoryLimitToolStripMenuItem_Click={
        
        [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
        $HistoryCountOriginal = Get-RegKey -Key Count -Value Count
         [int]$HistoryCount = [Microsoft.VisualBasic.Interaction]::InputBox("Enter maximum number of computers to store in TSTool3 connection history`n`n Valid values are between 1 and 99", "TSTool $TSToolVersion", $HistoryCountOriginal) 
        try
        {
            if($HistoryCount -and ($HistoryCount -is [int]) -and $HistoryCount -le 99 -and $HistoryCount -gt 1)
            {
                 Get-RegKey -Key Count -Value $HistoryCount -Set 
            }
        }
        catch
        {}
    }
    
    
    
    $checkForUpdatesToolStripMenuItem_Click={
        
        function Check-TSTool3Upgrade
        {
            param(
                $URL, 
                [string]$start = ">Ver 3.",
                [string]$end = "</span>",
                [single]$currentVer       
            )
                    
            # Example string to parse from page
            # <span style="color:#ff0000">Ver 3.0.15</span>
            
            try
            {            
                $URL = "$URL/description"
                $error = $false
               
                [net.httpWebRequest]$request = [net.webRequest]::create($URL)                  
                $request.Proxy = [System.Net.WebRequest]::DefaultWebProxy
                $request.Proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials                  
                [net.httpWebResponse]$response = $request.getResponse()
                $responseStream = $response.getResponseStream()
                $sr = new-object IO.StreamReader($responseStream)
                $InputPage = $sr.ReadToEnd()  
                
    
                $RegEx = "(?<=$start).*?(?=$end)"
                $latestVer = $InputPage | Select-String -Pattern $RegEx -AllMatches | 
                Select-Object -ExpandProperty Matches | % {$_.value} | select -first 1
            }
            catch
            {
                $error = $true    
            }
            
            New-Object -TypeName psobject -Property @{
                Latest = $latestVer
                current = $currentVer
                UpgradeRequired = ($latestVer -gt $currentVer)
                URL = $URL
                startStr = $start
                endStr = $end
                error = $error
            }
        } 
    
        $URL = "http://gallery.technet.microsoft.com/scriptcenter/TSTool3-8bb4dc72"    
        $TSTool3Upgrade = Check-TSTool3Upgrade -URL $URL -currentVer ($TSToolVersion.replace("3.", ""))
            
        if( $TSTool3Upgrade.UpgradeRequired -and (!($TSTool3Upgrade.error)) )
        {
            $Answer = [Windows.Forms.MessageBox]::Show("There is an new version available for download. `n`nDo you want to review TSTool 3.$($TSTool3Upgrade.latest)?", "TSTool $TSToolVersion","YesNo","Question")
            if( $Answer -eq "Yes")
            {
                Start-Process -FilePath $URL
            }
        }
        else
        {
            if ($TSTool3Upgrade.error)
            {
                $Answer = [Windows.Forms.MessageBox]::Show("Newer version not found", "TSTool $TSToolVersion","OK","Exclamation")
            }
            else
            {
                $Answer = [Windows.Forms.MessageBox]::Show("You seem to have the latest version", "TSTool $TSToolVersion","OK","Exclamation")
            }
        }
    }
    
    
    
    #endregion 
    
    #region Job Tracker
    $JobTrackerList = New-Object System.Collections.ArrayList
    function Add-JobTracker
    {
        <#
            .SYNOPSIS
                Add a new job to the JobTracker and starts the timer.
        
            .DESCRIPTION
                Add a new job to the JobTracker and starts the timer.
        
            .PARAMETER  Name
                The name to assign to the Job
        
            .PARAMETER  JobScript
                The script block that the Job will be performing. 
                Important: Do not access form controls from this script block.
        
            .PARAMETER ArgumentList
                The arguments to pass to the job
        
            .PARAMETER  CompleteScript
                The script block that will be called when the job is complete.
                The job is passed as an argument. The Job argument is null when the job fails.
        
            .PARAMETER  UpdateScript
                The script block that will be called each time the timer ticks. 
                The job is passed as an argument. Use this to get the Job's progress.
        
            .EXAMPLE
                Job-Begin -Name "JobName" `
                -JobScript {    
                    Param($Argument1)#Pass any arguments using the ArgumentList parameter
                    #Important: Do not access form controls from this script block.
                    Get-WmiObject Win32_Process -Namespace "root\CIMV2"
                }`
                -CompletedScript {
                    Param($Job)        
                    $results = Receive-Job -Job $Job        
                }`
                -UpdateScript {
                    Param($Job)
                    #$results = Receive-Job -Job $Job -Keep
                }
        
            .LINK
                
        #>
        
        Param(
        [ValidateNotNull()]
        [Parameter(Mandatory=$true)]
        [string]$Name, 
        [ValidateNotNull()]
        [Parameter(Mandatory=$true)]
        [ScriptBlock]$JobScript,
        $ArgumentList = $null,
        [ScriptBlock]$CompletedScript,
        [ScriptBlock]$UpdateScript)
        
        #Start the Job
        $job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
        
        if($job -ne $null)
        {
            #Create a Custom Object to keep track of the Job & Script Blocks
            $members = @{    "Job" = $Job;
                            "CompleteScript" = $CompletedScript;
                            "UpdateScript" = $UpdateScript}
            
            $psObject = New-Object System.Management.Automation.PSObject -Property $members
            
            [void]$JobTrackerList.Add($psObject)    
            
            #Start the Timer
            if(-not $timerJobTracker.Enabled)
            {
                $timerJobTracker.Start()
            }
        }
        elseif($CompletedScript -ne $null)
        {
            #Failed
            Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
        }
    
    }
    
    function Update-JobTracker
    {
        <#
            .SYNOPSIS
                Checks the status of each job on the list.
        #>
        
        #Poll the jobs for status updates
        $timerJobTracker.Stop() #Freeze the Timer
        
        for($index =0; $index -lt $JobTrackerList.Count; $index++)
        {
            $psObject = $JobTrackerList[$index]
            
            if($psObject -ne $null) 
            {
                if($psObject.Job -ne $null)
                {
                    if($psObject.Job.State -ne "Running")
                    {                
                        #Call the Complete Script Block
                        if($psObject.CompleteScript -ne $null)
                        {
                            #$results = Receive-Job -Job $psObject.Job
                            Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
                        }
                        
                        $JobTrackerList.RemoveAt($index)
                        Remove-Job -Job $psObject.Job
                        $index-- #Step back so we don't skip a job
                    }
                    elseif($psObject.UpdateScript -ne $null)
                    {
                        #Call the Update Script Block
                        Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
                    }
                }
            }
            else
            {
                $JobTrackerList.RemoveAt($index)
                $index-- #Step back so we don't skip a job
            }
        }
        
        if($JobTrackerList.Count -gt 0)
        {
            $timerJobTracker.Start()#Resume the timer    
        }    
    }
    
    function Stop-JobTracker
    {
        <#
            .SYNOPSIS
                Stops and removes all Jobs from the list.
        #>
        #Stop the timer
        $timerJobTracker.Stop()
        
        #Remove all the jobs
        while($JobTrackerList.Count -gt 0)
        {
            $job = $JobTrackerList[0].Job
            $JobTrackerList.RemoveAt(0)
            Stop-Job $job
            Remove-Job $job
        }
    }
    #endregion
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    $setProfileServerToolStripMenuItem_Click={
        
        [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
        
        $profileServerTemp = Get-RegKey -Key profileServer
        do
        {         
            $profileServer = [Microsoft.VisualBasic.Interaction]::InputBox("Enter name of profile server", "TSTool $TSToolVersion", $profileServerTemp)
    
            if ($profileServer -eq "" -or $profileServer -eq $null)
            {
                $profileServer = $profileServerTemp            
            }
    
        } until ($profileServer -ne "")
    
        Get-RegKey -Key profileServer -Value $profileServer -Set 
    }
    
    
    $buttonSCCMU2M_Click={
        
        Update-Display "SCCM 2012 - User 2 Machine" -color Yellow
        
        Function Get-SCCMComputer
        {
            param($NameSpace, $SCCMServer)
            
            if (Test-Connection -ComputerName $SCCMServer -Count 1 -Quiet)
            {
                [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null    
                $user = [Microsoft.VisualBasic.Interaction]::InputBox("Enter UserID to query in SCCM 2012", "TSTool $TSToolVersion", $env:username)
                    
                $DomainUser = "$env:userdomain\\$user"
                $Query = "select * from SMS_UserMachineRelationship where UniqueUserName=`'$DomainUser`'"
                    
                try
                {
                    $WMIQuery = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SCCMServer -ErrorAction 'stop'
                }
                catch{}
                    
                try
                {
                    $WMIQuery | 
                    % { 
                        $Hash = @{ 
                            User = $User
                            Computer = $_.ResourceName 
                            CreationTime = $_.CreationTime
                            IsActive = $_.IsActive
                            SiteServer = $SiteServer 
                        } 
    
                        New-Object -TypeName PSObject -Property $Hash -ErrorAction 'stop' | 
                        Select-Object User, Computer, IsActive, CreationTime, SiteServer
                    }        
                }
                catch
                {
                    Update-Display "SCCM 2012 Server Query Failed" -color red    
                }
                    
            }
            else
            {
                Update-Display "Check SCCM 2012 server name set in GlobalSettings.csv file" -color red        
            }
        }
        
        Update-Display (Get-SCCMComputer -NameSpace $SCCMNameSpace -SCCMServer $SCCMSiteServer | sort creationtime | ft user, computer, creationTime -AutoSize)
        
    }
    
    $editSoftwareFilterToolStripMenuItem_Click={
        
        Update-Display "Launch Software Filter Editor" -color Yellow
        
        # This makes the SoftwareReport script modal. (alt code)
        # powershell -file "$ParentDirectory\Get-SoftwareReport.ps1"
            
        $arg = "-executionpolicy bypass -windowstyle hidden -sta -file `"$ParentDirectory\Get-SoftwareReport.ps1`""
        Start-Process "$psHome\powershell.exe" -ArgumentList $arg -ErrorAction 'stop'
    }
    
    $buttonSCCM_Click={
        
        Update-Display "Launch SCCM 2012 Console" -color Yellow
        
        $progFiles = if (${Env:ProgramFiles(x86)})
        {
            ${Env:ProgramFiles(x86)}
        }
        else
        {
            $env:programfiles
        }
        
        $configMnger = "$progFiles\Microsoft Configuration Manager\AdminConsole\bin\Microsoft.ConfigurationManagement.exe"    
        if (Test-Path $configMnger)
        {
            start-process -FilePath $configMnger
        }
        else
        {
            Update-Display "Cant Find: $configMnger" -color red    
        }
    }
    
    $buttonAPPV_Click={
        
        Update-Display "List App-V applications installed $Computer" -color Yellow
        
        if ($picturebox2.BackColor.Name -eq 'LimeGreen')
        {
            $Computer = $labelBarcode.text.Trim()
        
            try
            {
                $appv = gwmi -computer $Computer -Namespace root\microsoft\appvirt\client -class application -ErrorAction 'stop'
                Update-Display ($appv | sort name | ft Name, Version, PackageGUID -AutoSize)
            }
            catch
            {
                Update-Display "Error accessing $computer App-V WMI namespace" -color red    
            }
        }    
    }
    
    
    
    
    $FilteredSCCM_Click={
    
        $Computer = $labelBarcode.text.Trim()
        if ($Computer -ne "")
        {
            Update-Display "SCCM Report - 'Add Remove Programs (Filtered)' $computer" -color Yellow    
                
            $SCCMApps = $null
            
            $SCCMServer = Get-SCCMResourceID -Computer $Computer -SiteServer1 $SCCMSiteServer -NameSpace1 $SCCMNameSpace 
            
            if ($SCCMServer.ResourceID)
            {
                $SCCMApps = Get-SCCMSoftwareInstalled -NameSpace $SCCMServer.NameSpace -SiteServer $SCCMServer.SiteServer -ResourceID $SCCMServer.ResourceID | sort AppIndex -Unique 
            }
            else
            {
                Update-Display "Computer $computer not found in SCCM" -color "Red"
            }
            
            if (Test-Path $filterFile)
            {
                $filterList = @{}
                Get-Content $filterFile | %{ $filterList.Add($_, ($_ -split '  -  ')[1]) }    
                
                if ($SCCMApps)
                {
                    Update-Display (($SCCMApps | %{if ( ($_.AppIndex) -and -not ($filterList.ContainsKey($_.AppIndex)) ){$_} } ) | ft Displayname, Version -AutoSize)
                }
            }    
            else
            {
                Update-Display "Cant Find SW Filter" -color "Red"    
            }
        }
    }
    
    $FilteredLive_Click={
        
        $Computer = $labelBarcode.text.Trim()
        if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $label1.Text -ne "")
        {
            $Computer = $labelBarcode.text.Trim()
            
            if (Test-Path $filterFile)
            {
                $filterList = @{}
                Get-Content $filterFile | %{ $filterList.Add($_, ($_ -split '  -  ')[1]) }
            
                
                $OS = Get-WMIObject -Class win32_operatingsystem
                $ThisOS = $OS.OSArchitecture
                
                $OS = Get-WMIObject -Class win32_operatingsystem -ComputerName $computer
                $RemoteOS = $OS.OSArchitecture
                
                if ($ThisOS -match "32" -and $RemoteOS -match "64" )
                {
                    $Warning =  "Warning - Cant read 64bit registry from this 32bit machine"         
                }
                else
                {
                    $Warning = $null
                }    
    
                $ButtonJob = "Get-AddRemovePrograms -Computer $Computer"
                $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Filtered Add Remove Programs (Live) - $computer"; 'Warning' = $Warning; }
                $RemoteJobButtons.invoke()
                
            }    
            else
            {
                Update-Display "Cant Find SW Filter" -color "Red"    
            }
        }
    }
    
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
    
    $Form_StateCorrection_Load=
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formTSTool3.WindowState = $InitialFormWindowState
    }
    
    $Form_Cleanup_FormClosed=
    {
        #Remove all event handlers from the controls
        try
        {
            $buttonCopy.remove_Click($buttonCopy_Click)
            $richtextbox1.remove_LinkClicked($richtextbox1_LinkClicked)
            $buttonClear.remove_Click($buttonClear_Click)
            $buttonHistory.remove_Click($buttonHistory_Click)
            $buttonDisconnect.remove_Click($buttonDisconnect_Click)
            $buttonStartJob.remove_Click($buttonStartJob_Click)
            $buttonClose.remove_Click($buttonClose_Click)
            $buttonLogOff.remove_Click($buttonLogOff_Click)
            $buttonMonitors.remove_Click($buttonMonitors_Click)
            $buttonIPConfig.remove_Click($buttonIPConfig_Click)
            $buttonRDP.remove_Click($buttonRDP_Click)
            $buttonOU.remove_Click($buttonOU_Click)
            $buttonProcesses.remove_Click($buttonProcesses_Click)
            $buttonC.remove_Click($buttonC_Click)
            $buttonWarranty.remove_Click($buttonWarranty_Click)
            $buttonWakeUp.remove_Click($buttonWakeUp_Click)
            $buttonWakeUp.remove_MouseHover($ShowHelp)
            $buttonShutDown.remove_Click($buttonShutDown_Click)
            $buttonReboot.remove_Click($buttonReboot_Click)
            $buttonGPUpdate.remove_Click($buttonGPUpdate_Click)
            $buttonAPPV.remove_Click($buttonAPPV_Click)
            $buttonAPPV.remove_MouseHover($ShowHelp)
            $FilteredSCCM.remove_Click($FilteredSCCM_Click)
            $buttonWin8Apps.remove_Click($buttonWin8Apps_Click)
            $InstalledMSI.remove_Click($InstalledMSI_Click)
            $AddRemovePrograms.remove_Click($AddRemovePrograms_Click)
            $FilteredLive.remove_Click($FilteredLive_Click)
            $SCCM_2007_SW3.remove_Click($SCCM_2007_SW3_Click)
            $SCCM_2007_SW3.remove_MouseHover($ShowHelp)
            $buttonSCCM.remove_Click($buttonSCCM_Click)
            $buttonSCCM.remove_MouseHover($ShowHelp)
            $buttonMSTSC.remove_Click($buttonMSTSC_Click)
            $buttonSysInfo.remove_Click($buttonSysInfo_Click)
            $buttonManage.remove_Click($buttonManage_Click)
            $buttonPowerShell.remove_Click($buttonPowerShell_Click)
            $buttonPSRemote.remove_Click($buttonPSRemote_Click)
            $buttonRegEdit.remove_Click($buttonRegEdit_Click)
            $buttonCMD.remove_Click($buttonCMD_Click)
            $buttonSCCMU2M.remove_Click($buttonSCCMU2M_Click)
            $buttonSCCMU2M.remove_MouseHover($ShowHelp)
            $buttonProfileSvr.remove_Click($buttonProfileSvr_Click)
            $buttonProfileSvr.remove_MouseHover($ShowHelp)
            $buttonHome.remove_Click($buttonHome_Click)
            $buttonProfile.remove_Click($buttonProfile_Click)
            $buttonMySite.remove_Click($buttonMySite_Click)
            $button1.remove_Click($button1_Click)
            $buttonEmail.remove_Click($buttonEmail_Click)
            $buttonEmail.remove_MouseHover($ShowHelp)
            $buttonRA.remove_Click($buttonRA_Click)
            $formTSTool3.remove_FormClosed($formMain_FormClosed)
            $formTSTool3.remove_Load($FormEvent_Load)
            $aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
            $timerJobTracker.remove_Tick($timerJobTracker_Tick)
            $timer1.remove_Tick($timer1_Tick)
            $toolstripstatuslabel1.remove_Click($toolstripstatuslabel1_Click)
            $exitToolStripMenuItem1.remove_Click($exitToolStripMenuItem1_Click)
            $licenceToolStripMenuItem.remove_Click($licenceToolStripMenuItem_Click)
            $addQLDPhoneFilterToolStripMenuItem.remove_Click($addQLDPhoneFilterToolStripMenuItem_Click)
            $clearHistoryToolStripMenuItem.remove_Click($clearHistoryToolStripMenuItem_Click)
            $setHistoryLimitToolStripMenuItem.remove_Click($setHistoryLimitToolStripMenuItem_Click)
            $checkForUpdatesToolStripMenuItem.remove_Click($checkForUpdatesToolStripMenuItem_Click)
            $setProfileServerToolStripMenuItem.remove_Click($setProfileServerToolStripMenuItem_Click)
            $editSoftwareFilterToolStripMenuItem.remove_Click($editSoftwareFilterToolStripMenuItem_Click)
            $formTSTool3.remove_Load($Form_StateCorrection_Load)
            $formTSTool3.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        { }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    #
    # formTSTool3
    #
    $formTSTool3.Controls.Add($buttonCopy)
    $formTSTool3.Controls.Add($richtextbox1)
    $formTSTool3.Controls.Add($buttonClear)
    $formTSTool3.Controls.Add($labelBarcode)
    $formTSTool3.Controls.Add($picturebox1)
    $formTSTool3.Controls.Add($buttonHistory)
    $formTSTool3.Controls.Add($labelLOCKED)
    $formTSTool3.Controls.Add($labelUserID)
    $formTSTool3.Controls.Add($labelLocation)
    $formTSTool3.Controls.Add($statusstrip1)
    $formTSTool3.Controls.Add($buttonDisconnect)
    $formTSTool3.Controls.Add($labelUserName)
    $formTSTool3.Controls.Add($buttonStartJob)
    $formTSTool3.Controls.Add($picturebox3)
    $formTSTool3.Controls.Add($buttonClose)
    $formTSTool3.Controls.Add($picturebox2)
    $formTSTool3.Controls.Add($textbox1)
    $formTSTool3.Controls.Add($tabcontrol1)
    $formTSTool3.Controls.Add($menustrip1)
    $formTSTool3.AcceptButton = $buttonStartJob
    $formTSTool3.ClientSize = '1100, 706'
    $formTSTool3.FormBorderStyle = 'Fixed3D'
    #region Binary Data
    $formTSTool3.Icon = [System.Convert]::FromBase64String('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
Mv9CPTz/SENC/0dDQv81Mjf/Kikt/2xqav9BUlb/rry+//Py8/9RVFT/HhYR/xgPD/8tICj/OC8z
/z0yM/86NDT/NC8u/zItLP8yLC3/ODQ2/ywqLP8+Pj7/M0BD/628vv/w8fL/TE9K/x4dF/9BOz3/
Pjc7/zYsLf86Liz/LSgm/yomJf8wKyr/Ny0v/ywmIv85OTP/LSos/yUyM/+tu77/6+vr/z4+PP85
My//RDw5/zcwKf87NS7/Miou/0pLT/+kpKT/v729/7i8vv+GiIb/NS0n/zQvLf8FFRf/s8HD/97f
3/9GRET/SEI8/0Q9NP9BOzP/NjIt/0xJS/+ztLX/9/j4//////9Jpbj/E4ml/zZgaf81Kyb/Bx4i
/7jGyP/e3t7/Pj06/0pFPf9HPzP/QDoy/zU0NP9MTEv/iYeH/8rGxf/18/P/0+fr/6/b5f8IjKj/
boyS/1FiZP+wvsD/9fX1/11cWP8zMif/Tko9/09HQv8xMjL/ICEe/0BdY/8wfY3/sLy//0mnu/9d
y+P/AIuw/6nV3/+Lmp3/qrm7///////j5OP/YWRd/ywvJP8/OTP/SkU+/y8vJf8lQEP/AJO0/1Kr
v/8CqMz/IrDQ/3PA0P/3+vr/aoSJ/628vv/9/f3///////v7+/+rran/ampk/1FNRv9XUEr/Qzs3
/y9ha/8TsNL/G6TD/9vq7f///////////2qEif92jpL/rry+/6q5u/+vvb//xdPX/7PBxf+AjpD/
QUpL/0tMTP9PPTj/dYaI/5KssP+zvL3/pbe6/627vv9KaW//AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAgAAAAQAAAAAEA
BAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAAAAAQEBAAwMDAABB4kACAgIgAGEBIAPj4+ABYeIAAODAw
AFBISADw8PAAgMDIABCo0ABAODgA6OjoACAoKAAIoMAAAAAA4ADu5EREREREREREROd4cATsgzEd
VVVVVVVVVVQHd4cO4MgzER2ZVVVVVVVUB3d3cOAMgzER3ZlVVVVVVAd3fEQEAMgzMREd3ZlVVVQO
REIk4MAMiDMxEREd2VVUAEIiR3AM7nyIMzMRER2ZVADi9HdEAM7ufIiDMzER3VTsBCJ3QkAMTu58
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
AQAWExUuKiw6Nzk5NTg/Ozo9ODc5NDM6NTQ7NjU+OTlDPT1GQkFIRURGQkcrKDEiIiVBQUFWVlaB
gH8NJyxZdXr7+/vw8PDZ2dkxNDQnJiUsKigdFhAfEw0JAAURDhU1LjQ/Nzs6MjQyKSszKis2MTA3
MjEwKyoyLSwyLS0vKikvKigwKywwKy0zLzI8OTshISMiIiRKSkpsa2oLIiZYdXv7+/vv7+/b29w7
Pz4gIR0rKCQfGxgFAwMmIy1DPUg8NDwzKzA5LS48LS9AMzM3MjE1MC80Ly4xLCsuKSgxLCsxLCst
JygxLCwsKCc6NzY/PjwcHBsrKytmZGQJHCFYdXv7+/vt7e3Y2Ng0OTYtLykrKSQUEAxAOjtLREw5
Mjc6Mjc4LzI1Kis5LCw8Ly01Ly4zLy44MzI4MzI5NTM7NjU5NDM7MjUzLS00Lyw0MStFRD83NDQS
ERNYV1cMHiJYdXv6+vrs7OzR0dEvNTAlKCAXFQ49ODdLRUY9NDQ4Ly89NDU0Kys2LCs6MC03LCkz
LSs4MS8xKykpJCMvKikxLCsvKikzKi0sJCQ0Lyo1Mig3NC5HQ0QSEBM6OTkSJilXdXv4+Pjp6enO
zs8hJSELDAY+OjVIQkBAOTc8MzE5MCw1LikxKiQ9NDE6MTA1LC4xLzIkJihBQUN5dnV3c3J6eHaE
goGMhoeHgoI7OjUnKCEyMSo/Ozo2MzMSEA8EGx9YdHr4+Pjo6OjMzcwcGhsuKChOSEVCOjREPDU7
NTA1MCg7Ny0+Oi86NjE6MzYtJS4yND13fIC+wcL19fX6+/v////////4+/v9//+/wMA7ODYvLCo3
Mi9CPTgXFRMBGh9YdXv39/fu7u6wr68cGxtIQkFLRkFCOzVCOjRCOzQ/ODE/OzE6Ny46NTI0LjBJ
Qkibm5vLysrm5uXt7e34+Pj39/d2q7YnfpIeeo5dn61qipE/ODYyLSo3My4hHh0AHyRYdXr39/fz
8/Oenp8iIiJMSEVMR0FGPzdIQThIQThDPDQ+OjM2My00MS5BP0Fyc3OdnZ2+vr7b29vw8PD3+Pn6
+/yBuMQAe5kAhKMAcI8EdY40cHxCPz02My84NTQFJy1YdXr39/f5+fmXmJgnJyVLR0NIQz1JQjlG
PzQ/Nyw8NSw9ODM3NDEzMjFERURlZWWJiYmtra7Mzc3j4+Ty8vL4+fn///90wNA0psFVus8EjKkA
dI48doJIRUM3MzEILjRYdXr5+fj///+RkZAnJyNOS0RDPzZGQTdEPTJDOy8+Ny5BPDg6ODg4OTk7
OjpPT09xcXGUk5K4tbTV09Li4+Py8vL8+/v+/fzw+Pr///9sxdkAhaYJcIeuvcHOzMwSOkFYdXr5
+fn///+dnpslJSBHQzxHQjhJQjhPSDtNRjZGQDVGQT9BPkEkJygoKSlFREVaWFhkb3JCcnyiq6zW
0tHs6OefxM1irb35+vvj9Pg2utYAnL4AcIuqytH///8WP0dYdXr9/f37+/vl5eVJSUU2NC1APzVE
QTZKRjpMRTpHPzhHQD5DPj8XGhkHEA0vNTNYUFAvY20AZ4AQan6Co6m+ys0HgJkAg6IpqcUgs9IA
q9EEo8UAdpG1z9T8/PwUPkVYdXv+/v77+/v////DxMM/QjsuMig+QjY/RDdCPTpLQ0BRSERNRkI6
ODQQGhMHGRJGQD4xdYMAiagAfpxUk6DVyMY3p78DocUApMoApMwApcoAh6lXprb5+fr///8WP0dY
dXr+/v7+/v77+/v////S0tFhY10oKyA6PTJAPzdDPjhPR0FNRkBRTUdJSkIhJx8XFxQ6W2EKnb0A
l7lBoLScu8IrttIArdUcttdWwtlFsch9vcvv9vf8/f7///8XQEZYdXv+/v7+/v7+/v77+/v////u
7u6NjolDRj0sMCY3OC1DQDZJQzpMRT1TTURZVUwxNTIXEw8rbnwGqs4AoccArdQCs9kBqs8ipsPw
9PX////////////8/Pz///8WP0dYdXv////+/v7+/v7+/v77+/v+/v7////a2tmVlpNgYFtCQzk0
Myk7NS5JQDlXTEZdXFtHSEYfGxc+fIgetNUAoMYAnMMAiaprtMT4+/z6/f37/f39/v79/f3///8X
QEdYdXv+/v7////////+/v7////9/f38/Pz////////v7/DExMOampeBf3xYU1BIQT5IRENaWVdL
SkovKCSElpl8yNhvusuTxtH29vb////+/v7+/v7////9/f3///8XQEcgR05YdXtYdXtYdXtYdXtY
dXtYdXtXdXpWc3lWc3hbeH5ng4ltiZBgfII5VVkuREc6Pz8+PTxbXFtJTEsyNzZ9f4B9fn53gYNZ
dXpXdXpYdXpYdXpYdXtXdXpYdXsKNT0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAgAAAAQAAAAAEAIAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAIDQz/EhgV/xQbGP8VHBn/CBYX/wIXG/8LIib/BBwi/wcaHv8H
GBr/CyYq/wwnLf8PKzD/EjI4/xQ4Pv8WPEL/Fj5F/xc/Rv8XQEf/Fz9G/xdAR/8XQEf/F0BH/xdA
R/8XQEf/F0BH/xdAR/8XQEf/F0BH/xdAR/8XQEf/BTE5/xchHf9FQjD/Vkoy/1ZNOf9LQjT/GxYR
/xcYGf8uNT//ISEo/0RCQf9aWFj/eHd2/5uZmf+9u7v/2tjX//Du7f///Pz/////////////////
//////////////////////////////////////////////////////////8YQUf/FR4b/0NBMP9N
RTH/SkEs/1RJOf9GPzX/EAsJ/yQjKP8kKDX/Gxsg/z0+Pf9RUVH/bW1t/42Njf+srKz/x8fH/9vb
3P/p6en/8fLy//f39//6+vr/+/v7//z8/P/8/Pz//P39//z9/f/9/f3//P39//39/f/7+/v//f39
/xY/Rv8VHhz/QUEy/0I7J/9COyf/T0Y0/08/MP8wLCj/BQ4T/y4pM/8dHy3/GRof/z8/Pv9SUlL/
bm5u/4yMjP+pqan/wcHB/9TU1P/i4uL/6+vr//Hx8f/29vb/+Pj4//r6+v/8/Pz//f39//7+/v/+
/v7///////39/f//////F0BH/xMcHP8+OC//PTou/0I9Lf9PPSn/QUQ5/w9WZP8ATmD/ChQZ/zQz
Pv8ZHCj/HBwh/z4+Pf9QUFD/aWlp/4SEhP+dnZ3/s7Oz/8XFxf/S0tL/3Nzc/+Pj4//p6en/7u7u
//Pz8//39/f/+vr6//z8/P/9/f3//Pz8//////8XP0f/BQsO/x8sMP8NX3D/JU9S/zVQSv8Kdov/
AHaT/xBda/8kKST/DQ4T/zg8Rv8XGCP/Gxsg/zs7Ov9KSkr/X19f/3Z2dv+MjIz/oKCg/6+vr/+8
vLz/xsbG/8/Pz//X19f/39/f/+jo6P/v7+//9fX1//r6+v/5+/v//////xdARv8IFRf/Exwd/wNi
dv8Aiqj/AIqn/wCMrP8VZnH/SkU3/0s7Lv8TEA3/FBIU/zw+RP8hISr/IiEl/zQ0M/9CQkL/U1NT
/2RkZP92dnb/hYWF/5KSkv+enp7/qqqq/7W1tf/CwsL/zs7O/9zc3P/n5+f/8PDw//X29v/+/v7/
Fj9H/wYXGv8eHBv/GCIh/wSKpv8AnsH/HmZv/0o7Jv9KPzD/NUA6/xo9Qf8HHR3/FhER/z89Q/8r
KjH/JyYq/y4uL/83Nzf/REVE/1BQUP9bW1z/ZmZm/3Fxcf9+fn7/ioqK/5qamv+rq6v/vr6+/9DQ
0P/h4eH/7Ozs//////8XPkb/Ji8w/0BCRP8bEBD/Dzg+/wKSsf8Pc4T/RUAx/005Kf8sT1H/AHKM
/wBnfv8BHiP/FxAR/0E+RP83NTv/LSww/yIiJP8oKCj/NDQ0/z09PP9GRkX/TExM/1VVVv9gYGD/
b29v/4KCgv+YmJj/sLCw/8nJyf/b29v//Pr5/xY9Rf9ba27/urq7/zg8Qv8VDw7/BkhU/xF0hv8m
VVj/GXCA/x5ue/8rVlj/GWBs/wJgdf8ICQv/FQ8S/zc2OP85ODn/ODMz/yUgIv8nJSf/JiUn/x0d
Iv8tLS//OTk4/0BAQf9NTU3/XFxc/3Jycv+Ojo7/q6ur/8XFxf/s6un/FjtC/05tcv/6+vv/kpSX
/yMoK/8SFhH/LCkc/wiGoP8Ak7T/AKDD/w+Jof8Ybn3/AHCK/xomLP8MAwL/FhQT/ykpIv8+NC7/
TERB/zIsLv8NDBD/AgMM/wIFFP8HDBv/ISEj/y4uLv8+Pj7/UlJS/2tra/+Kior/qKio/9XT0v8U
OD7/VnN4//z8/P/b29v/P0RG/yUqKf8SCgX/BXeP/w2Pqf8cc4H/A5m5/wCRs/8HZnv/Njg4/yIe
Hf8AAQD/EBQS/x0VEP8lHRr/Lign/yUiJf8mJSj/Hx4o/xgaJf8hICH/JSQk/yIiJf84ODf/Tk5N
/2pqav+JiYn/uri3/xIyOP9XdXr/9/f3//r6+v92enn/ISUq/yMcIf8KHyX/A4up/wKWtf8eZnH/
JEpO/yU0NP8aFBL/BQUH/wwOE/8aHiX/Mi8v/0M+Pf9JREP/T0pJ/1RPTf9YU1H/WFNQ/01LSf8+
PDz/LSoy/yQiKf87Ojr/T09Q/2xsbP+dm5r/EC0y/1h1e//5+fn/+fn5/5qbm/8eISP/MzM1/x8U
E/8RJCX/Fl1p/xw4QP8UBQL/CAEA/xYTFf8uKiz/Ojc5/zk1OP8/Ozr/PTg3/zk0M/86NTT/OzY1
/z45Of9DPT3/RkJB/0hFRP9GQkf/Kygx/yIiJf9BQUH/VlZW/4GAf/8NJyz/WXV6//v7+//w8PD/
2dnZ/zE0NP8nJiX/LCoo/x0WEP8fEw3/CQAF/xEOFf81LjT/Pzc7/zoyNP8yKSv/Myor/zYxMP83
MjH/MCsq/zItLP8yLS3/Lyop/y8qKP8wKyz/MCst/zMvMv88OTv/ISEj/yIiJP9KSkr/bGtq/wsi
Jv9YdXv/+/v7/+/v7//b29z/Oz8+/yAhHf8rKCT/HxsY/wUDA/8mIy3/Qz1I/zw0PP8zKzD/OS0u
/zwtL/9AMzP/NzIx/zUwL/80Ly7/MSwr/y4pKP8xLCv/MSwr/y0nKP8xLCz/LCgn/zo3Nv8/Pjz/
HBwb/ysrK/9mZGT/CRwh/1h1e//7+/v/7e3t/9jY2P80OTb/LS8p/yspJP8UEAz/QDo7/0tETP85
Mjf/OjI3/zgvMv81Kiv/OSws/zwvLf81Ly7/My8u/zgzMv84MzL/OTUz/zs2Nf85NDP/OzI1/zMt
Lf80Lyz/NDEr/0VEP/83NDT/EhET/1hXV/8MHiL/WHV7//r6+v/s7Oz/0dHR/y81MP8lKCD/FxUO
/z04N/9LRUb/PTQ0/zgvL/89NDX/NCsr/zYsK/86MC3/Nywp/zMtK/84MS//MSsp/ykkI/8vKin/
MSwr/y8qKf8zKi3/LCQk/zQvKv81Mij/NzQu/0dDRP8SEBP/Ojk5/xImKf9XdXv/+Pj4/+np6f/O
zs//ISUh/wsMBv8+OjX/SEJA/0A5N/88MzH/OTAs/zUuKf8xKiT/PTQx/zoxMP81LC7/MS8y/yQm
KP9BQUP/eXZ1/3dzcv96eHb/hIKB/4yGh/+HgoL/Ozo1/ycoIf8yMSr/Pzs6/zYzM/8SEA//BBsf
/1h0ev/4+Pj/6Ojo/8zNzP8cGhv/Ligo/05IRf9COjT/RDw1/zs1MP81MCj/Ozct/z46L/86NjH/
OjM2/y0lLv8yND3/d3yA/77Bwv/19fX/+vv7////////////+Pv7//3///+/wMD/Ozg2/y8sKv83
Mi//Qj04/xcVE/8BGh//WHV7//f39//u7u7/sK+v/xwbG/9IQkH/S0ZB/0I7Nf9COjT/Qjs0/z84
Mf8/OzH/Ojcu/zo1Mv80LjD/SUJI/5ubm//Lysr/5ubl/+3t7f/4+Pj/9/f3/3artv8nfpL/HnqO
/12frf9qipH/Pzg2/zItKv83My7/IR4d/wAfJP9YdXr/9/f3//Pz8/+enp//IiIi/0xIRf9MR0H/
Rj83/0hBOP9IQTj/Qzw0/z46M/82My3/NDEu/0E/Qf9yc3P/nZ2d/76+vv/b29v/8PDw//f4+f/6
+/z/gbjE/wB7mf8AhKP/AHCP/wR1jv80cHz/Qj89/zYzL/84NTT/BSct/1h1ev/39/f/+fn5/5eY
mP8nJyX/S0dD/0hDPf9JQjn/Rj80/z83LP88NSz/PTgz/zc0Mf8zMjH/REVE/2VlZf+JiYn/ra2u
/8zNzf/j4+T/8vLy//j5+f//////dMDQ/zSmwf9Vus//BIyp/wB0jv88doL/SEVD/zczMf8ILjT/
WHV6//n5+P//////kZGQ/ycnI/9OS0T/Qz82/0ZBN/9EPTL/Qzsv/z43Lv9BPDj/Ojg4/zg5Of87
Ojr/T09P/3Fxcf+Uk5L/uLW0/9XT0v/i4+P/8vLy//z7+//+/fz/8Pj6//////9sxdn/AIWm/wlw
h/+uvcH/zszM/xI6Qf9YdXr/+fn5//////+dnpv/JSUg/0dDPP9HQjj/SUI4/09IO/9NRjb/RkA1
/0ZBP/9BPkH/JCco/ygpKf9FREX/WlhY/2Rvcv9Ccnz/oqus/9bS0f/s6Of/n8TN/2Ktvf/5+vv/
4/T4/za61v8AnL7/AHCL/6rK0f//////Fj9H/1h1ev/9/f3/+/v7/+Xl5f9JSUX/NjQt/0A/Nf9E
QTb/SkY6/0xFOv9HPzj/R0A+/0M+P/8XGhn/BxAN/y81M/9YUFD/L2Nt/wBngP8Qan7/gqOp/77K
zf8HgJn/AIOi/ympxf8gs9L/AKvR/wSjxf8AdpH/tc/U//z8/P8UPkX/WHV7//7+/v/7+/v/////
/8PEw/8/Qjv/LjIo/z5CNv8/RDf/Qj06/0tDQP9RSET/TUZC/zo4NP8QGhP/BxkS/0ZAPv8xdYP/
AImo/wB+nP9Uk6D/1cjG/zenv/8DocX/AKTK/wCkzP8Apcr/AIep/1emtv/5+fr//////xY/R/9Y
dXr//v7+//7+/v/7+/v//////9LS0f9hY13/KCsg/zo9Mv9APzf/Qz44/09HQf9NRkD/UU1H/0lK
Qv8hJx//FxcU/zpbYf8Knb3/AJe5/0GgtP+cu8L/K7bS/wCt1f8cttf/VsLZ/0WxyP99vcv/7/b3
//z9/v//////F0BG/1h1e//+/v7//v7+//7+/v/7+/v//////+7u7v+Njon/Q0Y9/ywwJv83OC3/
Q0A2/0lDOv9MRT3/U01E/1lVTP8xNTL/FxMP/ytufP8Gqs7/AKHH/wCt1P8Cs9n/AarP/yKmw//w
9PX//////////////////Pz8//////8WP0f/WHV7///////+/v7//v7+//7+/v/7+/v//v7+////
///a2tn/lZaT/2BgW/9CQzn/NDMp/zs1Lv9JQDn/V0xG/11cW/9HSEb/HxsX/z58iP8etNX/AKDG
/wCcw/8Aiar/a7TE//j7/P/6/f3/+/39//3+/v/9/f3//////xdAR/9YdXv//v7+////////////
/v7+///////9/f3//Pz8////////////7+/w/8TEw/+ampf/gX98/1hTUP9IQT7/SERD/1pZV/9L
Skr/Lygk/4SWmf98yNj/b7rL/5PG0f/29vb///////7+/v/+/v7///////39/f//////F0BH/yBH
Tv9YdXv/WHV7/1h1e/9YdXv/WHV7/1h1e/9XdXr/VnN5/1ZzeP9beH7/Z4OJ/22JkP9gfIL/OVVZ
/y5ER/86Pz//Pj08/1tcW/9JTEv/Mjc2/31/gP99fn7/d4GD/1l1ev9XdXr/WHV6/1h1ev9YdXv/
V3V6/1h1e/8KNT3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAMAAAAGAAAAABAAQAAAAAAAAGAAAAAAAAAAAA
AAAAAAAAAAAAEBAYAMDIyAAIeJgAgICAAEA4MAD4+PgAMDAwAAigyADw8PAAEDAwAFhweADo6OgA
OEhIAIjI2ABQUFAAoKCgAAAAAAAAAAAAAACZmZmZmZmZmZmZmZmZmQREREAAwGTOMzERu4VVVVVV
VVVVVVVVWQREREQAaQZM4zMREbiFVVVVVVVVVVVVWQRERERgDJBkzjMxERu4VVVVVVVVVVVVWQRE
RERGAGAGTOMzERG7uIVVVVVVVVVVWQREZERGwAwAZM4zPxERu7uIhVVVVVVVWQRERERMzADABkzj
MzERERu7uIhVVVVVWQBsxEwiLJCcAGTOozPxERERG7uIhVVVWQDCLMIiLGAMYAlszjMzPxERERG7
uIVVWQACIiIixEkAzACWTO4zMzPxERERu4hVWQkJIiIkREkABMAJZMzuozMzMxEREbuFWQkAx3JE
REzMAEyZmWRMzuozMzPxERu4WQyQAiLERMIiwAbGZglmTMzu6jMz8RG7iQHGACIkTEIiLABsaWAJ
lmRMzOozMxEbuQsckJLMIixMLAAJREYAAACWZMzqMzERuZuzaQBCInciIpAAAGzmAAAACWTO4zMR
GZWLTAACcidyIpAAAAZmAAAAAABkzjMxGZWLOUACcsJyLGYAAAAAZkaQCWkGTOMzEJVbEGkAJ3LM
xgAAAJTu7u7u7GaQZM4z8JVbvJYAAiLAAAAJZERERETMzOzJBs6jMJVYuglgAEkAAAZEZmRmZmRE
RMzGAEzjMJVYsQlmAAAABsZmBmZmZmZmZmZkYAzOMJVYsQmQAAAGzGZmZmZmZmmZmZYGyQDOMJVY
sZmQYADMZmZmZmZmZpZmaWaWRJAOoJVbsQmUAGzGZmZmZmZmZmZmZmZmbEAOoJVbEQlABuxmZGZm
ZmZmZmZGZmBmZMYAoJWLEQkAbERmZmZmZmZmZmZGZkZmZsQAMJWLEQAGxEZmZmZmZmZkRETO7sRm
ZmxgAJWLEQBsRERmZmZGZpacEbu7uLtJZmRAAJWLEQDMREZmZERkYJwRu4hVVViEZpZAAJWLEwbk
RERGRERmZjERuFVRMioxRmZmAJWLEwTsRERERGZGYzERuFVaIiIiPGaWAJWLGgzkRERERGZs4zER
uFVYIiIiIsRkmZWLswzERERmRGZs4z8RG4VVUiIiIi5EyZVYvAxERERGRGRkyjMRG7hVUdiHIirk
SZVYvJxEREREREZGzjMxEbuFVVVYciJVWZVYjJRERERETEwGTOM6ERu40VVddyIVWZVVgwRERORE
TEYATM6sIxGzItXXdyIVWZVVW0RERERETMkADM4iIqESIid3dyIVWZVVWPRERERMzMQAAM4iIiES
J3d3dyNVWZVVVVFERERE7s7JAA4iIqEdd3d3ciVVWZVVVVUalERETOTuQACidyMXd3d3fVVVWZVV
VVVbNEZERERE7pAKd3d3d31VVVVVWZVVVVVVgTRkRERO7uYAp3d3dy1VVVVVWZVVVVVVVYE+RERO
7u7AB3d3cihVVVVVWZVVVVVVVVVRE+xGTM6uABd3KhVVVVVVWZVVVVVVVVVVWLsT5EzO5gu7iFVV
VVVVWZmZmZmZmZmZmZmZzMROrkmZmZmZmZmZmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACgAAAAwAAAAYAAAAAEAGAAAAAAAgBwAAAAAAAAAAAAAAAAAAAAAAAAECgkO
ExEOFxUQFxYUHRoOFxYHFhcEGR0GHCAIISUFHiMDHSICGB0CFBgCFRcDICUDIigCHSMDISYDJCoD
KC4EKjEELDQELjUELzcELzcEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgE
MDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgJERE+QjRPRjJMQSxSSjZORjZBOy4lIhsEBAIeISM4
PkUUHCcyMjI8PDxKSkpaWlpubm6CgoKZmZmtra3BwcHS0tLg4ODr6+vz8/P4+Pj7+/v9/f3+/v7/
//////////////////////////////////////////////////////////////////////8EMDgJ
EhA5PTBGPShXTTdXTjhSSTZQRzhFPzUcGRMCAgIzNjsvNUAGCxowMDA7OztJSUlaWlptbW2CgoKY
mJitra3AwMDR0dHe3t7p6enx8fH29vb6+vr8/Pz9/f3+/v7/////////////////////////////
//////////////////////////////////8EMDgJERE7QDNQSDRLQy9LQi5JQCtPRTRTST43MCgT
Dw0LCg06O0QtMD4PER0wMDA7OztJSUlaWlptbW2BgYGXl5erq6u+vr7Ozs7b29vm5ubu7u7z8/P4
+Pj7+/v8/Pz9/f3+/v7///////////////////////////////////////////////////////8E
MDgIERE5PTJLRDJHQS5DPClORTJWTDlVSjtIPjM4LyoGAgMTERY1NT8hIi0JChYwMDA7OztJSUlZ
WVlsbGyBgYGVlZWpqam6urrKysrW1tbh4eHp6enu7u7z8/P29vb5+fn7+/v7+/v9/f39/f3+/v7+
/v7///////////////////////////////////8EMDgHEBE7PzREPy4+Oik7NiNFPitLQC1OQTJD
OCs0LioROUIEDRQeGiRAQE0dHisHBxMwMDA7OztJSUlZWVlqamp+fn6SkpKjo6O0tLTCwsLPz8/Z
2dnh4eHn5+fr6+vv7+/z8/P19fX39/f5+fn7+/v8/Pz9/f3+/v7+/v7/////////////////////
//8EMDgFDxA7PDREPjNBOy1EPi5JQjBLQC5QRDNBQzkNV2YAWGsCS1oIBgckJC8+P0wcHCgLDRgw
MDA6OjpISEhXV1doaGh5eXmLi4ucnJyrq6u5ubnExMTOzs7W1tbc3Nzi4uLl5eXq6urt7e3w8PDz
8/P29vb4+Pj7+/v8/Pz9/f3+/v7+/v7///////////8EMDgDDQ8kJyo6MjEfTFEmUFJHPi9JQS9A
VUwFboMAbYQAZHkAVmgYMDAHAwUsMDs4OkUbHigMDRkwMDA5OTlFRUVTU1NiYmJycnKCgoKSkpKg
oKCsrKy3t7fBwcHIyMjPz8/U1NTa2tre3t7j4+Pn5+fr6+vw8PDz8/P39/f6+vr7+/v9/f3+/v7+
/v7///8EMDgCDRAQGBsXR1IAZnwAboYtTEojXmIAf5oAfZgAd5AAa4IwS0pDNikVEhMEBQs7PkQy
ND4YGSMJChMuLi43NzdBQUFOTk5bW1tpaWl3d3eEhISSkpKdnZ2np6ewsLC4uLi+vr7ExMTKysrR
0dHW1tbd3d3j4+Pp6enu7u7z8/P39/f6+vr8/Pz9/f3+/v4EMDgBDA0TISQXHh8DcokAgJwAiqcA
jasAi6kAhaEEd448SUBRRjhLPzIpKCULDQ8HCApBQkc5OkEjIysbGyMsLCw0NDQ9PT1HR0dSUlJe
Xl5qamp2dnaBgYGLi4uUlJScnJyjo6Orq6uysrK6urrCwsLKysrS0tLb29vj4+Pq6urw8PD19fX5
+fn7+/v9/f0EMDgBDA0iLzISDAsYMzUAjasAlbUAl7cAkK8SdIVDQzNJQDBNQjRMQDMtKyMhIyAK
CwgKCww7Oj4+PUMnJi4fHiUpKSkwMDA4ODhAQEBJSUlSUlJcXFxlZWVubm52dnZ+fn6GhoaNjY2W
lpaenp6oqKiysrK8vLzHx8fS0tLc3Nzl5eXt7e3z8/P5+fn7+/sEMDgBDA4dKCssJycTDgsVUl0A
mLgAmLgIhJ5DPCxIQS9IQDBGPC4zQj4ZSlAMTFgNQEgIDAoNCQs8OT5APkMuLDQrKS8rKi4sLCwx
MTE4ODg/Pz9HR0dOTk5VVVVcXFxiYmJpaWlxcXF5eXmBgYGLi4uXl5eioqKwsLC9vb3Ly8vY2Njj
4+Pr6+vz8/P5+fkELzcBDhE8QUIvLS0dGx4TEhANcIQAkrEAiqcjX2VKQzNHPzFKQDQpUVQAbIMA
aX8AYXYFS1gEBQYRDQ85NjpHQ0k2MzkyMDYyMjYcHSEsLCwwMDA2NjY7OztAQEBGRkZLS0tRUVFX
V1deXl5mZmZvb296enqIiIiWlpampqa2trbGxsbU1NTh4eHr6+vz8/MELzcBCQrJyck+P0AxMjYT
ExQQGhgHd40AhKAAfZg7Rj1CQjc7U09LST8Zb30IdYoAc4wAZHoKPEcCAAAVEBM0MTQ/PUE3Njku
LS8wLS8hHiAaFxkpKSktLS0xMTE1NTU4ODg9PT1CQkJISEhOTk5XV1dhYWFubm58fHyNjY2fn5+y
srLCwsLS0tLg4ODr6+sELjUDIynn6erFxcU9QEUvMzcMEA4QKSkGdYwwTksgXmUAgZ0Ah6QEiaUk
XmRIPzEyTkwAcosAXnIWGRwFAAETDxAuLCw8Ozw9PDxGPz43MDAtJygmIiQpJysaGR0TEhgNDhYv
Ly8xMTE2NjY7OztCQkJLS0tXV1dlZWV1dXWIiIibm5uvr6/CwsLS0tLh4eEELDQELzfq7O3v7++C
hIkwNTkmKioOEAwbGxI/PjIAiqcAj64AlrYAnL4AnL0Ohp4pYWkAe5UAZHodKzAPCQkJBAQWExMk
IyEkJCA6MSxMRUBRS0k8NjclIiQWFRoQERkOERsIChkIDRwSFR0tLS0yMjI5OTlDQ0NQUFBfX19x
cXGFhYWampqvr6/CwsLT09MEKzIEMDj7+/vz8/Pn5+czOT45PkAgJCALDQQoJxoAkK8AmboZeosI
mbcApMcAnL0AkK8AfZgAZ30mNDorJSQVEQ4FAwEZGRIkJhwvIhw0KSI+MzA4MTAZFhgCAQcAAAcA
AAwAAhQBCR8LDx0YFxYeHh4jIyM0NDQ+Pj5LS0tcXFxwcHCFhYWampqxsbHExMQDKC8EMDj8/Pz2
9vbr6+t/goQjKCg4Oz0WFxcMCQkPZngAmrsTgZcpW18UgZUAmLkAjKoAepQOV2c5NDE4NTQbGhoD
BAQHCg0QFhcYEg8XEA0aExEnISA1MDA6Njc8OTs5NzsvLTElIyolJCgsKikyMDApKCoaGB8xMTE8
PDxKSkpcXFxwcHCGhoadnZ2zs7MDJiwEMDj9/f34+Pjt7e3e3t4bICAyNTkuLzQNCg8OERUDjKkA
mboAnL0RgZY0UE8dWmIhTlQ1NzIpJSIREA8CAwQAAQUJDRQSFx4sKChAOzpRTEtTTk1QS0pRTEtW
UU9cV1VfWlheWVZcWFZKSUc2NDM3NDgsKTMfGyUyMjI9PT1LS0teXl5zc3OKioqioqIDIykEMDj+
/v75+fnv7+/h4eFDSEglKCw1NjooJicUDw8TICIJepIAjKoAhaEgSU8rIx0fGBQQCwgGAwMEAgMU
ExQoKCs2Nzw5OD5EQD9EPz0/Ojk9ODdCPTxDPj1BPDtDPj1HQkFNSEdNSEdPTUxRT09EQUM9OUAt
KjQgHyk1NTVAQEBQUFBiYmJ5eXmRkZEDICUEMDj+/v76+vrw8PDj4+NdYF8gJSUpKiw2NDQmISEQ
DAobHxwfPDsmNzsfFxoOCAkDAAALBQcgGh02MjRBPD5APD44MzU1MTM6NTQ9ODc8NzY5NDM6NTQ7
NjU8NzY9ODc/OjlBPDs/OjlBPTxFQUBEQUNJRUw6Nj0jICccHCE6OjpGRkZWVlZpaWmBgYECHSIE
MDj////6+vrx8fHj4+PQ0NAYHRwnKSkyMTAxLSscGRUdGhQlIhscFxoIAwoFAQcdFhs3MDVEPEA8
NDc6MzYyKiwuJSczKi03MjE4MzI2MTAyLSwwKyozLi00Ly4zLi0xLCswKyozLi41MDEzLi80MDI1
MDQ+Oz4wLjEhICQVFhhAQEBMTExeXl5zc3MCGx8EMDj////6+vrx8fHj4+PQ0NAgJSQnKScpKCYq
JiMnIx8cGBQQDAkBAAIOChQwKjRJQUpDO0I2LzQ0Kiw0Kiw2Kiw8MDFANDU4MzI6NTQ4MzIzLi0z
Li0zLi0xLCsuKSgtKCctKCYtKCgtKCkuKSowKywrJyc3NDVGQ0QvLS4fHyAaGxtJSUlWVlZpaWkC
GB0EMDj+/v76+vrw8PDi4uLPz88nKysqLCooKCQiHxswLSkWEA4EAAAgHCJAO0dJQ005MTwzKzIy
KjE6MDNAMzU+LzFBMzNCNTM3MjE1MC81MC81MC80Ly4xLCsvKikxLCs2MTA2MTAzLi0vKCkzLS40
Ly8tKSg0MC9APjxDQT8rKikdHR0eHh5TU1NjY2MCFxsEMDj+/v75+fnv7+/h4eHNzc0fJSIsLyot
LSc7ODMbGRMNCAQ3Mi9PSFBIQUs7NDo3MDY+NTo8MjU4LC43Kyw4Kis9Ly87Liw5MzIzLi01MC87
NjU2MTA2MTA3MjE1MC83MjE3MjE2MDA6MDQzLS4yLCo3Mi8xLSk5NjFLS0U8OzknJSYODQ9VVVVi
YmICFhoEMDj+/v74+Pju7u7f39/Ly8sWHBgvMiw8PDUfHRcOCwc6NTRVUFBIQUQ9NTk3LzI/NzpA
ODo1LS41Kyw0Kio4LCxAMzE6Liw1Ly41MC81MC82MTA2MTA4MzI7NjU8NzY+OTg7NjU4MjI/Njk2
LzAsJSQ3Mi45Ni84NS5APThJRkU0MTIQDhAWFhZnZ2cCFhoEMDj9/f339/fs7Ozd3d3BwcEYHhkr
MCclJh4NCwU2Mi5OSEhCPD1DOzo/NjU3Ly46MjI8MzI0LCs4Li07MTA6MC46Ly0zKSYzLi02MC8z
Li0xLCsyLSs3MjE6NTQ7NjU9ODc7NjU5MzM/NjlBOTo7NDM3Miw1MikxLyYzMSpKR0U8OTsfHB8H
BgdwcHACGBsEMDj9/f329vbr6+vb29u/v78QFxEOEwoREgo4Ni5JREBEPj1CPDw8NDM+NDE7Mi85
MC05MC0yKSY2LSpANzQ9NDE7MjA2LSs0MC8zLi44NDM9OTk+Ojo+OjlCPTxBPDtIQ0JQTEpaU1RY
UFNHQUJAOzk5NS0xLyUzMykyMCc3NTJCP0E6NzkNDAwWFxYCGh4EMDj8/Pz19fXq6ura2tq9vb0J
CQkMBwcyLSxLRUNIQT5EOzdKQjxAOTU7NDE3MCo1MCg2MSc0MCQ3MilBOjc3MDIzKzEyKTMvMz0w
Nj8uNz4uOUDS0tLe3t7l5eXj4+Pm5uXo6Ojs7Ozw8PDu7u7r6+s7PTwtLy0yMS8yMCw6NTJFPjtE
PjkXFRMREhECHCEEMDj8/Pz19fXq6urZ2dm8vLwICAkeGRlOSEZLRkJEPThFPDZFPTU+NzI7NTA2
MCk6NSxBPDNCPjQ9OTI5NDBAOTs1LTMvJy8vLzY+QUbAwMDS0tLh4eHr6+vy8vL19fX4+Pj5+fn6
+vr6+vr4+Pj19fXx8fE8Pjw2NTM2MzAuKiY4MzBIQj0oJiQLCwsDHyUEMDj8/Pz19fXq6urZ2dmV
lZUHBwg2MTFRS0lHQj1BOzVEOzRCOjNBOTNBOjQ9Ni8/OjFDPjU9OS8/OzU1MC46NDU4MDY1LTWZ
mZmysrLIyMjb29vp6enz8/P5+fn7+/v9/f3O3uJ/r7kvgJIvgJI+h5d8qrO2y88+PDs2MjA1MS84
NDE4My00MjAODg4DIykEMDj8/Pz19fXq6urb29t5enoQEBBEQD9RTElOSURLRD9FPTZHPzhHPzhI
PzhFPDVBPDM7OC8zMSg3MS48ODY5MzU6Mzl+fn6ZmZmysrLKysrc3Nzr6+v09PT6+vr9/f3+/v5P
lKMAcooAeZMAfJYAeJIAcYkAZXtqnKdER0c7NjM0LywvKiUyMS8YGBgDJy0EMDj8/Pz29vbr6+vc
3NxkZGYbGxtGQUBRTUhJRD1JQjtGPzVJQjlLRDtJQjlEPTRCPDVAOzU7NzI1Mi00Mi9AP0FfX195
eXmUlJStra3ExMTY2Njn5+fy8vL4+Pj7+/v9/f3u9fYvlasAiKUAjasAjKoAhaEAeZMAbIMteYlN
UFA/PTw5NjA9PDouLi4DKTAEMDj9/f339/fu7u7h4eFra2skJSNGQkBJRUBKRT9LRDxIQTdJQzlC
OzE+Ni0+Ny5AOzNAOzY2MjA3NTIwLy5ERERYWFhwcHCJiYmioqK5ubnNzc3e3t7r6+vz8/P5+fn7
+/v9/f3u9vgPk68Ak7MAlrYAk7MAi6kAfZgAboUteYlSVlZAPj0/PTxHSEgELDMEMDj9/f35+fnx
8fHl5eVERUIlJiNPS0dIRD9HQjxJQztKQzpFPzRDOzBBOC07NCs9ODA+OTU0MDA7Ojk2NTY9PT1O
Tk5jY2N6enqSkpKpqam+vr7R0dHg4ODr6+vz8/P5+fn7+/v9/f3O6O1vwtTP7PLf8/c/scoAjq0A
f5oAbINclKBYVlVAPj1APj0ELjUEMDj+/v77+/v09PTr6+tOT0spKiZOTEZHRDxDPzZFQDZIQzdE
PjNGPjJFPjE+OC1COzZEPzw/PDwzNDQ7PT03NzdDQ0NVVVVpaWmAgICWlpasrKzBwcHS0tLg4ODr
6+vz8/P5+fn7+/v9/f3+/v7////////f8/cAm7wAjqwAepQAYnf7+/v7+/v6+voELzcEMDj+/v77
+/v39/fw8PBPUEwpKiZGQz5DQDhJRTxJRDpIQjdMRjlMRjdJQjRFPzRIQjxHQ0E+OzxCQkQjJicz
MzM8PDxJSUlaWlptbW2CgoJVd36tra3BwcHS0tLg4ODr6+vz8/Obxs+s09z9/f3+/v7///+f3esA
pMcAmLkAhaEAaoHO3uH9/f39/f0GMTkEMDj+/v79/f36+vr09PRvcG0mJyJCPjlCPjdGQThJQzlM
RjtTTEBUTD5QSTlJQTZIQj1IQkFAPD82NzgMEBIRFRQ6OjpDQ0NPT09fX19GaXAAW28cZXSDmZ3C
wsLS0tLh4eGTvMUAd5APiKKd0t3u+Pqf3OoPr9IAqs4An8EAiqgAb4e/1dr///////8EMDgEMDj/
///+/v77+/v4+Pjk5ORAQD06ODJCQTo6OS89PDBIRjpJRzlLRzpNRTpIQDhGPjpJQ0FJQ0QuLi0V
GhkQGBUIFA9DQ0NLS0tWVlYfa3oAboYAbIMAaX9Oh5O7wcK8ys0Ae5UAhaEAjq0Al7cAoMIAqs4A
r9QAq9AAn8EAiqgAb4ff6uz///////8EMDgEMDj////+/v79/f37+/v29vanqKY4OjU7PjU8QDY5
PTE/Qzc6QTE+PjdGPz5NRkNNREFNQ0BPRkNCPTkeIBsJEgwMHBUOIBlOTk5VVVUYdooAgp4AgJwA
fJcKe5OwuLnPz883oLcAlrYAnsAApMcAqMwArNEArdIApsoAmLkAhKB/tL////////////8EMDgE
MDj////////+/v79/f37+/v4+Piys7E2ODI2OTA7PzM5PTFDSDtEQzxEPTlHQDxVTEhWTUlMRUBQ
TEdNS0cpLScTHRUTHxgWHBpcXFwleYsAjq0AkbAAjqw8k6W1tbXIyMiIw88ApcgAq9AArdIArNEA
qs8ApskAm7wAjKovkKX///////////////8EMDgEMDj////////////+/v79/f37+/v4+PjLy8pn
amQvMSc3OzA7PzM/QTc+PTU/PDRHQTtPRkBQSEJLRT9SUElZWFE1OC8ZHhUdIB4gJCJSdHwAlbUA
m7wAm7wJmLeQrbSrwMQ1tM8Ar9QAsdcAr9Q+vdhPvtU/sck/p72PxdD///////////////////8E
MDgEMDj////////////////+/v79/f37+/v6+vrp6el6e3Y5OjI1OC4zNy05OzE/PzZBPjVIQjpL
RDxKRDxIQztMSD9cWU9QTkUmKCUPEhAYGxlBi5sAnb8AosUAo8YApsoArNEAsdcAs9kAr9UAp8t9
y9v+/v7///////////////////////////////8EMDgEMDj////////////////////+/v7+/v78
/Pz7+/v09PTGxsVwcWtCRj41Ny47PDJGRTtEQzlCPzVIQzpPSD9QSUBQSUBcVUxVWFYzNDIgIR8d
Hxw6ma0AocQAp8sArNEAsNYAsdcArNEApMcAlrZtuMn+/v7/////////////////////////////
//8EMDgEMDj////////////////////////////+/v79/f38/Pz7+/v29va7vLqNjYlWV1JDQzw+
PjQ/QDZGQDlJRD1UTEVZTUdZTUdbWVheXlxDREIeHx0fIB5nqrgAoMIAp8sAqs4Ap8sAoMIAk7MP
iaPr8vT+/v7///////////////////////////////8EMDgEMDj/////////////////////////
///////////+/v79/f38/Pz7+/v5+fnb29u+vr1/f3tVVk9LSkQ9ODQ7NDBHPThPR0NOS0pSUE9i
YmBRUE8mJyUjJCK2yMxQsMQAnL0AmLkAjq08nbHK3+P8/Pz+/v7/////////////////////////
//////8EMDgEMDj////////////////////////////////////////////+/v7+/v79/f37+/v7
+/v29vbq6urk5OPAvr2Fg4FYVVREPTtAPTtLSUhOTEtVUlJRUVA1NTQiJCHj4+Po6Oju7u7z8/P3
9/f7+/v9/f3+/v7///////////////////////////////8EMDgEMDgEMDgEMDgEMDgEMDgEMDgE
MDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgEMDgELzcELzcELzcELjYXPkUpSU46Rkg7
Pj0/Pz1RUlBgY2BVWFY7PjwELTQELTUELjYELjYELzcELzcEMDgEMDgEMDgEMDgEMDgEMDgEMDgE
MDgEMDgEMDgEMDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA
MAAAAGAAAAABACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAoJ/w4TEf8OFxX/EBcW/xQdGv8O
Fxb/BxYX/wQZHf8GHCD/CCEl/wUeI/8DHSL/Ahgd/wIUGP8CFRf/AyAl/wMiKP8CHSP/AyEm/wMk
Kv8DKC7/BCox/wQsNP8ELjX/BC83/wQvN/8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4
/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/
CRER/z5CNP9PRjL/TEEs/1JKNv9ORjb/QTsu/yUiG/8EBAL/HiEj/zg+Rf8UHCf/MjIy/zw8PP9K
Skr/Wlpa/25ubv+CgoL/mZmZ/62trf/BwcH/0tLS/+Dg4P/r6+v/8/Pz//j4+P/7+/v//f39//7+
/v//////////////////////////////////////////////////////////////////////////
//////////////////////8EMDj/CRIQ/zk9MP9GPSj/V003/1dOOP9SSTb/UEc4/0U/Nf8cGRP/
AgIC/zM2O/8vNUD/Bgsa/zAwMP87Ozv/SUlJ/1paWv9tbW3/goKC/5iYmP+tra3/wMDA/9HR0f/e
3t7/6enp//Hx8f/29vb/+vr6//z8/P/9/f3//v7+////////////////////////////////////
//////////////////////////////////////////////////8EMDj/CRER/ztAM/9QSDT/S0Mv
/0tCLv9JQCv/T0U0/1NJPv83MCj/Ew8N/wsKDf86O0T/LTA+/w8RHf8wMDD/Ozs7/0lJSf9aWlr/
bW1t/4GBgf+Xl5f/q6ur/76+vv/Ozs7/29vb/+bm5v/u7u7/8/Pz//j4+P/7+/v//Pz8//39/f/+
/v7/////////////////////////////////////////////////////////////////////////
//8EMDj/CBER/zk9Mv9LRDL/R0Eu/0M8Kf9ORTL/Vkw5/1VKO/9IPjP/OC8q/wYCA/8TERb/NTU/
/yEiLf8JChb/MDAw/zs7O/9JSUn/WVlZ/2xsbP+BgYH/lZWV/6mpqf+6urr/ysrK/9bW1v/h4eH/
6enp/+7u7v/z8/P/9vb2//n5+f/7+/v/+/v7//39/f/9/f3//v7+//7+/v//////////////////
//////////////////////////////8EMDj/BxAR/zs/NP9EPy7/Pjop/zs2I/9FPiv/S0At/05B
Mv9DOCv/NC4q/xE5Qv8EDRT/Hhok/0BATf8dHiv/BwcT/zAwMP87Ozv/SUlJ/1lZWf9qamr/fn5+
/5KSkv+jo6P/tLS0/8LCwv/Pz8//2dnZ/+Hh4f/n5+f/6+vr/+/v7//z8/P/9fX1//f39//5+fn/
+/v7//z8/P/9/f3//v7+//7+/v////////////////////////////////8EMDj/BQ8Q/zs8NP9E
PjP/QTst/0Q+Lv9JQjD/S0Au/1BEM/9BQzn/DVdm/wBYa/8CS1r/CAYH/yQkL/8+P0z/HBwo/wsN
GP8wMDD/Ojo6/0hISP9XV1f/aGho/3l5ef+Li4v/nJyc/6urq/+5ubn/xMTE/87Ozv/W1tb/3Nzc
/+Li4v/l5eX/6urq/+3t7f/w8PD/8/Pz//b29v/4+Pj/+/v7//z8/P/9/f3//v7+//7+/v//////
//////////8EMDj/Aw0P/yQnKv86MjH/H0xR/yZQUv9HPi//SUEv/0BVTP8FboP/AG2E/wBkef8A
Vmj/GDAw/wcDBf8sMDv/ODpF/xseKP8MDRn/MDAw/zk5Of9FRUX/U1NT/2JiYv9ycnL/goKC/5KS
kv+goKD/rKys/7e3t//BwcH/yMjI/8/Pz//U1NT/2tra/97e3v/j4+P/5+fn/+vr6//w8PD/8/Pz
//f39//6+vr/+/v7//39/f/+/v7//v7+//////8EMDj/Ag0Q/xAYG/8XR1L/AGZ8/wBuhv8tTEr/
I15i/wB/mv8AfZj/AHeQ/wBrgv8wS0r/QzYp/xUSE/8EBQv/Oz5E/zI0Pv8YGSP/CQoT/y4uLv83
Nzf/QUFB/05OTv9bW1v/aWlp/3d3d/+EhIT/kpKS/52dnf+np6f/sLCw/7i4uP++vr7/xMTE/8rK
yv/R0dH/1tbW/93d3f/j4+P/6enp/+7u7v/z8/P/9/f3//r6+v/8/Pz//f39//7+/v8EMDj/AQwN
/xMhJP8XHh//A3KJ/wCAnP8Aiqf/AI2r/wCLqf8AhaH/BHeO/zxJQP9RRjj/Sz8y/ykoJf8LDQ//
BwgK/0FCR/85OkH/IyMr/xsbI/8sLCz/NDQ0/z09Pf9HR0f/UlJS/15eXv9qamr/dnZ2/4GBgf+L
i4v/lJSU/5ycnP+jo6P/q6ur/7Kysv+6urr/wsLC/8rKyv/S0tL/29vb/+Pj4//q6ur/8PDw//X1
9f/5+fn/+/v7//39/f8EMDj/AQwN/yIvMv8SDAv/GDM1/wCNq/8AlbX/AJe3/wCQr/8SdIX/Q0Mz
/0lAMP9NQjT/TEAz/y0rI/8hIyD/CgsI/woLDP87Oj7/Pj1D/ycmLv8fHiX/KSkp/zAwMP84ODj/
QEBA/0lJSf9SUlL/XFxc/2VlZf9ubm7/dnZ2/35+fv+Ghob/jY2N/5aWlv+enp7/qKio/7Kysv+8
vLz/x8fH/9LS0v/c3Nz/5eXl/+3t7f/z8/P/+fn5//v7+/8EMDj/AQwO/x0oK/8sJyf/Ew4L/xVS
Xf8AmLj/AJi4/wiEnv9DPCz/SEEv/0hAMP9GPC7/M0I+/xlKUP8MTFj/DUBI/wgMCv8NCQv/PDk+
/0A+Q/8uLDT/Kykv/ysqLv8sLCz/MTEx/zg4OP8/Pz//R0dH/05OTv9VVVX/XFxc/2JiYv9paWn/
cXFx/3l5ef+BgYH/i4uL/5eXl/+ioqL/sLCw/729vf/Ly8v/2NjY/+Pj4//r6+v/8/Pz//n5+f8E
Lzf/AQ4R/zxBQv8vLS3/HRse/xMSEP8NcIT/AJKx/wCKp/8jX2X/SkMz/0c/Mf9KQDT/KVFU/wBs
g/8AaX//AGF2/wVLWP8EBQb/EQ0P/zk2Ov9HQ0n/NjM5/zIwNv8yMjb/HB0h/ywsLP8wMDD/NjY2
/zs7O/9AQED/RkZG/0tLS/9RUVH/V1dX/15eXv9mZmb/b29v/3p6ev+IiIj/lpaW/6ampv+2trb/
xsbG/9TU1P/h4eH/6+vr//Pz8/8ELzf/AQkK/8nJyf8+P0D/MTI2/xMTFP8QGhj/B3eN/wCEoP8A
fZj/O0Y9/0JCN/87U0//S0k//xlvff8IdYr/AHOM/wBkev8KPEf/AgAA/xUQE/80MTT/Pz1B/zc2
Of8uLS//MC0v/yEeIP8aFxn/KSkp/y0tLf8xMTH/NTU1/zg4OP89PT3/QkJC/0hISP9OTk7/V1dX
/2FhYf9ubm7/fHx8/42Njf+fn5//srKy/8LCwv/S0tL/4ODg/+vr6/8ELjX/AyMp/+fp6v/FxcX/
PUBF/y8zN/8MEA7/ECkp/wZ1jP8wTkv/IF5l/wCBnf8Ah6T/BIml/yReZP9IPzH/Mk5M/wByi/8A
XnL/Fhkc/wUAAf8TDxD/Liws/zw7PP89PDz/Rj8+/zcwMP8tJyj/JiIk/yknK/8aGR3/ExIY/w0O
Fv8vLy//MTEx/zY2Nv87Ozv/QkJC/0tLS/9XV1f/ZWVl/3V1df+IiIj/m5ub/6+vr//CwsL/0tLS
/+Hh4f8ELDT/BC83/+rs7f/v7+//goSJ/zA1Of8mKir/DhAM/xsbEv8/PjL/AIqn/wCPrv8Alrb/
AJy+/wCcvf8Ohp7/KWFp/wB7lf8AZHr/HSsw/w8JCf8JBAT/FhMT/yQjIf8kJCD/OjEs/0xFQP9R
S0n/PDY3/yUiJP8WFRr/EBEZ/w4RG/8IChn/CA0c/xIVHf8tLS3/MjIy/zk5Of9DQ0P/UFBQ/19f
X/9xcXH/hYWF/5qamv+vr6//wsLC/9PT0/8EKzL/BDA4//v7+//z8/P/5+fn/zM5Pv85PkD/ICQg
/wsNBP8oJxr/AJCv/wCZuv8Zeov/CJm3/wCkx/8AnL3/AJCv/wB9mP8AZ33/JjQ6/yslJP8VEQ7/
BQMB/xkZEv8kJhz/LyIc/zQpIv8+MzD/ODEw/xkWGP8CAQf/AAAH/wAADP8AAhT/AQkf/wsPHf8Y
Fxb/Hh4e/yMjI/80NDT/Pj4+/0tLS/9cXFz/cHBw/4WFhf+ampr/sbGx/8TExP8DKC//BDA4//z8
/P/29vb/6+vr/3+ChP8jKCj/ODs9/xYXF/8MCQn/D2Z4/wCau/8TgZf/KVtf/xSBlf8AmLn/AIyq
/wB6lP8OV2f/OTQx/zg1NP8bGhr/AwQE/wcKDf8QFhf/GBIP/xcQDf8aExH/JyEg/zUwMP86Njf/
PDk7/zk3O/8vLTH/JSMq/yUkKP8sKin/MjAw/ykoKv8aGB//MTEx/zw8PP9KSkr/XFxc/3BwcP+G
hob/nZ2d/7Ozs/8DJiz/BDA4//39/f/4+Pj/7e3t/97e3v8bICD/MjU5/y4vNP8NCg//DhEV/wOM
qf8Ambr/AJy9/xGBlv80UE//HVpi/yFOVP81NzL/KSUi/xEQD/8CAwT/AAEF/wkNFP8SFx7/LCgo
/0A7Ov9RTEv/U05N/1BLSv9RTEv/VlFP/1xXVf9fWlj/XllW/1xYVv9KSUf/NjQz/zc0OP8sKTP/
Hxsl/zIyMv89PT3/S0tL/15eXv9zc3P/ioqK/6Kiov8DIyn/BDA4//7+/v/5+fn/7+/v/+Hh4f9D
SEj/JSgs/zU2Ov8oJif/FA8P/xMgIv8JepL/AIyq/wCFof8gSU//KyMd/x8YFP8QCwj/BgMD/wQC
A/8UExT/KCgr/zY3PP85OD7/REA//0Q/Pf8/Ojn/PTg3/0I9PP9DPj3/QTw7/0M+Pf9HQkH/TUhH
/01IR/9PTUz/UU9P/0RBQ/89OUD/LSo0/yAfKf81NTX/QEBA/1BQUP9iYmL/eXl5/5GRkf8DICX/
BDA4//7+/v/6+vr/8PDw/+Pj4/9dYF//ICUl/ykqLP82NDT/JiEh/xAMCv8bHxz/Hzw7/yY3O/8f
Fxr/DggJ/wMAAP8LBQf/IBod/zYyNP9BPD7/QDw+/zgzNf81MTP/OjU0/z04N/88Nzb/OTQz/zo1
NP87NjX/PDc2/z04N/8/Ojn/QTw7/z86Of9BPTz/RUFA/0RBQ/9JRUz/OjY9/yMgJ/8cHCH/Ojo6
/0ZGRv9WVlb/aWlp/4GBgf8CHSL/BDA4///////6+vr/8fHx/+Pj4//Q0ND/GB0c/ycpKf8yMTD/
MS0r/xwZFf8dGhT/JSIb/xwXGv8IAwr/BQEH/x0WG/83MDX/RDxA/zw0N/86Mzb/Mios/y4lJ/8z
Ki3/NzIx/zgzMv82MTD/Mi0s/zArKv8zLi3/NC8u/zMuLf8xLCv/MCsq/zMuLv81MDH/My4v/zQw
Mv81MDT/Pjs+/zAuMf8hICT/FRYY/0BAQP9MTEz/Xl5e/3Nzc/8CGx//BDA4///////6+vr/8fHx
/+Pj4//Q0ND/ICUk/ycpJ/8pKCb/KiYj/ycjH/8cGBT/EAwJ/wEAAv8OChT/MCo0/0lBSv9DO0L/
Ni80/zQqLP80Kiz/Nios/zwwMf9ANDX/ODMy/zo1NP84MzL/My4t/zMuLf8zLi3/MSwr/y4pKP8t
KCf/LSgm/y0oKP8tKCn/Likq/zArLP8rJyf/NzQ1/0ZDRP8vLS7/Hx8g/xobG/9JSUn/VlZW/2lp
af8CGB3/BDA4//7+/v/6+vr/8PDw/+Li4v/Pz8//Jysr/yosKv8oKCT/Ih8b/zAtKf8WEA7/BAAA
/yAcIv9AO0f/SUNN/zkxPP8zKzL/Miox/zowM/9AMzX/Pi8x/0EzM/9CNTP/NzIx/zUwL/81MC//
NTAv/zQvLv8xLCv/Lyop/zEsK/82MTD/NjEw/zMuLf8vKCn/My0u/zQvL/8tKSj/NDAv/0A+PP9D
QT//Kyop/x0dHf8eHh7/U1NT/2NjY/8CFxv/BDA4//7+/v/5+fn/7+/v/+Hh4f/Nzc3/HyUi/ywv
Kv8tLSf/Ozgz/xsZE/8NCAT/NzIv/09IUP9IQUv/OzQ6/zcwNv8+NTr/PDI1/zgsLv83Kyz/OCor
/z0vL/87Liz/OTMy/zMuLf81MC//OzY1/zYxMP82MTD/NzIx/zUwL/83MjH/NzIx/zYwMP86MDT/
My0u/zIsKv83Mi//MS0p/zk2Mf9LS0X/PDs5/yclJv8ODQ//VVVV/2JiYv8CFhr/BDA4//7+/v/4
+Pj/7u7u/9/f3//Ly8v/FhwY/y8yLP88PDX/Hx0X/w4LB/86NTT/VVBQ/0hBRP89NTn/Ny8y/z83
Ov9AODr/NS0u/zUrLP80Kir/OCws/0AzMf86Liz/NS8u/zUwL/81MC//NjEw/zYxMP84MzL/OzY1
/zw3Nv8+OTj/OzY1/zgyMv8/Njn/Ni8w/ywlJP83Mi7/OTYv/zg1Lv9APTj/SUZF/zQxMv8QDhD/
FhYW/2dnZ/8CFhr/BDA4//39/f/39/f/7Ozs/93d3f/BwcH/GB4Z/yswJ/8lJh7/DQsF/zYyLv9O
SEj/Qjw9/0M7Ov8/NjX/Ny8u/zoyMv88MzL/NCwr/zguLf87MTD/OjAu/zovLf8zKSb/My4t/zYw
L/8zLi3/MSwr/zItK/83MjH/OjU0/zs2Nf89ODf/OzY1/zkzM/8/Njn/QTk6/zs0M/83Miz/NTIp
/zEvJv8zMSr/SkdF/zw5O/8fHB//BwYH/3BwcP8CGBv/BDA4//39/f/29vb/6+vr/9vb2/+/v7//
EBcR/w4TCv8REgr/ODYu/0lEQP9EPj3/Qjw8/zw0M/8+NDH/OzIv/zkwLf85MC3/Mikm/zYtKv9A
NzT/PTQx/zsyMP82LSv/NDAv/zMuLv84NDP/PTk5/z46Ov8+Ojn/Qj08/0E8O/9IQ0L/UExK/1pT
VP9YUFP/R0FC/0A7Of85NS3/MS8l/zMzKf8yMCf/NzUy/0I/Qf86Nzn/DQwM/xYXFv8CGh7/BDA4
//z8/P/19fX/6urq/9ra2v+9vb3/CQkJ/wwHB/8yLSz/S0VD/0hBPv9EOzf/SkI8/0A5Nf87NDH/
NzAq/zUwKP82MSf/NDAk/zcyKf9BOjf/NzAy/zMrMf8yKTP/LzM9/zA2P/8uNz7/LjlA/9LS0v/e
3t7/5eXl/+Pj4//m5uX/6Ojo/+zs7P/w8PD/7u7u/+vr6/87PTz/LS8t/zIxL/8yMCz/OjUy/0U+
O/9EPjn/FxUT/xESEf8CHCH/BDA4//z8/P/19fX/6urq/9nZ2f+8vLz/CAgJ/x4ZGf9OSEb/S0ZC
/0Q9OP9FPDb/RT01/z43Mv87NTD/NjAp/zo1LP9BPDP/Qj40/z05Mv85NDD/QDk7/zUtM/8vJy//
Ly82/z5BRv/AwMD/0tLS/+Hh4f/r6+v/8vLy//X19f/4+Pj/+fn5//r6+v/6+vr/+Pj4//X19f/x
8fH/PD48/zY1M/82MzD/Liom/zgzMP9IQj3/KCYk/wsLC/8DHyX/BDA4//z8/P/19fX/6urq/9nZ
2f+VlZX/BwcI/zYxMf9RS0n/R0I9/0E7Nf9EOzT/Qjoz/0E5M/9BOjT/PTYv/z86Mf9DPjX/PTkv
/z87Nf81MC7/OjQ1/zgwNv81LTX/mZmZ/7Kysv/IyMj/29vb/+np6f/z8/P/+fn5//v7+//9/f3/
zt7i/3+vuf8vgJL/L4CS/z6Hl/98qrP/tsvP/z48O/82MjD/NTEv/zg0Mf84My3/NDIw/w4ODv8D
Iyn/BDA4//z8/P/19fX/6urq/9vb2/95enr/EBAQ/0RAP/9RTEn/TklE/0tEP/9FPTb/Rz84/0c/
OP9IPzj/RTw1/0E8M/87OC//MzEo/zcxLv88ODb/OTM1/zozOf9+fn7/mZmZ/7Kysv/Kysr/3Nzc
/+vr6//09PT/+vr6//39/f/+/v7/T5Sj/wByiv8AeZP/AHyW/wB4kv8AcYn/AGV7/2qcp/9ER0f/
OzYz/zQvLP8vKiX/MjEv/xgYGP8DJy3/BDA4//z8/P/29vb/6+vr/9zc3P9kZGb/Gxsb/0ZBQP9R
TUj/SUQ9/0lCO/9GPzX/SUI5/0tEO/9JQjn/RD00/0I8Nf9AOzX/Ozcy/zUyLf80Mi//QD9B/19f
X/95eXn/lJSU/62trf/ExMT/2NjY/+fn5//y8vL/+Pj4//v7+//9/f3/7vX2/y+Vq/8AiKX/AI2r
/wCMqv8AhaH/AHmT/wBsg/8teYn/TVBQ/z89PP85NjD/PTw6/y4uLv8DKTD/BDA4//39/f/39/f/
7u7u/+Hh4f9ra2v/JCUj/0ZCQP9JRUD/SkU//0tEPP9IQTf/SUM5/0I7Mf8+Ni3/Pjcu/0A7M/9A
Ozb/NjIw/zc1Mv8wLy7/RERE/1hYWP9wcHD/iYmJ/6Kiov+5ubn/zc3N/97e3v/r6+v/8/Pz//n5
+f/7+/v//f39/+72+P8Pk6//AJOz/wCWtv8Ak7P/AIup/wB9mP8AboX/LXmJ/1JWVv9APj3/Pz08
/0dISP8ELDP/BDA4//39/f/5+fn/8fHx/+Xl5f9ERUL/JSYj/09LR/9IRD//R0I8/0lDO/9KQzr/
RT80/0M7MP9BOC3/OzQr/z04MP8+OTX/NDAw/zs6Of82NTb/PT09/05OTv9jY2P/enp6/5KSkv+p
qan/vr6+/9HR0f/g4OD/6+vr//Pz8//5+fn/+/v7//39/f/O6O3/b8LU/8/s8v/f8/f/P7HK/wCO
rf8Af5r/AGyD/1yUoP9YVlX/QD49/0A+Pf8ELjX/BDA4//7+/v/7+/v/9PT0/+vr6/9OT0v/KSom
/05MRv9HRDz/Qz82/0VANv9IQzf/RD4z/0Y+Mv9FPjH/Pjgt/0I7Nv9EPzz/Pzw8/zM0NP87PT3/
Nzc3/0NDQ/9VVVX/aWlp/4CAgP+Wlpb/rKys/8HBwf/S0tL/4ODg/+vr6//z8/P/+fn5//v7+//9
/f3//v7+////////////3/P3/wCbvP8Ajqz/AHqU/wBid//7+/v/+/v7//r6+v8ELzf/BDA4//7+
/v/7+/v/9/f3//Dw8P9PUEz/KSom/0ZDPv9DQDj/SUU8/0lEOv9IQjf/TEY5/0xGN/9JQjT/RT80
/0hCPP9HQ0H/Pjs8/0JCRP8jJif/MzMz/zw8PP9JSUn/Wlpa/21tbf+CgoL/VXd+/62trf/BwcH/
0tLS/+Dg4P/r6+v/8/Pz/5vGz/+s09z//f39//7+/v//////n93r/wCkx/8AmLn/AIWh/wBqgf/O
3uH//f39//39/f8GMTn/BDA4//7+/v/9/f3/+vr6//T09P9vcG3/Jici/0I+Of9CPjf/RkE4/0lD
Of9MRjv/U0xA/1RMPv9QSTn/SUE2/0hCPf9IQkH/QDw//zY3OP8MEBL/ERUU/zo6Ov9DQ0P/T09P
/19fX/9GaXD/AFtv/xxldP+DmZ3/wsLC/9LS0v/h4eH/k7zF/wB3kP8PiKL/ndLd/+74+v+f3Or/
D6/S/wCqzv8An8H/AIqo/wBvh/+/1dr///////////8EMDj/BDA4///////+/v7/+/v7//j4+P/k
5OT/QEA9/zo4Mv9CQTr/Ojkv/z08MP9IRjr/SUc5/0tHOv9NRTr/SEA4/0Y+Ov9JQ0H/SUNE/y4u
Lf8VGhn/EBgV/wgUD/9DQ0P/S0tL/1ZWVv8fa3r/AG6G/wBsg/8AaX//ToeT/7vBwv+8ys3/AHuV
/wCFof8Ajq3/AJe3/wCgwv8Aqs7/AK/U/wCr0P8An8H/AIqo/wBvh//f6uz///////////8EMDj/
BDA4///////+/v7//f39//v7+//29vb/p6im/zg6Nf87PjX/PEA2/zk9Mf8/Qzf/OkEx/z4+N/9G
Pz7/TUZD/01EQf9NQ0D/T0ZD/0I9Of8eIBv/CRIM/wwcFf8OIBn/Tk5O/1VVVf8Ydor/AIKe/wCA
nP8AfJf/CnuT/7C4uf/Pz8//N6C3/wCWtv8AnsD/AKTH/wCozP8ArNH/AK3S/wCmyv8AmLn/AISg
/3+0v/////////////////8EMDj/BDA4/////////////v7+//39/f/7+/v/+Pj4/7Kzsf82ODL/
Njkw/zs/M/85PTH/Q0g7/0RDPP9EPTn/R0A8/1VMSP9WTUn/TEVA/1BMR/9NS0f/KS0n/xMdFf8T
Hxj/Fhwa/1xcXP8leYv/AI6t/wCRsP8Ajqz/PJOl/7W1tf/IyMj/iMPP/wClyP8Aq9D/AK3S/wCs
0f8Aqs//AKbJ/wCbvP8AjKr/L5Cl//////////////////////8EMDj/BDA4////////////////
//7+/v/9/f3/+/v7//j4+P/Ly8r/Z2pk/y8xJ/83OzD/Oz8z/z9BN/8+PTX/Pzw0/0dBO/9PRkD/
UEhC/0tFP/9SUEn/WVhR/zU4L/8ZHhX/HSAe/yAkIv9SdHz/AJW1/wCbvP8Am7z/CZi3/5CttP+r
wMT/NbTP/wCv1P8Asdf/AK/U/z692P9PvtX/P7HJ/z+nvf+PxdD/////////////////////////
//8EMDj/BDA4///////////////////////+/v7//f39//v7+//6+vr/6enp/3p7dv85OjL/NTgu
/zM3Lf85OzH/Pz82/0E+Nf9IQjr/S0Q8/0pEPP9IQzv/TEg//1xZT/9QTkX/Jigl/w8SEP8YGxn/
QYub/wCdv/8AosX/AKPG/wCmyv8ArNH/ALHX/wCz2f8Ar9X/AKfL/33L2//+/v7/////////////
//////////////////////////////8EMDj/BDA4/////////////////////////////v7+//7+
/v/8/Pz/+/v7//T09P/GxsX/cHFr/0JGPv81Ny7/Ozwy/0ZFO/9EQzn/Qj81/0hDOv9PSD//UElA
/1BJQP9cVUz/VVhW/zM0Mv8gIR//HR8c/zqZrf8AocT/AKfL/wCs0f8AsNb/ALHX/wCs0f8ApMf/
AJa2/224yf/+/v7///////////////////////////////////////////8EMDj/BDA4////////
///////////////////////////////+/v7//f39//z8/P/7+/v/9vb2/7u8uv+NjYn/VldS/0ND
PP8+PjT/P0A2/0ZAOf9JRD3/VExF/1lNR/9ZTUf/W1lY/15eXP9DREL/Hh8d/x8gHv9nqrj/AKDC
/wCny/8Aqs7/AKfL/wCgwv8Ak7P/D4mj/+vy9P/+/v7/////////////////////////////////
//////////8EMDj/BDA4//////////////////////////////////////////////////7+/v/9
/f3//Pz8//v7+//5+fn/29vb/76+vf9/f3v/VVZP/0tKRP89ODT/OzQw/0c9OP9PR0P/TktK/1JQ
T/9iYmD/UVBP/yYnJf8jJCL/tsjM/1CwxP8AnL3/AJi5/wCOrf88nbH/yt/j//z8/P/+/v7/////
//////////////////////////////////////8EMDj/BDA4////////////////////////////
/////////////////////////////////v7+//7+/v/9/f3/+/v7//v7+//29vb/6urq/+Tk4//A
vr3/hYOB/1hVVP9EPTv/QD07/0tJSP9OTEv/VVJS/1FRUP81NTT/IiQh/+Pj4//o6Oj/7u7u//Pz
8//39/f/+/v7//39/f/+/v7///////////////////////////////////////////8EMDj/BDA4
/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/
BDA4/wQwOP8EMDj/BC83/wQvN/8ELzf/BC42/xc+Rf8pSU7/OkZI/zs+Pf8/Pz3/UVJQ/2BjYP9V
WFb/Oz48/wQtNP8ELTX/BC42/wQuNv8ELzf/BC83/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQw
OP8EMDj/BDA4/wQwOP8EMDj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAKAAAAEAAAACAAAAAAQAEAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAgQEACoqKgACHCAADgw
MAD4+PgAcHBwAOjw8AAAMDgACKDAANjg4ABAQEAAGCgoAHi4wADI0NAACIioAMjIyAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAALsLu7u7t3d3d3d3d3d3d3dwAAAAAAAAAA
AzMzOwugOqVVER2WZERERERERERERERHAAAAAAAAAAADM6OjAKcDqlVREdlmZEREREREREREREcA
AAAAAAAAAAMzMzowCnA6pVURH5lmRERERERERERERwAAAAAAAAAAAzMzqjMAqwOqVVER/ZZmZERE
RERERERHAAAAAAAAAAADMzMzM3AKADqlVRER+ZlmZmREREREREcAAAAAAAAAAAMzMzOiIgugA6ql
VRER/ZmWZmZERERERwAAAAAAAAAACzdzOiIisHoAOqpVURER/9mZlmZkRERHAAAAAAAAAAAAcici
IiowCqALOqVVUREREf3ZlmZkREcAAAAAAAAAAAsCLu7iqjsAqrCzqqVVVRERER/ZlmZERwAAAAAA
AAAACwvu7iMzO7AKqws6qqVVVVURERHZlmRHAAAAAAAAAAALsCiCMzOnJwCqu7s6qqpVVVVRER+Z
ZksAAAAAAAAAAAqwAu4jM3IiIAqqMwszqqqqVVVRER2WawAAAAAAAAAAD6MALio6oiInADqrMAuz
OqqqpVVREdlrAAAAAAAAAAC2GrCyoi7iOiIAC6qju7AAszqqpVURHZsAAAAAAAAAALZlqwA+7ogi
IrAAuzqjsAAACzqqVVER2wAAAAAAAAAAdGmqsL6CiI4iewALszMAAAAACzqlVREbAAAAAAAAAAB0
ZlugAoIijiIzAAAACzOqu7s7A6pVURsAAAAAAAAAAHRGm6sA6IKic7AAALqqqqpaqjqwOqVVGwAA
AAAAAAAAdEaaurCy7nsAAAuqqqOqqqqqqqsDqlUbAAAAAAAAAAB0RpW7OwB3AAADqjMzMzMzqqqq
qrCqpVAAAAAAAAAAAHRGnQszALAAA6MzszMzMzMzMzM6OwqlUAAAAAAAAAAAdEadu7uwAAOqMzMz
MzMzO7u7s7OrAKpQAAAAAAAAAAB0Rp+7sDAAqqMzMzMzMzOzMzszs6qwClAAAAAAAAAAAHRGn7uz
ADqqOjMzMzMzMzMzMzMzOqsKUAAAAAAAAAAAdEafCzADqqOqMzMzMzMzM6M6OzM6owBQAAAAAAAA
AAB0ZpELsDqqMzMzMzMzMzMzMzqjMzOqAFAAAAAAAAAAAHRmkQADqqMzMzMzMzM6qqqqqqozMzqg
AAAAAAAAAAAAdGaRADqjozMzMzMzenfZmZZmZqszOqAAAAAAAAAAAAB0ZpEAqqMzMzMzOju6HZZm
RERGajOzqwAAAAAAAAAAAHRmkQOqMzMzMzMzMxH5ZkRJwiLPozMzCwAAAAAAAAAAdGaVCqqjqqMz
MzOlEflmRE4iIiJaM7MLAAAAAAAAAAB0ZpUKqqOqozMzOlURGZZERu7u4iKqOrsAAAAAAAAAAHRm
lbqqo6MzMzM6VVEflmRETu7uIiqqqwAAAAAAAAAAdEaauqqqMzMzOjqlURHZZkRGxmjiJaqrAAAA
AAAAAAB0Rmq6ozMzMzqjo6pVER2WZERERo4iREsAAAAAAAAAAHRGarqqo6MzqqqzqlVSEdlmHURJ
iOKURwAAAAAAAAAAdERlujqqqqOqqgCqpSIlHZEu1JiI4tRHAAAAAAAAAAB0REmjozqqqqqrAAqq
IiIh8u7oiIjiZEcAAAAAAAAAAHRERhMzMzOqqqqwC6oiIiH46IiIiOxERwAAAAAAAAAAdEREQTMz
qqqqqqsABS7u4fyIiIiO5ERHAAAAAAAAAAB0RERE9bMzM6qqqjC7LoiBGIiIiIxEREcAAAAAAAAA
AHRERERGUzMzOqqqqrACiIiIiIxERERERwAAAAAAAAAAdERERERhWjOqOqqqo7CIiIiI7ERERERH
AAAAAAAAAAB0RERERERhWqM6qqpVoLyIiI7mREREREcAAAAAAAAAAHRERERERERJFaozqqpau/iI
6JRERERERwAAAAAAAAAAdERERERERERGaRWqqqqjuWZmRERERERHAAAAAAAAAAB3d3d3d3d3d3e7
u3eqqlqru7u3d3d3d3cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////
////////////////////////////////////////////////////////////////////////AAAA
AAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAA
AAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAA
AP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA
//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD/
/wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//
AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8A
AAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//////////////////////////
////////////////////////////////////////////////////////////KAAAAEAAAACAAAAA
AQAYAAAAAAAAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQKCQ4TEQ4X
FRAXFhQdGg4XFgcWFwQZHQYcIAghJQUeIwMdIgIYHQIUGAIVFwMgJQMiKAIdIwMhJgMkKgMoLgQq
MQQsNAQuNQQvNwQvNwQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQw
OAQwOAQwOAQwOAQwOAQwOAQwOAQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAkRET5CNE9GMkxBLFJKNk5GNkE7LiUiGwQEAh4hIzg+RRQcJzIyMjw8PEpK
SlpaWm5uboKCgpmZma2trcHBwdLS0uDg4Ovr6/Pz8/j4+Pv7+/39/f7+/v//////////////////
/////////////////////////////////////////////////////wQwOAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkSEDk9MEY9KFdNN1dOOFJJNlBHOEU/
NRwZEwICAjM2Oy81QAYLGjAwMDs7O0lJSVpaWm1tbYKCgpiYmK2trcDAwNHR0d7e3unp6fHx8fb2
9vr6+vz8/P39/f7+/v//////////////////////////////////////////////////////////
/////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkR
ETtAM1BINEtDL0tCLklAK09FNFNJPjcwKBMPDQsKDTo7RC0wPg8RHTAwMDs7O0lJSVpaWm1tbYGB
gZeXl6urq76+vs7Oztvb2+bm5u7u7vPz8/j4+Pv7+/z8/P39/f7+/v//////////////////////
/////////////////////////////////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAgRETk9MktEMkdBLkM8KU5FMlZMOVVKO0g+MzgvKgYCAxMRFjU1
PyEiLQkKFjAwMDs7O0lJSVlZWWxsbIGBgZWVlampqbq6usrKytbW1uHh4enp6e7u7vPz8/b29vn5
+fv7+/v7+/39/f39/f7+/v7+/v///////////////////////////////////wQwOAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcQETs/NEQ/Lj46KTs2I0U+
K0tALU5BMkM4KzQuKhE5QgQNFB4aJEBATR0eKwcHEzAwMDs7O0lJSVlZWWpqan5+fpKSkqOjo7S0
tMLCws/Pz9nZ2eHh4efn5+vr6+/v7/Pz8/X19ff39/n5+fv7+/z8/P39/f7+/v7+/v//////////
/////////////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAUPEDs8NEQ+M0E7LUQ+LklCMEtALlBEM0FDOQ1XZgBYawJLWggGByQkLz4/TBwcKAsNGDAw
MDo6OkhISFdXV2hoaHl5eYuLi5ycnKurq7m5ucTExM7OztbW1tzc3OLi4uXl5erq6u3t7fDw8PPz
8/b29vj4+Pv7+/z8/P39/f7+/v7+/v///////////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMNDyQnKjoyMR9MUSZQUkc+L0lBL0BVTAVugwBthABk
eQBWaBgwMAcDBSwwOzg6RRseKAwNGTAwMDk5OUVFRVNTU2JiYnJycoKCgpKSkqCgoKysrLe3t8HB
wcjIyM/Pz9TU1Nra2t7e3uPj4+fn5+vr6/Dw8PPz8/f39/r6+vv7+/39/f7+/v7+/v///wQwOAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAINEBAYGxdHUgBm
fABuhi1MSiNeYgB/mgB9mAB3kABrgjBLSkM2KRUSEwQFCzs+RDI0PhgZIwkKEy4uLjc3N0FBQU5O
TltbW2lpaXd3d4SEhJKSkp2dnaenp7CwsLi4uL6+vsTExMrKytHR0dbW1t3d3ePj4+np6e7u7vPz
8/f39/r6+vz8/P39/f7+/gQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAEMDRMhJBceHwNyiQCAnACKpwCNqwCLqQCFoQR3jjxJQFFGOEs/MikoJQsNDwcI
CkFCRzk6QSMjKxsbIywsLDQ0ND09PUdHR1JSUl5eXmpqanZ2doGBgYuLi5SUlJycnKOjo6urq7Ky
srq6usLCwsrKytLS0tvb2+Pj4+rq6vDw8PX19fn5+fv7+/39/QQwOAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDSIvMhIMCxgzNQCNqwCVtQCXtwCQrxJ0
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
MjMuLTUwLzs2NTYxMDYxMDcyMTUwLzcyMTcyMTYwMDowNDMtLjIsKjcyLzEtKTk2MUtLRTw7OScl
Jg4ND1VVVWJiYgIWGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAQwOP7+/vj4+O7u7t/f38vLyxYcGC8yLDw8NR8dFw4LBzo1NFVQUEhBRD01OTcvMj83OkA4
OjUtLjUrLDQqKjgsLEAzMTouLDUvLjUwLzUwLzYxMDYxMDgzMjs2NTw3Nj45ODs2NTgyMj82OTYv
MCwlJDcyLjk2Lzg1LkA9OElGRTQxMhAOEBYWFmdnZwIWGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP39/ff39+zs7N3d3cHBwRgeGSswJyUmHg0LBTYy
Lk5ISEI8PUM7Oj82NTcvLjoyMjwzMjQsKzguLTsxMDowLjovLTMpJjMuLTYwLzMuLTEsKzItKzcy
MTo1NDs2NT04Nzs2NTkzMz82OUE5Ojs0MzcyLDUyKTEvJjMxKkpHRTw5Ox8cHwcGB3BwcAIYGwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP39/fb29uvr
69vb27+/vxAXEQ4TChESCjg2LklEQEQ+PUI8PDw0Mz40MTsyLzkwLTkwLTIpJjYtKkA3ND00MTsy
MDYtKzQwLzMuLjg0Mz05OT46Oj46OUI9PEE8O0hDQlBMSlpTVFhQU0dBQkA7OTk1LTEvJTMzKTIw
Jzc1MkI/QTo3OQ0MDBYXFgIaHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAQwOPz8/PX19erq6tra2r29vQkJCQwHBzItLEtFQ0hBPkQ7N0pCPEA5NTs0MTcw
KjUwKDYxJzQwJDcyKUE6NzcwMjMrMTIpMy8zPTA2Py43Pi45QNLS0t7e3uXl5ePj4+bm5ejo6Ozs
7PDw8O7u7uvr6zs9PC0vLTIxLzIwLDo1MkU+O0Q+ORcVExESEQIcIQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOPz8/PX19erq6tnZ2by8vAgICR4ZGU5I
RktGQkQ9OEU8NkU9NT43Mjs1MDYwKTo1LEE8M0I+ND05Mjk0MEA5OzUtMy8nLy8vNj5BRsDAwNLS
0uHh4evr6/Ly8vX19fj4+Pn5+fr6+vr6+vj4+PX19fHx8Tw+PDY1MzYzMC4qJjgzMEhCPSgmJAsL
CwMfJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOPz8
/PX19erq6tnZ2ZWVlQcHCDYxMVFLSUdCPUE7NUQ7NEI6M0E5M0E6ND02Lz86MUM+NT05Lz87NTUw
Ljo0NTgwNjUtNZmZmbKyssjIyNvb2+np6fPz8/n5+fv7+/39/c7e4n+vuS+Aki+Akj6Hl3yqs7bL
zz48OzYyMDUxLzg0MTgzLTQyMA4ODgMjKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAQwOPz8/PX19erq6tvb23l6ehAQEERAP1FMSU5JREtEP0U9Nkc/OEc/
OEg/OEU8NUE8Mzs4LzMxKDcxLjw4NjkzNTozOX5+fpmZmbKyssrKytzc3Ovr6/T09Pr6+v39/f7+
/k+UowByigB5kwB8lgB4kgBxiQBle2qcp0RHRzs2MzQvLC8qJTIxLxgYGAMnLQAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOPz8/Pb29uvr69zc3GRkZhsb
G0ZBQFFNSElEPUlCO0Y/NUlCOUtEO0lCOUQ9NEI8NUA7NTs3MjUyLTQyL0A/QV9fX3l5eZSUlK2t
rcTExNjY2Ofn5/Ly8vj4+Pv7+/39/e719i+VqwCIpQCNqwCMqgCFoQB5kwBsgy15iU1QUD89PDk2
MD08Oi4uLgMpMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQwOP39/ff39+7u7uHh4WtrayQlI0ZCQElFQEpFP0tEPEhBN0lDOUI7MT42LT43LkA7M0A7NjYy
MDc1MjAvLkRERFhYWHBwcImJiaKiorm5uc3Nzd7e3uvr6/Pz8/n5+fv7+/39/e72+A+TrwCTswCW
tgCTswCLqQB9mABuhS15iVJWVkA+PT89PEdISAQsMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP39/fn5+fHx8eXl5URFQiUmI09LR0hEP0dCPElDO0pD
OkU/NEM7MEE4LTs0Kz04MD45NTQwMDs6OTY1Nj09PU5OTmNjY3p6epKSkqmpqb6+vtHR0eDg4Ovr
6/Pz8/n5+fv7+/39/c7o7W/C1M/s8t/z9z+xygCOrQB/mgBsg1yUoFhWVUA+PUA+PQQuNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP7+/vv7+/T09Ovr
605PSykqJk5MRkdEPEM/NkVANkhDN0Q+M0Y+MkU+MT44LUI7NkQ/PD88PDM0NDs9PTc3N0NDQ1VV
VWlpaYCAgJaWlqysrMHBwdLS0uDg4Ovr6/Pz8/n5+fv7+/39/f7+/v///////9/z9wCbvACOrAB6
lABid/v7+/v7+/r6+gQvNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAQwOP7+/vv7+/f39/Dw8E9QTCkqJkZDPkNAOElFPElEOkhCN0xGOUxGN0lCNEU/NEhC
PEdDQT47PEJCRCMmJzMzMzw8PElJSVpaWm1tbYKCglV3fq2trcHBwdLS0uDg4Ovr6/Pz85vGz6zT
3P39/f7+/v///5/d6wCkxwCYuQCFoQBqgc7e4f39/f39/QYxOQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP7+/v39/fr6+vT09G9wbSYnIkI+OUI+N0ZB
OElDOUxGO1NMQFRMPlBJOUlBNkhCPUhCQUA8PzY3OAwQEhEVFDo6OkNDQ09PT19fX0ZpcABbbxxl
dIOZncLCwtLS0uHh4ZO8xQB3kA+Iop3S3e74+p/c6g+v0gCqzgCfwQCKqABvh7/V2v///////wQw
OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP////7+
/vv7+/j4+OTk5EBAPTo4MkJBOjo5Lz08MEhGOklHOUtHOk1FOkhAOEY+OklDQUlDRC4uLRUaGRAY
FQgUD0NDQ0tLS1ZWVh9regBuhgBsgwBpf06Hk7vBwrzKzQB7lQCFoQCOrQCXtwCgwgCqzgCv1ACr
0ACfwQCKqABvh9/q7P///////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAQwOP////7+/v39/fv7+/b29qeopjg6NTs+NTxANjk9MT9DNzpBMT4+N0Y/
Pk1GQ01EQU1DQE9GQ0I9OR4gGwkSDAwcFQ4gGU5OTlVVVRh2igCCngCAnAB8lwp7k7C4uc/Pzzeg
twCWtgCewACkxwCozACs0QCt0gCmygCYuQCEoH+0v////////////wQwOAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP////////7+/v39/fv7+/j4+LKz
sTY4MjY5MDs/Mzk9MUNIO0RDPEQ9OUdAPFVMSFZNSUxFQFBMR01LRyktJxMdFRMfGBYcGlxcXCV5
iwCOrQCRsACOrDyTpbW1tcjIyIjDzwClyACr0ACt0gCs0QCqzwCmyQCbvACMqi+Qpf//////////
/////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQw
OP////////////7+/v39/fv7+/j4+MvLymdqZC8xJzc7MDs/Mz9BNz49NT88NEdBO09GQFBIQktF
P1JQSVlYUTU4LxkeFR0gHiAkIlJ0fACVtQCbvACbvAmYt5CttKvAxDW0zwCv1ACx1wCv1D692E++
1T+xyT+nvY/F0P///////////////////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAQwOP////////////////7+/v39/fv7+/r6+unp6Xp7djk6MjU4
LjM3LTk7MT8/NkE+NUhCOktEPEpEPEhDO0xIP1xZT1BORSYoJQ8SEBgbGUGLmwCdvwCixQCjxgCm
ygCs0QCx1wCz2QCv1QCny33L2/7+/v///////////////////////////////wQwOAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP//////////////////
//7+/v7+/vz8/Pv7+/T09MbGxXBxa0JGPjU3Ljs8MkZFO0RDOUI/NUhDOk9IP1BJQFBJQFxVTFVY
VjM0MiAhHx0fHDqZrQChxACnywCs0QCw1gCx1wCs0QCkxwCWtm24yf7+/v//////////////////
/////////////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAQwOP////////////////////////////7+/v39/fz8/Pv7+/b29ru8uo2NiVZXUkNDPD4+
ND9ANkZAOUlEPVRMRVlNR1lNR1tZWF5eXENEQh4fHR8gHmequACgwgCnywCqzgCnywCgwgCTsw+J
o+vy9P7+/v///////////////////////////////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP////////////////////////////////////7+
/v39/fz8/Pv7+/n5+dvb276+vX9/e1VWT0tKRD04NDs0MEc9OE9HQ05LSlJQT2JiYFFQTyYnJSMk
IrbIzFCwxACcvQCYuQCOrTydscrf4/z8/P7+/v///////////////////////////////wQwOAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP//////////
//////////////////////////////////7+/v7+/v39/fv7+/v7+/b29urq6uTk48C+vYWDgVhV
VEQ9O0A9O0tJSE5MS1VSUlFRUDU1NCIkIePj4+jo6O7u7vPz8/f39/v7+/39/f7+/v//////////
/////////////////////wQwOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQw
OAQwOAQwOAQvNwQvNwQvNwQuNhc+RSlJTjpGSDs+PT8/PVFSUGBjYFVYVjs+PAQtNAQtNQQuNgQu
NgQvNwQvNwQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAQwOAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAP//////////////////////////////////////////////////////////////////////
////////////////AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAA
AP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA
//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD/
/wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//
AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8A
AAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAA
AAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//////
////////////////////////////////////////////////////////////////////////////
////KAAAAEAAAACAAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAECgn/DhMR/w4XFf8QFxb/FB0a/w4XFv8HFhf/BBkd/wYcIP8IISX/BR4j
/wMdIv8CGB3/AhQY/wIVF/8DICX/AyIo/wIdI/8DISb/AyQq/wMoLv8EKjH/BCw0/wQuNf8ELzf/
BC83/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8E
MDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACRER/z5CNP9PRjL/TEEs
/1JKNv9ORjb/QTsu/yUiG/8EBAL/HiEj/zg+Rf8UHCf/MjIy/zw8PP9KSkr/Wlpa/25ubv+CgoL/
mZmZ/62trf/BwcH/0tLS/+Dg4P/r6+v/8/Pz//j4+P/7+/v//f39//7+/v//////////////////
////////////////////////////////////////////////////////////////////////////
//8EMDj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAkSEP85PTD/Rj0o/1dNN/9XTjj/Ukk2/1BHOP9FPzX/HBkT/wICAv8zNjv/
LzVA/wYLGv8wMDD/Ozs7/0lJSf9aWlr/bW1t/4KCgv+YmJj/ra2t/8DAwP/R0dH/3t7e/+np6f/x
8fH/9vb2//r6+v/8/Pz//f39//7+/v//////////////////////////////////////////////
////////////////////////////////////////BDA4/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJERH/O0Az/1BINP9LQy//
S0Iu/0lAK/9PRTT/U0k+/zcwKP8TDw3/CwoN/zo7RP8tMD7/DxEd/zAwMP87Ozv/SUlJ/1paWv9t
bW3/gYGB/5eXl/+rq6v/vr6+/87Ozv/b29v/5ubm/+7u7v/z8/P/+Pj4//v7+//8/Pz//f39//7+
/v//////////////////////////////////////////////////////////////////////////
/wQwOP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAACBER/zk9Mv9LRDL/R0Eu/0M8Kf9ORTL/Vkw5/1VKO/9IPjP/OC8q/wYCA/8T
ERb/NTU//yEiLf8JChb/MDAw/zs7O/9JSUn/WVlZ/2xsbP+BgYH/lZWV/6mpqf+6urr/ysrK/9bW
1v/h4eH/6enp/+7u7v/z8/P/9vb2//n5+f/7+/v/+/v7//39/f/9/f3//v7+//7+/v//////////
//////////////////////////////////////8EMDj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcQEf87PzT/RD8u/z46Kf87
NiP/RT4r/0tALf9OQTL/Qzgr/zQuKv8ROUL/BA0U/x4aJP9AQE3/HR4r/wcHE/8wMDD/Ozs7/0lJ
Sf9ZWVn/ampq/35+fv+SkpL/o6Oj/7S0tP/CwsL/z8/P/9nZ2f/h4eH/5+fn/+vr6//v7+//8/Pz
//X19f/39/f/+fn5//v7+//8/Pz//f39//7+/v/+/v7/////////////////////////////////
BDA4/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAFDxD/Ozw0/0Q+M/9BOy3/RD4u/0lCMP9LQC7/UEQz/0FDOf8NV2b/AFhr/wJL
Wv8IBgf/JCQv/z4/TP8cHCj/Cw0Y/zAwMP86Ojr/SEhI/1dXV/9oaGj/eXl5/4uLi/+cnJz/q6ur
/7m5uf/ExMT/zs7O/9bW1v/c3Nz/4uLi/+Xl5f/q6ur/7e3t//Dw8P/z8/P/9vb2//j4+P/7+/v/
/Pz8//39/f/+/v7//v7+/////////////////wQwOP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw0P/yQnKv86MjH/H0xR/yZQ
Uv9HPi//SUEv/0BVTP8FboP/AG2E/wBkef8AVmj/GDAw/wcDBf8sMDv/ODpF/xseKP8MDRn/MDAw
/zk5Of9FRUX/U1NT/2JiYv9ycnL/goKC/5KSkv+goKD/rKys/7e3t//BwcH/yMjI/8/Pz//U1NT/
2tra/97e3v/j4+P/5+fn/+vr6//w8PD/8/Pz//f39//6+vr/+/v7//39/f/+/v7//v7+//////8E
MDj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAINEP8QGBv/F0dS/wBmfP8Abob/LUxK/yNeYv8Af5r/AH2Y/wB3kP8Aa4L/MEtK
/0M2Kf8VEhP/BAUL/zs+RP8yND7/GBkj/wkKE/8uLi7/Nzc3/0FBQf9OTk7/W1tb/2lpaf93d3f/
hISE/5KSkv+dnZ3/p6en/7CwsP+4uLj/vr6+/8TExP/Kysr/0dHR/9bW1v/d3d3/4+Pj/+np6f/u
7u7/8/Pz//f39//6+vr//Pz8//39/f/+/v7/BDA4/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA3/EyEk/xceH/8Dcon/AICc
/wCKp/8Ajav/AIup/wCFof8Ed47/PElA/1FGOP9LPzL/KSgl/wsND/8HCAr/QUJH/zk6Qf8jIyv/
Gxsj/ywsLP80NDT/PT09/0dHR/9SUlL/Xl5e/2pqav92dnb/gYGB/4uLi/+UlJT/nJyc/6Ojo/+r
q6v/srKy/7q6uv/CwsL/ysrK/9LS0v/b29v/4+Pj/+rq6v/w8PD/9fX1//n5+f/7+/v//f39/wQw
OP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAQwN/yIvMv8SDAv/GDM1/wCNq/8AlbX/AJe3/wCQr/8SdIX/Q0Mz/0lAMP9NQjT/
TEAz/y0rI/8hIyD/CgsI/woLDP87Oj7/Pj1D/ycmLv8fHiX/KSkp/zAwMP84ODj/QEBA/0lJSf9S
UlL/XFxc/2VlZf9ubm7/dnZ2/35+fv+Ghob/jY2N/5aWlv+enp7/qKio/7Kysv+8vLz/x8fH/9LS
0v/c3Nz/5eXl/+3t7f/z8/P/+fn5//v7+/8EMDj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDv8dKCv/LCcn/xMOC/8VUl3/
AJi4/wCYuP8IhJ7/Qzws/0hBL/9IQDD/Rjwu/zNCPv8ZSlD/DExY/w1ASP8IDAr/DQkL/zw5Pv9A
PkP/Liw0/yspL/8rKi7/LCws/zExMf84ODj/Pz8//0dHR/9OTk7/VVVV/1xcXP9iYmL/aWlp/3Fx
cf95eXn/gYGB/4uLi/+Xl5f/oqKi/7CwsP+9vb3/y8vL/9jY2P/j4+P/6+vr//Pz8//5+fn/BC83
/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAABDhH/PEFC/y8tLf8dGx7/ExIQ/w1whP8AkrH/AIqn/yNfZf9KQzP/Rz8x/0pANP8p
UVT/AGyD/wBpf/8AYXb/BUtY/wQFBv8RDQ//OTY6/0dDSf82Mzn/MjA2/zIyNv8cHSH/LCws/zAw
MP82Njb/Ozs7/0BAQP9GRkb/S0tL/1FRUf9XV1f/Xl5e/2ZmZv9vb2//enp6/4iIiP+Wlpb/pqam
/7a2tv/Gxsb/1NTU/+Hh4f/r6+v/8/Pz/wQvN/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkK/8nJyf8+P0D/MTI2/xMTFP8Q
Ghj/B3eN/wCEoP8AfZj/O0Y9/0JCN/87U0//S0k//xlvff8IdYr/AHOM/wBkev8KPEf/AgAA/xUQ
E/80MTT/Pz1B/zc2Of8uLS//MC0v/yEeIP8aFxn/KSkp/y0tLf8xMTH/NTU1/zg4OP89PT3/QkJC
/0hISP9OTk7/V1dX/2FhYf9ubm7/fHx8/42Njf+fn5//srKy/8LCwv/S0tL/4ODg/+vr6/8ELjX/
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAMjKf/n6er/xcXF/z1ARf8vMzf/DBAO/xApKf8GdYz/ME5L/yBeZf8AgZ3/AIek/wSJ
pf8kXmT/SD8x/zJOTP8Acov/AF5y/xYZHP8FAAH/Ew8Q/y4sLP88Ozz/PTw8/0Y/Pv83MDD/LSco
/yYiJP8pJyv/Ghkd/xMSGP8NDhb/Ly8v/zExMf82Njb/Ozs7/0JCQv9LS0v/V1dX/2VlZf91dXX/
iIiI/5ubm/+vr6//wsLC/9LS0v/h4eH/BCw0/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAELzf/6uzt/+/v7/+ChIn/MDU5/yYq
Kv8OEAz/GxsS/z8+Mv8Aiqf/AI+u/wCWtv8AnL7/AJy9/w6Gnv8pYWn/AHuV/wBkev8dKzD/DwkJ
/wkEBP8WExP/JCMh/yQkIP86MSz/TEVA/1FLSf88Njf/JSIk/xYVGv8QERn/DhEb/wgKGf8IDRz/
EhUd/y0tLf8yMjL/OTk5/0NDQ/9QUFD/X19f/3Fxcf+FhYX/mpqa/6+vr//CwsL/09PT/wQrMv8A
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAABDA4//v7+//z8/P/5+fn/zM5Pv85PkD/ICQg/wsNBP8oJxr/AJCv/wCZuv8Zeov/CJm3
/wCkx/8AnL3/AJCv/wB9mP8AZ33/JjQ6/yslJP8VEQ7/BQMB/xkZEv8kJhz/LyIc/zQpIv8+MzD/
ODEw/xkWGP8CAQf/AAAH/wAADP8AAhT/AQkf/wsPHf8YFxb/Hh4e/yMjI/80NDT/Pj4+/0tLS/9c
XFz/cHBw/4WFhf+ampr/sbGx/8TExP8DKC//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP/8/Pz/9vb2/+vr6/9/goT/Iygo
/zg7Pf8WFxf/DAkJ/w9meP8Amrv/E4GX/ylbX/8UgZX/AJi5/wCMqv8AepT/Dldn/zk0Mf84NTT/
Gxoa/wMEBP8HCg3/EBYX/xgSD/8XEA3/GhMR/ychIP81MDD/OjY3/zw5O/85Nzv/Ly0x/yUjKv8l
JCj/LCop/zIwMP8pKCr/Ghgf/zExMf88PDz/SkpK/1xcXP9wcHD/hoaG/52dnf+zs7P/AyYs/wAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAEMDj//f39//j4+P/t7e3/3t7e/xsgIP8yNTn/Li80/w0KD/8OERX/A4yp/wCZuv8AnL3/
EYGW/zRQT/8dWmL/IU5U/zU3Mv8pJSL/ERAP/wIDBP8AAQX/CQ0U/xIXHv8sKCj/QDs6/1FMS/9T
Tk3/UEtK/1FMS/9WUU//XFdV/19aWP9eWVb/XFhW/0pJR/82NDP/NzQ4/ywpM/8fGyX/MjIy/z09
Pf9LS0v/Xl5e/3Nzc/+Kior/oqKi/wMjKf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4//7+/v/5+fn/7+/v/+Hh4f9DSEj/
JSgs/zU2Ov8oJif/FA8P/xMgIv8JepL/AIyq/wCFof8gSU//KyMd/x8YFP8QCwj/BgMD/wQCA/8U
ExT/KCgr/zY3PP85OD7/REA//0Q/Pf8/Ojn/PTg3/0I9PP9DPj3/QTw7/0M+Pf9HQkH/TUhH/01I
R/9PTUz/UU9P/0RBQ/89OUD/LSo0/yAfKf81NTX/QEBA/1BQUP9iYmL/eXl5/5GRkf8DICX/AAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAQwOP/+/v7/+vr6//Dw8P/j4+P/XWBf/yAlJf8pKiz/NjQ0/yYhIf8QDAr/Gx8c/x88O/8m
Nzv/Hxca/w4ICf8DAAD/CwUH/yAaHf82MjT/QTw+/0A8Pv84MzX/NTEz/zo1NP89ODf/PDc2/zk0
M/86NTT/OzY1/zw3Nv89ODf/Pzo5/0E8O/8/Ojn/QT08/0VBQP9EQUP/SUVM/zo2Pf8jICf/HBwh
/zo6Ov9GRkb/VlZW/2lpaf+BgYH/Ah0i/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDj///////r6+v/x8fH/4+Pj/9DQ0P8Y
HRz/Jykp/zIxMP8xLSv/HBkV/x0aFP8lIhv/HBca/wgDCv8FAQf/HRYb/zcwNf9EPED/PDQ3/zoz
Nv8yKiz/LiUn/zMqLf83MjH/ODMy/zYxMP8yLSz/MCsq/zMuLf80Ly7/My4t/zEsK/8wKyr/My4u
/zUwMf8zLi//NDAy/zUwNP8+Oz7/MC4x/yEgJP8VFhj/QEBA/0xMTP9eXl7/c3Nz/wIbH/8AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAABDA4///////6+vr/8fHx/+Pj4//Q0ND/ICUk/ycpJ/8pKCb/KiYj/ycjH/8cGBT/EAwJ/wEA
Av8OChT/MCo0/0lBSv9DO0L/Ni80/zQqLP80Kiz/Nios/zwwMf9ANDX/ODMy/zo1NP84MzL/My4t
/zMuLf8zLi3/MSwr/y4pKP8tKCf/LSgm/y0oKP8tKCn/Likq/zArLP8rJyf/NzQ1/0ZDRP8vLS7/
Hx8g/xobG/9JSUn/VlZW/2lpaf8CGB3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP/+/v7/+vr6//Dw8P/i4uL/z8/P/ycr
K/8qLCr/KCgk/yIfG/8wLSn/FhAO/wQAAP8gHCL/QDtH/0lDTf85MTz/Mysy/zIqMf86MDP/QDM1
/z4vMf9BMzP/QjUz/zcyMf81MC//NTAv/zUwL/80Ly7/MSwr/y8qKf8xLCv/NjEw/zYxMP8zLi3/
Lygp/zMtLv80Ly//LSko/zQwL/9APjz/Q0E//ysqKf8dHR3/Hh4e/1NTU/9jY2P/Ahcb/wAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAEMDj//v7+//n5+f/v7+//4eHh/83Nzf8fJSL/LC8q/y0tJ/87ODP/GxkT/w0IBP83Mi//T0hQ
/0hBS/87NDr/NzA2/z41Ov88MjX/OCwu/zcrLP84Kiv/PS8v/zsuLP85MzL/My4t/zUwL/87NjX/
NjEw/zYxMP83MjH/NTAv/zcyMf83MjH/NjAw/zowNP8zLS7/Miwq/zcyL/8xLSn/OTYx/0tLRf88
Ozn/JyUm/w4ND/9VVVX/YmJi/wIWGv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4//7+/v/4+Pj/7u7u/9/f3//Ly8v/FhwY
/y8yLP88PDX/Hx0X/w4LB/86NTT/VVBQ/0hBRP89NTn/Ny8y/z83Ov9AODr/NS0u/zUrLP80Kir/
OCws/0AzMf86Liz/NS8u/zUwL/81MC//NjEw/zYxMP84MzL/OzY1/zw3Nv8+OTj/OzY1/zgyMv8/
Njn/Ni8w/ywlJP83Mi7/OTYv/zg1Lv9APTj/SUZF/zQxMv8QDhD/FhYW/2dnZ/8CFhr/AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQwOP/9/f3/9/f3/+zs7P/d3d3/wcHB/xgeGf8rMCf/JSYe/w0LBf82Mi7/TkhI/0I8Pf9DOzr/
PzY1/zcvLv86MjL/PDMy/zQsK/84Li3/OzEw/zowLv86Ly3/Mykm/zMuLf82MC//My4t/zEsK/8y
LSv/NzIx/zo1NP87NjX/PTg3/zs2Nf85MzP/PzY5/0E5Ov87NDP/NzIs/zUyKf8xLyb/MzEq/0pH
Rf88OTv/Hxwf/wcGB/9wcHD/Ahgb/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDj//f39//b29v/r6+v/29vb/7+/v/8QFxH/
DhMK/xESCv84Ni7/SURA/0Q+Pf9CPDz/PDQz/z40Mf87Mi//OTAt/zkwLf8yKSb/Ni0q/0A3NP89
NDH/OzIw/zYtK/80MC//My4u/zg0M/89OTn/Pjo6/z46Of9CPTz/QTw7/0hDQv9QTEr/WlNU/1hQ
U/9HQUL/QDs5/zk1Lf8xLyX/MzMp/zIwJ/83NTL/Qj9B/zo3Of8NDAz/FhcW/wIaHv8AAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BDA4//z8/P/19fX/6urq/9ra2v+9vb3/CQkJ/wwHB/8yLSz/S0VD/0hBPv9EOzf/SkI8/0A5Nf87
NDH/NzAq/zUwKP82MSf/NDAk/zcyKf9BOjf/NzAy/zMrMf8yKTP/LzM9/zA2P/8uNz7/LjlA/9LS
0v/e3t7/5eXl/+Pj4//m5uX/6Ojo/+zs7P/w8PD/7u7u/+vr6/87PTz/LS8t/zIxL/8yMCz/OjUy
/0U+O/9EPjn/FxUT/xESEf8CHCH/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP/8/Pz/9fX1/+rq6v/Z2dn/vLy8/wgICf8e
GRn/TkhG/0tGQv9EPTj/RTw2/0U9Nf8+NzL/OzUw/zYwKf86NSz/QTwz/0I+NP89OTL/OTQw/0A5
O/81LTP/Lycv/y8vNv8+QUb/wMDA/9LS0v/h4eH/6+vr//Ly8v/19fX/+Pj4//n5+f/6+vr/+vr6
//j4+P/19fX/8fHx/zw+PP82NTP/NjMw/y4qJv84MzD/SEI9/ygmJP8LCwv/Ax8l/wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE
MDj//Pz8//X19f/q6ur/2dnZ/5WVlf8HBwj/NjEx/1FLSf9HQj3/QTs1/0Q7NP9COjP/QTkz/0E6
NP89Ni//Pzox/0M+Nf89OS//Pzs1/zUwLv86NDX/ODA2/zUtNf+ZmZn/srKy/8jIyP/b29v/6enp
//Pz8//5+fn/+/v7//39/f/O3uL/f6+5/y+Akv8vgJL/PoeX/3yqs/+2y8//Pjw7/zYyMP81MS//
ODQx/zgzLf80MjD/Dg4O/wMjKf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4//z8/P/19fX/6urq/9vb2/95enr/EBAQ/0RA
P/9RTEn/TklE/0tEP/9FPTb/Rz84/0c/OP9IPzj/RTw1/0E8M/87OC//MzEo/zcxLv88ODb/OTM1
/zozOf9+fn7/mZmZ/7Kysv/Kysr/3Nzc/+vr6//09PT/+vr6//39/f/+/v7/T5Sj/wByiv8AeZP/
AHyW/wB4kv8AcYn/AGV7/2qcp/9ER0f/OzYz/zQvLP8vKiX/MjEv/xgYGP8DJy3/AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQw
OP/8/Pz/9vb2/+vr6//c3Nz/ZGRm/xsbG/9GQUD/UU1I/0lEPf9JQjv/Rj81/0lCOf9LRDv/SUI5
/0Q9NP9CPDX/QDs1/zs3Mv81Mi3/NDIv/0A/Qf9fX1//eXl5/5SUlP+tra3/xMTE/9jY2P/n5+f/
8vLy//j4+P/7+/v//f39/+719v8vlav/AIil/wCNq/8AjKr/AIWh/wB5k/8AbIP/LXmJ/01QUP8/
PTz/OTYw/z08Ov8uLi7/Aykw/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDj//f39//f39//u7u7/4eHh/2tra/8kJSP/RkJA
/0lFQP9KRT//S0Q8/0hBN/9JQzn/Qjsx/z42Lf8+Ny7/QDsz/0A7Nv82MjD/NzUy/zAvLv9ERET/
WFhY/3BwcP+JiYn/oqKi/7m5uf/Nzc3/3t7e/+vr6//z8/P/+fn5//v7+//9/f3/7vb4/w+Tr/8A
k7P/AJa2/wCTs/8Ai6n/AH2Y/wBuhf8teYn/UlZW/0A+Pf8/PTz/R0hI/wQsM/8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4
//39/f/5+fn/8fHx/+Xl5f9ERUL/JSYj/09LR/9IRD//R0I8/0lDO/9KQzr/RT80/0M7MP9BOC3/
OzQr/z04MP8+OTX/NDAw/zs6Of82NTb/PT09/05OTv9jY2P/enp6/5KSkv+pqan/vr6+/9HR0f/g
4OD/6+vr//Pz8//5+fn/+/v7//39/f/O6O3/b8LU/8/s8v/f8/f/P7HK/wCOrf8Af5r/AGyD/1yU
oP9YVlX/QD49/0A+Pf8ELjX/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP/+/v7/+/v7//T09P/r6+v/Tk9L/ykqJv9OTEb/
R0Q8/0M/Nv9FQDb/SEM3/0Q+M/9GPjL/RT4x/z44Lf9COzb/RD88/z88PP8zNDT/Oz09/zc3N/9D
Q0P/VVVV/2lpaf+AgID/lpaW/6ysrP/BwcH/0tLS/+Dg4P/r6+v/8/Pz//n5+f/7+/v//f39//7+
/v///////////9/z9/8Am7z/AI6s/wB6lP8AYnf/+/v7//v7+//6+vr/BC83/wAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDj/
/v7+//v7+//39/f/8PDw/09QTP8pKib/RkM+/0NAOP9JRTz/SUQ6/0hCN/9MRjn/TEY3/0lCNP9F
PzT/SEI8/0dDQf8+Ozz/QkJE/yMmJ/8zMzP/PDw8/0lJSf9aWlr/bW1t/4KCgv9Vd37/ra2t/8HB
wf/S0tL/4ODg/+vr6//z8/P/m8bP/6zT3P/9/f3//v7+//////+f3ev/AKTH/wCYuf8AhaH/AGqB
/87e4f/9/f3//f39/wYxOf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4//7+/v/9/f3/+vr6//T09P9vcG3/Jici/0I+Of9C
Pjf/RkE4/0lDOf9MRjv/U0xA/1RMPv9QSTn/SUE2/0hCPf9IQkH/QDw//zY3OP8MEBL/ERUU/zo6
Ov9DQ0P/T09P/19fX/9GaXD/AFtv/xxldP+DmZ3/wsLC/9LS0v/h4eH/k7zF/wB3kP8PiKL/ndLd
/+74+v+f3Or/D6/S/wCqzv8An8H/AIqo/wBvh/+/1dr///////////8EMDj/AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP//
/////v7+//v7+//4+Pj/5OTk/0BAPf86ODL/QkE6/zo5L/89PDD/SEY6/0lHOf9LRzr/TUU6/0hA
OP9GPjr/SUNB/0lDRP8uLi3/FRoZ/xAYFf8IFA//Q0ND/0tLS/9WVlb/H2t6/wBuhv8AbIP/AGl/
/06Hk/+7wcL/vMrN/wB7lf8AhaH/AI6t/wCXt/8AoML/AKrO/wCv1P8Aq9D/AJ/B/wCKqP8Ab4f/
3+rs////////////BDA4/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDj///////7+/v/9/f3/+/v7//b29v+nqKb/ODo1/zs+
Nf88QDb/OT0x/z9DN/86QTH/Pj43/0Y/Pv9NRkP/TURB/01DQP9PRkP/Qj05/x4gG/8JEgz/DBwV
/w4gGf9OTk7/VVVV/xh2iv8Agp7/AICc/wB8l/8Ke5P/sLi5/8/Pz/83oLf/AJa2/wCewP8ApMf/
AKjM/wCs0f8ArdL/AKbK/wCYuf8AhKD/f7S//////////////////wQwOP8AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4////
/////////v7+//39/f/7+/v/+Pj4/7Kzsf82ODL/Njkw/zs/M/85PTH/Q0g7/0RDPP9EPTn/R0A8
/1VMSP9WTUn/TEVA/1BMR/9NS0f/KS0n/xMdFf8THxj/Fhwa/1xcXP8leYv/AI6t/wCRsP8Ajqz/
PJOl/7W1tf/IyMj/iMPP/wClyP8Aq9D/AK3S/wCs0f8Aqs//AKbJ/wCbvP8AjKr/L5Cl////////
//////////////8EMDj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP/////////////////+/v7//f39//v7+//4+Pj/y8vK
/2dqZP8vMSf/Nzsw/zs/M/8/QTf/Pj01/z88NP9HQTv/T0ZA/1BIQv9LRT//UlBJ/1lYUf81OC//
GR4V/x0gHv8gJCL/UnR8/wCVtf8Am7z/AJu8/wmYt/+QrbT/q8DE/zW0z/8Ar9T/ALHX/wCv1P8+
vdj/T77V/z+xyf8/p73/j8XQ////////////////////////////BDA4/wAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMDj/////
//////////////////7+/v/9/f3/+/v7//r6+v/p6en/ent2/zk6Mv81OC7/Mzct/zk7Mf8/Pzb/
QT41/0hCOv9LRDz/SkQ8/0hDO/9MSD//XFlP/1BORf8mKCX/DxIQ/xgbGf9Bi5v/AJ2//wCixf8A
o8b/AKbK/wCs0f8Asdf/ALPZ/wCv1f8Ap8v/fcvb//7+/v//////////////////////////////
/////////////wQwOP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4/////////////////////////////v7+//7+/v/8/Pz/
+/v7//T09P/GxsX/cHFr/0JGPv81Ny7/Ozwy/0ZFO/9EQzn/Qj81/0hDOv9PSD//UElA/1BJQP9c
VUz/VVhW/zM0Mv8gIR//HR8c/zqZrf8AocT/AKfL/wCs0f8AsNb/ALHX/wCs0f8ApMf/AJa2/224
yf/+/v7///////////////////////////////////////////8EMDj/AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwOP//////
/////////////////////////////////v7+//39/f/8/Pz/+/v7//b29v+7vLr/jY2J/1ZXUv9D
Qzz/Pj40/z9ANv9GQDn/SUQ9/1RMRf9ZTUf/WU1H/1tZWP9eXlz/Q0RC/x4fHf8fIB7/Z6q4/wCg
wv8Ap8v/AKrO/wCny/8AoML/AJOz/w+Jo//r8vT//v7+////////////////////////////////
////////////BDA4/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAEMDj/////////////////////////////////////////////
/////v7+//39/f/8/Pz/+/v7//n5+f/b29v/vr69/39/e/9VVk//S0pE/z04NP87NDD/Rz04/09H
Q/9OS0r/UlBP/2JiYP9RUE//Jicl/yMkIv+2yMz/ULDE/wCcvf8AmLn/AI6t/zydsf/K3+P//Pz8
//7+/v///////////////////////////////////////////wQwOP8AAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDA4////////
/////////////////////////////////////////////////////v7+//7+/v/9/f3/+/v7//v7
+//29vb/6urq/+Tk4//Avr3/hYOB/1hVVP9EPTv/QD07/0tJSP9OTEv/VVJS/1FRUP81NTT/IiQh
/+Pj4//o6Oj/7u7u//Pz8//39/f/+/v7//39/f/+/v7/////////////////////////////////
//////////8EMDj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQw
OP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQvN/8ELzf/BC83/wQuNv8XPkX/KUlO
/zpGSP87Pj3/Pz89/1FSUP9gY2D/VVhW/zs+PP8ELTT/BC01/wQuNv8ELjb/BC83/wQvN/8EMDj/
BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wQwOP8EMDj/BDA4/wAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAD/////////////////////////////////////////////////////////////
/////////////////////////wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA
//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD/
/wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//
AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8A
AAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAA
AAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAA
AAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8AAAAA
AAD/////////////////////////////////////////////////////////////////////////
/////////////w==')
    #endregion
    $formTSTool3.MainMenuStrip = $menustrip1
    $formTSTool3.MaximizeBox = $False
    $formTSTool3.Name = "formTSTool3"
    $formTSTool3.StartPosition = 'CenterScreen'
    $formTSTool3.Text = "TSTool3"
    $formTSTool3.add_FormClosed($formMain_FormClosed)
    $formTSTool3.add_Load($FormEvent_Load)
    #
    # buttonCopy
    #
    $buttonCopy.Location = '155, 287'
    $buttonCopy.Name = "buttonCopy"
    $buttonCopy.Size = '75, 31'
    $buttonCopy.TabIndex = 24
    $buttonCopy.Text = "Copy"
    $buttonCopy.UseVisualStyleBackColor = $True
    $buttonCopy.add_Click($buttonCopy_Click)
    #
    # richtextbox1
    #
    $richtextbox1.BackColor = '1, 36, 86'
    $richtextbox1.Font = "Lucida Console, 9pt"
    $richtextbox1.ForeColor = '238, 237, 240'
    $richtextbox1.Location = '12, 326'
    $richtextbox1.Name = "richtextbox1"
    $richtextbox1.Size = '1080, 343'
    $richtextbox1.TabIndex = 23
    $richtextbox1.Text = ""
    $richtextbox1.add_LinkClicked($richtextbox1_LinkClicked)
    #
    # buttonClear
    #
    $buttonClear.Location = '236, 287'
    $buttonClear.Name = "buttonClear"
    $buttonClear.Size = '75, 31'
    $buttonClear.TabIndex = 22
    $buttonClear.Text = "Clear"
    $buttonClear.UseVisualStyleBackColor = $True
    $buttonClear.add_Click($buttonClear_Click)
    #
    # labelBarcode
    #
    $labelBarcode.Font = "Tahoma, 12pt, style=Bold"
    $labelBarcode.ForeColor = 'MediumBlue'
    $labelBarcode.Location = '420, 51'
    $labelBarcode.Name = "labelBarcode"
    $labelBarcode.Size = '300, 31'
    $labelBarcode.TabIndex = 21
    $labelBarcode.TextAlign = 'MiddleLeft'
    #
    # picturebox1
    #
    #region Binary Data
    $picturebox1.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAAIEAAAAjCAYAAACzdGm1AAAABGdBTUEAAK/INwWK6QAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAACTPSURBVHhe7Xt3nJTlufYDLLBs77tTdqft
9N5725nZ3lnYhUUBpQooAtLEgghGAcUeA2JBxS7GKIjYBYnRWBKNoibGaL54olGOnx33Ptc97HqI
n/FET77z/fGxv9+17zsz77zv89z9vp5nhPjxf6M3XbZFuXTlitb5ixYsX3jqoutOW7Lk4iXLz2ia
N39+Lm476qUXXxJ7d+8RP/vpT8Xtd+4Uv/zVfrHnwV+IS7ZsFNuuvVo8tf9R8fRzB8SePfeKX9xz
u+jsahcnnTRDPPTQQ2LrtmvEH/7wpnj1tV8Dz4rnnn9c7Nl7h3jqsfvE5x++Kb48/Aex98F7xMrV
Z4i5804WJ06fKvoHesWUqX2if3Kn6OpIi5bmmIhHvcLpMgmHyyCsdrXQ6qXCYlIInapGKJUVQlZb
LFSKSmE21AqtTiZMVoWwO7TC4TSIUNApkgmf2LRxvbj8iovFksXzxNatV4kLLlgrenvbxPQTB8Tc
uTPFm797Wnz9ydvij4eeEXfeeb04cPBB8duXD4rXDj0nDr3+sti//0mx46brxPbtW0Uo6hZnn7VC
7Nt9r3jql0+Ipw48Ju6/f5fYfPGF4sYd2yGTx8SBpx8Xl156idh1193iqSeeFG+/9TZrafSZZ61R
n7Z0yeIFixZdd/qypZfMmj938KItFwdnzpk1geX941X5w745yuly5axYc2aktbf7KnvA+7bObiGz
2056m420JgupddojHZ0du5YsWarErcc8uu/h40bwI43g3rvvYe2wcseevvj0eWab5c8ag4H0FhsZ
HDYysdwdls9jzZlHp0w/Yc5lV10pYWP5YSr9YVeP2XjpJbq+wYHrjW77kNJiIGvQS+54iFyRMAUS
aYqkGinV3EoGs4kkUslTp5+22MaGcM3xSPCDI8GWLRdnDUBSI8mNx+Nn1khrPg3F45RsaqVgMk3e
WIJc0SC5YiHSOq2kgj6ijQ2HlqxaMbUhkx73r44MWUtcsHTxNE8s/I7CrCd7wEfhphT50jHyNSTI
m2ikcObo4BKNbZRubiONVksatfqtc84+pxHfz+FBHU8H/1w62I90wB49OHWwrLe3d1t5eTmFonFK
t3ZSqAGyTjVRoKGZfMkUeZIRCjdDF4kY6RxsDEbqn3HijtkL5qnYAX+Yn3/31WPOXbdW1TfYf7PJ
7f7CFYmQLw6lRxIUjqcxiDhFMLBIU1d2UIFkI0VTzdTQ1E4tbd0klyuosrLyvTmzZ09lQ2JD2L3n
eE3wfTXBk6gJWHlz5syubUgm7x43bjyFIe8myDOeboERNJE/2UShdBvFWnvIn8lQMJ6kYDRFXhiK
L5Egi89Hvljk9TXnnjU44oA/xhjY+8cMTpvui6czB0wuN/kbUhSCgiOpFkpgAPEGDCjTQZH2iRTI
tMEgmiiYaoWV4nO8bm7roTSiQlFhGY0ZO+bTk2ZN3zQ4bWohW/jxwvC7CsOfjOT/MRdetKFBZ9T+
Bm+Qzeah1o5eRNdOOBhkDhkHIHsv5B1u7QZ6KNLQSkm8H4deQnDGULoRKTpKZqfrk/6p01Z6vb78
H5oesuF/zZq1M6wO3/9yh+IUg2fzzeNQemPrRMo09VAoDovEw714uBPnzkgKr5vJH0e4SjbDOjPU
2NJFBqON8itKqaiymCLR0IF169c2D4epUftRGf/Q7mD/47/IdgZHPn5L7Htol1jx/7g7mDdvpnj7
9WcEffon8c6bz/3w7gChfzc6BXaOVauWSxcsmndRtazqcFF1GZVW11ASsoyx8pFyAwmOAs3kgWyd
kQy5cO6H4v0J6KaBHa8PUbgbjgpnTLdmHdZo83zd1dN/1zlnnyf/Z9MDG8D4JejzHK7I57F0N6Xb
J8EIOqihpZOa2uHdTZ3UkGqjBB4QgUU6w0myBOIIQXEK4jUP1BNGaAI4Ylg8PqqsqyNn0E8yhZyq
ayo+aWxquH3VqmWNS5cuHs8Wum/f/eL+XXd80yI+/PDDaCF/Jv749h/QYr0gXn/j1+L5F58U+x65
Rzz04J3iw7/8Thz+t0Ni166d4sw1K8S8+SeL6TOOtohTByeJgf4u0d2ZFq3NcRGP+f6uRazXSYXZ
VCe0qmqhQIso5RaxrkKY9WgRtVJhsqBFdOq+aREbkj60axvFNddcIc5YukDceOM2sWnTejGxt13M
xDNnz54uHtl7t/ji8Fvi2acfFHfffaM4+KuHxCu/+5V4480XxJu/f1UcPLhf3HTzDeK667eJUMQt
zjl7pXhkz33i2ZeeySr/yqsuVU47YWCF0aR9raKqjEzI7TqblaqVqqMGEGskd6gB4T6DSNsKL0+T
2RcjWzAOp8sgAnAkaKZUphNO2kWN7d1Zx0209FCmvZ8c3iS1tHY/tXbt+cb/yhCyBrD49GUrAsHw
kbaObuqefCK1TJxKLT19uFk7uYMBMqE9iYajlIg1UAIhyQsjsHoj5EYkCCZbyIejO4gcFYcFw3q9
gTAVV1ST2eEhvclM9ToNlZcXk0xWBSuPHlx11vK1l265MHT9tqtlTU3p4sn9k4p37Lix7IKfrC89
cOCp6r377pXte/he+S8euE11y63XGK+79lLrzddfbd6+7XL7xk0boqctXtALAc7t6+tc2NnVuqy7
p21hV0fjoubG6PJ0Q2B9KODcYLfrN1jt2g1mm2qDVi/fYDLWbdCqajaAJ9ggry3eAJ5ggwnva3X4
zKLcYLFpNlht2g0+r21DLOq54OSTBs+cN3fGoin93UsWLpqzZPas6ad1dGSWTp7Ueerg4KRZCxbM
mXTBhrPimzaeF7322kvtd+26sf6B3XfW7n3obtmTTz0sueOOnWUXX7Kx7MKL1pd6A/aiU06ZVXHr
ju3GCzdfMDjtxCk7TSbdX8vKiiCTGjKYTGSyOalWrSOZUpNVLhsBG4A7mKAAR2A4ms0fI4c/SpFE
hhKoz5KoC5wuD+TsoFg6Rc1dPdDdALX1nUA9kwYphm6ivaP74Jo15xr+kSFkDWDlqlWrm1vavhqY
Okj9A7hBB3I9ikGVqZ6qFRU0oXgc5eePpWqE92AgQAEo2O0LkT/aQB4o3xVKksMXJRfgCzZQHMVK
A1JEaaWEVFoDKev1ZLU7yOV0kpv7XBhEXZ2EfE7LkaZ04m/RSPDfQuHAe7FY5C/RaPC9RCL678mG
8MeZpvDHqUbvJ4mGwOfxROCLtrbU5y2tmS8aW9NHkk0NFGuIURStUiwWoFDYi2c7AQf5/HZyeyzk
cBrJ7jSQ020kl9dMBoOCjNpa0muVpMUYTNo6nNdibLrs5yCWyO7A9S4zBXAfp9tEdiAYcpHHa6Nw
1EfRRATKCVEyE0cojiBFJr9OpaNHEqnwF6lM8NOGdOB/pzKBj3H+cTwRfD8eD7wXjQb+Egq5MTf/
R+l09DOrTT+kVsrJaTWRy2EnF2qver2RNAYzlVfL4HBOaoSXByFXtz9OTjibE1HXHW4gHxeCSNUe
b5Ai4QiZDHrKzxtLeYXjqKSqgGT1MjJ7XJSEQfRNmkhTBqdRV3cv9Dr1mbXr1v0fEWH0zJNnVi5Z
tnRNKpP+Oo7q0oPqUmfQUXFJEZVXlFB+cS6VSfJJqZV95XRbP06l4n+Dgj5zOl3k8vhhkSFyBKPk
xKAMTh9ZXeAOPFGKImw1o6Apq5BQeZWU5Mp6UsLCdfUGqleqyaBR4zn1pNVr0EnUkEIuI5lEQtUQ
QE2NnGrlcpLXSqleK4dgVKSzQoE2ExlAUOltFtKajTi3ktnlJIvXjWs0gJokGjlVyatIWishCbxL
hqNcIaVaCFxaJyOFWkkKRS2uUVGFwkAyPEeF9+RIV3KFDOPEWHE9f1cixz1wXoH7qY0aUmsVZHLa
yOJ2kwnP1VkxFoBDuMHG4zOTxqQnvVFJSpWc6vAcuUxOEkktSWuk2TkqamUwfswL89brMH+Efa1a
S/UaQ1ZGMoWGcvOKYcAhakId5kWqdbgjZHT4ME/INpwgO2TuhAG43V7yej1DjZmGjyLRwEd6o+Yz
ibJ8KL90HJWWF1FRSSFJ5VKywcgi0SjFwDVMnTb43KJTF/2dIeS2trecYzAZPpDXyamypoqKS0uo
TllHRpPhiMNpg0Un/2q2GF+tkVRzEnsI2KfX65/3+wNHrA43WVzerBG4o0kyuPxkcQTJAYRhvW2I
BOWlVTShqJQqpHVUVFZFJaWVVFxQgjRRRUWSGiquqqTSqgqqqJFAcSqS1GqorEZJtXVaUipUYCER
GuEdkYiUFp5QQEtOzqczZhfQspP5vIiWzi4hC9qollYtzT6hhpbPLaITJ1VSPKEDq+algW4JDfbW
0FRgcKKMpvSpaHKXghIJeH0AwkRE88RT5AiFUcO4IWw75oSjE4pGTVNvc5De4yFjMExd7TLq7kDU
gCfaIwHqaqulGX3F1JKphnFoSIl0WYOopzCaSaVSk6KunqqkGqqQqUlWp6EaWS2VYb4lQHE1ZC2V
oIMqpZLiciisAu/DYSRyGpMzgXx2LzUj9LvhVDbI0+jwk9UfIQ9SsQXOZ4PcTRYrHK35PeiEe8u9
EybkPq6pV78YDgffRlQ9bLYaP4NDD5VXVsAoyiBfGDn03JBpuAHXF4ykhtKu7q72wRMGb8o0Zl5r
bG76U0tr6x+1Ou1vqqqqDuCiPcBdwHXApcB64CJge3tb2zt2u5ucngBCVIyMbj8oTQ+iAPgEhK6w
J0wtEFZVQTFVoC5Qm6zwHhiMD0xXMEYu5DNPIgXmEYpAS+OKJtDngn+IZcjOhVC8hVwB8BKoPbgS
ntijoZ8sFnT5KkFXrTl6vGyloCtWC2rt8dJNFwjafn4ObVpZRNecLejCpTnkaUjS5mVHr+Xr+Hp+
fdESQVN6ZGT3eiHYMBTaQHYYsSUMr8O4bDi3Is058FwHF8DcBWXa6cLTBZ2/SJAVyjnn1CK6+AxB
q+cX0DnzBc2ehOel0uRELeTB9W7US54wKvkot2yYF3K3F/NzoKayh8PkiMRA9qDKh4ycSKs2yEVr
dVCdBqF9bC55jVZqxGc+VxDRIEZWGEK9zQ1jhawwZofLh1QQPWKxWPZ+Szc/xeudwH3jxo17VKFQ
PO8P+A91dHa+25BK/b6nt+fpSZP7ZuPzGoCJPFEFBIG5wBbg5uEbbB9+vRbHxcB0oBNIAx3Aqd0d
3b+2mZwIR/AkFClWDNZo9pLd5qcQokDQGaQUipnSvCKqKKkmizMEhpGFEIPQIRC0mCx8NwgQF4TB
Ry9yILecNhRCHrQ9Zu4+Yig2oYBAU5LSnQFacJIsq9SzFhZSS3eQmjpcdPJMI922UdAtF+XQsoUq
WnNqNc04oR7MZpxae8PU3BOiK888agjTphpRQTtRS1ipv7eOzlqQT2cvKqSpA8jNSId2PLev30nL
5tXQxjMm0CmzVBRuSZILoZmfu2mpgJKT1N3npJNO1FJHjyNrGAunHH3f3diBezSTCQbFc3GhhbPD
sF0wZh+4EweijhfEjx1G5obBuBIt2UrfjWe7oXS1ykQTxuSSTWvKyi/gDpMPjmUyIxrZfNmay+uL
kAORojHZ+JlMJrsE+mBCLgM0Af3APGAVcCFwNbBjWK8/w3HF8HW1ODLFLEoBy7Bi2RBOA+YDzDax
suOAC9AD/KVqQAM0D0ya8rBJYyaP1UcehCy3F22LLUAWEwYKQwjACMKICBPG5VNJmQShNUo29Le2
ICwfHuKKgV9AF+GGt9m54oWQ2ONcULgNgrEDegjHyJ6C9seWaic7MDBZnY0Ii2dX4DutZEX17G/K
0FXnTMgaAkeEn50jaM0pheTLpLMG5Ei3Z72W0dTpgYc30sxBZVapF56RSxdB2Xw+d4YCRhPMRprL
Vufgs0Ladq6gdUuQo5t7stdsRBSx8Xgxdnu6M3tPNoLpEwsxvg48C2OFgesQ7SwwZp6HA221Ey2z
Ay2fFVwKRzY2DmcMR0QKRyhNFhTTdsilrt5KY2AEGqTDBDottxWOZYVc4WBOFxwOcvbAGKw6OzUl
mj5GzbFoWEe8gMTerQasADs30/Z9wMnDul2I4wDgG9YlM7mClyE5GmgB5/DN+Ab8mgmGcoCZPl4e
5tDBq1TFfJMpkwcedKCadSMacKiyOcNkggHYrChe7AHyOJAm7D7KGTOBZCodWRHabcEMQiKUHMIR
HhfIdJMDQrBDoDYIxQMeItI1gGMvhIW2NNNFVm49QYS4mnvJjOt6e+pp+UyE3yll5IWCfRBuqi1I
M2ZYaf5sEy2eW5dVFIform4jeeCZHNLPnieyyLSiO0Hrde7CCVmv7p7oop6Jdrpk+VHDWTRLmk0b
809SwXMz2ejBn/X2B7NphBXuZmIMkSEI42vvctDpMybQ7IkCjJ6d/B3ozWF0zjQ/l9FJwY7JFOro
IzsbPOZjx5w9yTYKNnZnFe+Ow0gikAEcxOD0U25+MUmqalFXwbGQYt1OFIZGL5wsRFZEVAeczKE1
Uksq87Fep58BfdQN64fXC9i78wB2cDYKJWAa1i07NJ9LAWYSs+sLrFS2Bv4SK5vB50zk8AXftU7N
BYVrYmf7Yz6rHi2fGxyABy1WhOz2KMIUPN7ipyAmoMdAx+fmoWjCBDwxtDUIiQkO+eh9ERKtbP2Y
vA/ElAceFIIAs4rHdV4YSBSvfWAoA6295IZg/WDEujvUdHKvoMkdpbgPVtOQI0/orcoqfSmKxoHJ
GloyYywtGBDU0IjWCynIGknSvMlQLBCNmdA++Wmwu5zOnA0P7qtAwVlEZ80VNLVHSu3tRlp7Ct+r
kE6aWkfnLRB06vQiSjQ7aOXJgpbNgLKjHlo9C+czc0CieWnWpAk00Iz3k2hRMUZ/Sy8FWyZSuH0y
jBzhHmBD8MGQvakupLoOMvs5HaDwQxp0w7j9MAQmduxIrVXSWioqKqFQAF0XFG63oW6xQb4O1F5m
P5msoPLRpST87k+j4fAc6EM2olBW6vAf625Ev+zsrDfWLyv/+/R7zC3+8Wmhoq4u2NOa/KMT+wis
yE12kEE2eL7Tg9zpjKFvdYFUSsCaJVSMyTi9CGdIG26epBetpCtAei8KSXAGepAjHBlYUBpXFHnP
j70JID7QFlmR/2wQitrqolq9GRW7h9LhAupKCkpHCkhqtlKtVk9mq5pmdI+muZMEzYKBnNAhKObP
p5raWqpDla5SK2hiWlBfRqAVK0MFjtYNbV9vJid7PXtxWwIhuF4BBaioK51Pc/pE1nD6W8fB0FSo
yKU0o+vovVXoWBqTxdnX09oFTWqEcQXKSWOxU63RgiI5gNXWOIwtgjY2SHrkcy2ipSGALiTWirmF
wQpiX4DHS3oU1GY30imMwm6Hl0M29ToDjcsZR143ZIbIwCnW400h2rIhwKHsSGlox702Pc2fM5ML
dU7V/5JVw3/GAti6Sk+ZM21eyGv/0u4MwAg82YExXOhtHUgFdigtgvarMG8C2p8STMpE1Qhv1dUK
8AZyKkSbWFRZRYVl3B4VZK/JK5NRbm4pFeYWUQHCYWFhCU3IL6CCokIqKi2m/ELUFqU4Ly6kspIS
kpSUUXVZBdVU1ZAU7aakrIxU8mKqqy2mamkVGDgpKeV1pFPUIb/WkRwcRB1aMpW0gtTyCpKiRZNL
ZKSpLSVdXTkppNUkr6nBd+TZ7+jBK2iUzDVUo3VGCwuSrLqinKT8zMoaqq6sJll5KWnlhVRaijmU
FlFhUT4VYHyF4FjyCgoovwDnaIcL0Pfnjyuk8UU1mEsVlWLORbimCK1bYRnaxbIaqqyuo6pKGK2i
nhTgUXJGjyKjTouIGoIRgJOB4TjRgrMBsKzZ+WzoJmZO7XwMOuE6IJvf/yf+2Nok82dP3mdBu2JB
WHLD6l0AW6bbg/YPlh0MRMgFMqdo/BjKGZ9LOWMn0JjRuTQex0IouBxGUCuVgzXUktNiIh/WwYNg
zkLwJDd67LDTQREPWD8Hzn0OSsb8FAF7l4p7qTUToc7GFHVkGnBM0uTuZuppTFM3yJD2GLqFZICa
M1H08HgfjN6J+LwX+x8SAQ/FvQ5K+CzU4DdSxKWhgEOD1zrABNgp5nVRM5jAad2t1I+OoKs5TR2t
acrgni0J8AJRcAWxOJ7ZQr1taWpP4xo8u60xTs2pIEVDoG3DHkpG4KUOE9pkO4VdDvKjn/ehRQ5Z
rThHHYW5Wo0gzVSqrDGVgEfJm1AAxY+nHHAEY8ZPgKxyqK6yNOtMnqxcj8qZDcAD0sgG+VtRc8Wj
wc9Xr5jD3cEPXi38MQbDUSBv7dkLBoPB8Bc2kBesdFb+sSHKjzyWQPWtrEVoramkSjBWKpWGrAjd
MZBKDRHskEEej/lRPIIrt6iUZACTpiyvoFp4vBxklawwjyT540lWmgdvKyRZVTFJq/JJVplPtZIS
kmJVslZSCs8tJoUM5BYigKK6lBxqyZBJXTmkVZSTSQkCp7ZiyKauHXJoFUNuQ/2Qx6gb8lv1Q2Z1
9ZBeUQFUDhmUFUMuo3LIZzEMuY1aXKsccgJmRfWQqa5ySK+qQlQoI4cG95ZXYxyFpFaUkay6ENGj
9OhYajBmvC/HGCWVfMR4eewleVSTNy47L1kJxohopanGWgrIOHu9hkJuFyVAUiXAHaTATXiQ7gwo
tmtkMqoGu1lRWop2MEQRbpMha44CI5EgaxR4z2h20fy5U5nPqfyfSAljFi2apsOCym/NFhRAYK94
IBaEfoYZXDeHqygGHAcpUlIuJ5kaawRg3MKYaAwIoyCzaHSkAZVaXwtB6HRH3Gbzx1Gf76NUNPq3
tnT6g/amxvdb0g0fdLc2vj8wseOvbc2pd81G3e8tZv2b/ZO73g2HvG/ZbaY3bFbT61aL8ZBBX3/I
bNK/ptOpX63XKF826NQvWy36V3Qa5Su6etXL9Wrlb9RK5YsqkCYMZV3d8xq18oV6jeolHF/ko0qJ
9xV1z6tx5GvrVcqXtBrVb3GPl416zSsWk/YVvrdGo/wdnvWqQa85ZDEbDpnNhtddTtsbVrPhDSwo
vRuN+N7CZ2/6vc63Bvq6/m1SV+tf2xsb3m9tPDqvpmTyg0Qw+KHf4TjsNps+1ysUQ/VIVVqkLZ8V
3AXYyyjWAjxeH6kNdiqpBrWut1AjVgWz3g8jYDmzvNnxvL5wNgWzLq68/Bzu/7mo/7+26ZSrzPzT
Fi1c5XT6h5is4EFZEZKMJtCsGBQbRAC9cQuWM3mgGp0DGyGw0QELHi6Hi3RqcOUo0iL+wCcOm/XP
UMYrUonkIO7LjNf9wM8BXlzfNQzeacls5e0AM2C3DIMJrZuAG4fBFOj1ALOaTHIdi2vxehvAJMk1
3wK/N4JjP+P3tgL83W/fj1/zs/iZDB4Dj4XHNDI+Pt4K3AncDewaBs+N53gfsCdvwoQn1CrlCxqV
6s1YKPQ3u8n8lUahIIvRRH7INoKW2Qv+QCrTUBrb9+JgMlnprHyT2ZEFO10A0dWG+qC9rfPZ/v4+
XiXMsoD/qr9R6y84v+CarVdZL9q4ftng4MCj0VDqSx9IHxcqWB4AK583jowMhgfLVluLxZlgCItR
qHrlMiy66LRDqUTssMNhf3ns2LG8/sACYoEyFX0+sAZgS14OnAEsA5YCTF6dAjCRxVQnt0OzgJOA
GcCJwzgBRya4GJwfRzAF58ygTQKYNDkW/N53vc/XTAaYVOHvH3s/vv80gJ/Hz2YmdSbAZAyPbWSM
zNidCpwO8FwYPC+eHzN55wJc1TObxwZ0X3VV1dOpZOIdv9v5ZS3WGHQ6M1ZGM9kj5/+Ozj5sNUtm
DYGdjOXOqRhOSV5Q9H604C3N7W8tX3Ha1ssuv7j5xpuuZy7gR0WFUZu3bCneuPni4PIVqy7s7u15
JpmKfWVzWEAIgQlkZhBkBZNBZjNW0RCqOESF0A7ydrK+yYOkUSipKC8feVODClyKgi7071aLhbdL
sQewd/H6AyuXhcmsZBIIAX7AOwwPjm6AyQ3etcyspvkY8CoYs5g6gImtEdTjnBnNEXDVzJsulYDi
GPDrY/Htz/g7/N1j78X3Zow8i5/NYO9jAmZkfDxWhmN4DjyXkXkxU8dMXgxgipeNkI1nNcAOcWt5
WdkTyXj8HZ1Ge0QOvoA7mILcXEqnm6i7pz+bbtkQ2AgYNqsHtQR0AobWAf2YbXakBxdhYfDPM2ae
dMe6DRcM/nTrVp7PP9yOPmrp0qW5mzdvVp23/vzG01esvLJnUv8LkXhqyGhxoPd34cYI5bixBUWI
CRbJYciGrsAAA7DDAIKhGLViI+TkgRPJabZR4ZjRWC/IQ2FY95XNav39+PHjH8AAOMSyt7PnMJXJ
yh1hJbmgYXaLmUhG0TFggoPzHIMJj5EjM5hMeIyAWTIGt0nfBodHBnc2Ixh57/s++657jTyHjyPP
5rEcO7aR8Y6QM8fOh+dXAjATy2weK4cNJgz0Ahw9NgK31sprn7GazYcri4upeOxYqsGxDXKeOGlq
tvB2Y+HOjFRsYkOAXgw4tyI663l1ERyECxyEAauavMDX1Nr5/oxZc35+9vnr5m/cvMm+evVqHtM3
UWLslClTliaTyT+1Y/dQMIqty1CkBTnGitxjwSqh0e4ird2ZXQG0AmYUMGaTg6wISbwTtrm1PRsB
3CgAq8eOouLRguSVFV+ZjUb2fl644EUoDp0JgL2GJ8+D+Ia1unrzZnHv7beJx3Y/IPY/sk88tne3
eP6Xj4k3X3lWvP7yr8S1W7eI7dsuFYc/ekc8+vAu8fBebDXbs0vcefsOccWlPxG33LxVXLzpPHH1
FT8Rt96wRTzy0O3iis3nieuu3ixu2nqFuOeWHWLvvfeIR+//uXjiwQfwrB3irlu3i/vu2iHuuOVa
se8X94jH99wv9v38HvHA3XeInduvETu2Xiau3LxO3H7z1WLv/TvE9ms2ivXnrxS333qduOyS9Tje
IHbefK147pnHxM6bfioOf/g2fjG0W2y5ZJ3Yt+du8Ze3fydeeX6/OPDYXvH43j3iKfyyau/P7xU7
r+MsmFXAsWxtGV5zNOLoxwt1HCkvL8jP3w1C7oOinNFUPkqQuqIsW3N1906iBkQGF9KBBbowmeGk
vKwPcknH9Rf0xa9NNjgxajVd1kA81NTSQqlUirCV/bJh+WejQ+HkyZM7e3p6bnM4HB/rwISZ0Mp5
AjHsnMGeNqzyBbDq5wP8WOp1Y7nTCUOwwQBiWCVrxW8MMo3g/H0BkDWlVDoGjJxc9oXFZHwO9+Z8
x4sbHPY4fPMaBXtJlo5evWyp+PXBp8W2K64Q/78ZwabzzhOPP7RX3HbjDWLRfF6vyxoERxeOFLwO
wKmRa5F1hQUF9/icjvfKxudQZW4OafGbjjiW4FtaIHv84MeLJWUbHNMNVtaH1tuHFtwPfQWhnzB0
GIimwTR6kbr1WNsxDeHHLC8PDAxw7cLRN1tEVgxb3yAu2O7xeN4pLi4eKgKDpwHL54FlBUFWJMG/
x/Bjhyj2qkXxgAjWs9PoayMwChtIkDq0e2Xl5UPYOvZRvVr9BO7J+Y2LN85/vBA1slgx6sEH7hcb
IITjRvCfRnDrTTvE/idZbFlj4AjJkYEdh2um1ePGjd0ZDgZ/L5PJv6yorCQDaGUvPD0FhSeQjsNg
FaP43UEsgW19+BFQHHsOfdgQY0Mkr0JNkZ+fj91MdZ/EYrEnCwoKuFjl1WEuHL9ZSubCi6vhtajc
dxoMhhftNtuHVVWVR3Lx44fxY8dTZUVldhuWHCSGXIJtUoAKRZ8a28YMmnryBwKf+ny+Qzk5OdzW
8Ro2F30c2tj7s7uKX3j2lwidvxTHjWC7+HYkGDGCF5/7FRsCpwqOlrzYw4UpR1LuLq7F3oEDSN1/
RaF9pF5WR0rQ12oouRa7suRSbM8D/yLFsTC/MLv2UFRYyL8E+8ztdv+xoqKCuzJOA9y5cCHOaTlL
NXN45hUorlq5JToT4J75XqlUetDlcr3RmMm8j+Nhj8f9pdNpG7KYDF87rJZPk+HwYZfN9q5SqXyp
sLDwQXyH+3Fuf7jA4eVoLn7Y0kYdePJxcdwI/rMm+D4jePbgAbF3z27WDRsCR1CuFRIAt8mbgNth
DE/XazSvJ8ORD3xO58c2s+kri9k05PW6v3Y6nZ+Ew+EPGxoa3kXq+E1eXt4+fIfbUG5J2QB4YxB3
OWxk2UUn/seVLacFbrn4YezFK4EtwA2IDvcghDyCHv/5RCLxKkLKq0ql4hmkjb3w/DtwDef+cwEO
//x9fkAJwFY26radO8VxI/j7wvCfMYItm7M/SuX0wI7KG0a4o2IH43C+edSoUTfk5+XdV1FR/rjL
5fxNIhF/LR6PvSyRSPbn5ubuHj16NBNW7NDrAOZaOLXwPdjpR/YXftMhjIQffhiHbzYGDhdcpbJi
mbThG3Ge5/1rrHS2yLOABQBHEO71udXhEPNN8Yfz43//fQmMFI1cyHFLyVGbFcq6YQKKeZfLh3Vz
JY7s8RzRWfGsG/Z8B8AFJxeeHJ3/MWeADzkysBK5MOEvcXHCD00B3QCzb1w/jGw9c+Kc8xZvO2Pr
4mrzR7FU+N7xv++XAOuGOQk2Bt4/wARVAGDeZSLACme2swWIAPZh3bBjcuj/XuV/16PZUlihnCrY
eljJbBSscGbSuOLnFMI3/2/vUjmu/R8kgRHdsLOyQbCSuW5g3XCk4KqfnZid8r/UzX8AmS7kWSaB
UYwAAAAASUVORK5CYII=')
    #endregion
    $picturebox1.Location = '12, 282'
    $picturebox1.Name = "picturebox1"
    $picturebox1.Size = '130, 41'
    $picturebox1.TabIndex = 17
    $picturebox1.TabStop = $False
    #
    # buttonHistory
    #
    $buttonHistory.Location = '49, 51'
    $buttonHistory.Name = "buttonHistory"
    $buttonHistory.Size = '75, 31'
    $buttonHistory.TabIndex = 18
    $buttonHistory.Text = "History"
    $buttonHistory.UseVisualStyleBackColor = $True
    $buttonHistory.add_Click($buttonHistory_Click)
    #
    # labelLOCKED
    #
    $labelLOCKED.BackColor = 'Transparent'
    $labelLOCKED.Font = "Tahoma, 12pt, style=Bold"
    $labelLOCKED.ForeColor = 'Crimson'
    $labelLOCKED.Location = '954, 105'
    $labelLOCKED.Name = "labelLOCKED"
    $labelLOCKED.Size = '135, 23'
    $labelLOCKED.TabIndex = 16
    $labelLOCKED.TextAlign = 'BottomCenter'
    #
    # labelUserID
    #
    $labelUserID.BackColor = 'Transparent'
    $labelUserID.Font = "Tahoma, 12pt, style=Bold"
    $labelUserID.ForeColor = 'MediumBlue'
    $labelUserID.Location = '946, 276'
    $labelUserID.Name = "labelUserID"
    $labelUserID.Size = '149, 23'
    $labelUserID.TabIndex = 15
    $labelUserID.Text = "UserID"
    $labelUserID.TextAlign = 'MiddleCenter'
    #
    # labelLocation
    #
    $labelLocation.BackColor = 'Transparent'
    $labelLocation.Font = "Tahoma, 12pt, style=Bold"
    $labelLocation.ForeColor = 'MediumBlue'
    $labelLocation.Location = '615, 276'
    $labelLocation.Name = "labelLocation"
    $labelLocation.Size = '305, 23'
    $labelLocation.TabIndex = 14
    $labelLocation.Text = "Location"
    $labelLocation.TextAlign = 'MiddleLeft'
    #
    # statusstrip1
    #
    [void]$statusstrip1.Items.Add($toolstripstatuslabel1)
    $statusstrip1.Location = '0, 684'
    $statusstrip1.Name = "statusstrip1"
    $statusstrip1.Size = '1100, 22'
    $statusstrip1.SizingGrip = $False
    $statusstrip1.TabIndex = 12
    $statusstrip1.Text = "statusstrip1"
    #
    # buttonDisconnect
    #
    $buttonDisconnect.Location = '933, 51'
    $buttonDisconnect.Name = "buttonDisconnect"
    $buttonDisconnect.Size = '75, 31'
    $buttonDisconnect.TabIndex = 11
    $buttonDisconnect.Text = "Disconnect"
    $buttonDisconnect.UseVisualStyleBackColor = $True
    $buttonDisconnect.add_Click($buttonDisconnect_Click)
    #
    # labelUserName
    #
    $labelUserName.BackColor = 'Transparent'
    $labelUserName.Font = "Tahoma, 9.75pt, style=Bold"
    $labelUserName.ForeColor = 'MediumBlue'
    $labelUserName.Location = '923, 299'
    $labelUserName.Name = "labelUserName"
    $labelUserName.Size = '186, 23'
    $labelUserName.TabIndex = 10
    $labelUserName.Text = "Name"
    $labelUserName.TextAlign = 'MiddleCenter'
    #
    # buttonStartJob
    #
    $buttonStartJob.ImageList = $imagelistButtonBusyAnimation
    $buttonStartJob.Location = '333, 51'
    $buttonStartJob.Name = "buttonStartJob"
    $buttonStartJob.Size = '75, 31'
    $buttonStartJob.TabIndex = 0
    $buttonStartJob.Text = "Connect"
    $buttonStartJob.TextImageRelation = 'ImageBeforeText'
    $buttonStartJob.UseVisualStyleBackColor = $True
    $buttonStartJob.add_Click($buttonStartJob_Click)
    #
    # picturebox3
    #
    $picturebox3.BackColor = 'Black'
    $picturebox3.BorderStyle = 'Fixed3D'
    $picturebox3.Location = '948, 130'
    $picturebox3.Name = "picturebox3"
    $picturebox3.Size = '144, 144'
    $picturebox3.SizeMode = 'Zoom'
    $picturebox3.TabIndex = 7
    $picturebox3.TabStop = $False
    #
    # buttonClose
    #
    $buttonClose.Location = '1014, 51'
    $buttonClose.Name = "buttonClose"
    $buttonClose.Size = '75, 31'
    $buttonClose.TabIndex = 6
    $buttonClose.Text = "Close"
    $buttonClose.UseVisualStyleBackColor = $True
    $buttonClose.add_Click($buttonClose_Click)
    #
    # picturebox2
    #
    $picturebox2.BackColor = 'DarkGray'
    $picturebox2.BorderStyle = 'FixedSingle'
    $picturebox2.Location = '12, 51'
    $picturebox2.Name = "picturebox2"
    $picturebox2.Size = '31, 31'
    $picturebox2.TabIndex = 4
    $picturebox2.TabStop = $False
    #
    # textbox1
    #
    $textbox1.AutoCompleteMode = 'Suggest'
    $textbox1.AutoCompleteSource = 'CustomSource'
    $textbox1.BackColor = 'Info'
    $textbox1.Font = "Courier New, 15.75pt, style=Bold"
    $textbox1.Location = '130, 51'
    $textbox1.Name = "textbox1"
    $textbox1.Size = '197, 31'
    $textbox1.TabIndex = 2
    $textbox1.Text = "Barcode"
    #
    # tabcontrol1
    #
    $tabcontrol1.Controls.Add($tabpage1)
    $tabcontrol1.Controls.Add($tabpage2)
    $tabcontrol1.Controls.Add($tabpage4)
    $tabcontrol1.Controls.Add($tabpage3)
    $tabcontrol1.Location = '12, 109'
    $tabcontrol1.Name = "tabcontrol1"
    $tabcontrol1.SelectedIndex = 0
    $tabcontrol1.Size = '928, 167'
    $tabcontrol1.TabIndex = 1
    #
    # tabpage1
    #
    $tabpage1.Controls.Add($buttonLogOff)
    $tabpage1.Controls.Add($buttonMonitors)
    $tabpage1.Controls.Add($textbox2)
    $tabpage1.Controls.Add($labelUpTime)
    $tabpage1.Controls.Add($buttonIPConfig)
    $tabpage1.Controls.Add($buttonRDP)
    $tabpage1.Controls.Add($buttonOU)
    $tabpage1.Controls.Add($buttonProcesses)
    $tabpage1.Controls.Add($buttonC)
    $tabpage1.Controls.Add($buttonWarranty)
    $tabpage1.Controls.Add($buttonWakeUp)
    $tabpage1.Controls.Add($buttonShutDown)
    $tabpage1.Controls.Add($buttonReboot)
    $tabpage1.Controls.Add($buttonGPUpdate)
    $tabpage1.Controls.Add($label1)
    $tabpage1.Controls.Add($labelMachineModelOSRamSer)
    $tabpage1.Location = '4, 22'
    $tabpage1.Name = "tabpage1"
    $tabpage1.Padding = '3, 3, 3, 3'
    $tabpage1.Size = '920, 141'
    $tabpage1.TabIndex = 0
    $tabpage1.Text = "Machine"
    $tabpage1.UseVisualStyleBackColor = $True
    #
    # buttonLogOff
    #
    $buttonLogOff.Location = '418, 16'
    $buttonLogOff.Name = "buttonLogOff"
    $buttonLogOff.Size = '75, 23'
    $buttonLogOff.TabIndex = 19
    $buttonLogOff.Text = "Log Off"
    $buttonLogOff.UseVisualStyleBackColor = $True
    $buttonLogOff.add_Click($buttonLogOff_Click)
    #
    # buttonMonitors
    #
    $buttonMonitors.Location = '95, 45'
    $buttonMonitors.Name = "buttonMonitors"
    $buttonMonitors.Size = '75, 23'
    $buttonMonitors.TabIndex = 18
    $buttonMonitors.Text = "Monitor(s)"
    $buttonMonitors.UseVisualStyleBackColor = $True
    $buttonMonitors.add_Click($buttonMonitors_Click)
    #
    # textbox2
    #
    $textbox2.BackColor = 'Info'
    $textbox2.Location = '14, 106'
    $textbox2.Name = "textbox2"
    $textbox2.Size = '74, 20'
    $textbox2.TabIndex = 17
    $textbox2.Text = "ServiceTag"
    $textbox2.TextAlign = 'Right'
    #
    # labelUpTime
    #
    $labelUpTime.ForeColor = 'MediumBlue'
    $labelUpTime.Location = '599, 106'
    $labelUpTime.Name = "labelUpTime"
    $labelUpTime.Size = '315, 15'
    $labelUpTime.TabIndex = 16
    #
    # buttonIPConfig
    #
    $buttonIPConfig.Location = '175, 103'
    $buttonIPConfig.Name = "buttonIPConfig"
    $buttonIPConfig.Size = '75, 23'
    $buttonIPConfig.TabIndex = 15
    $buttonIPConfig.Text = "IPConfig"
    $buttonIPConfig.UseVisualStyleBackColor = $True
    $buttonIPConfig.add_Click($buttonIPConfig_Click)
    #
    # buttonRDP
    #
    $buttonRDP.Location = '176, 17'
    $buttonRDP.Name = "buttonRDP"
    $buttonRDP.Size = '75, 23'
    $buttonRDP.TabIndex = 14
    $buttonRDP.Text = "RDP"
    $buttonRDP.UseVisualStyleBackColor = $True
    $buttonRDP.add_Click($buttonRDP_Click)
    #
    # buttonOU
    #
    $buttonOU.Location = '95, 74'
    $buttonOU.Name = "buttonOU"
    $buttonOU.Size = '75, 23'
    $buttonOU.TabIndex = 13
    $buttonOU.Text = "OU"
    $buttonOU.UseVisualStyleBackColor = $True
    $buttonOU.add_Click($buttonOU_Click)
    #
    # buttonProcesses
    #
    $buttonProcesses.Location = '176, 75'
    $buttonProcesses.Name = "buttonProcesses"
    $buttonProcesses.Size = '75, 23'
    $buttonProcesses.TabIndex = 10
    $buttonProcesses.Text = "Processes"
    $buttonProcesses.UseVisualStyleBackColor = $True
    $buttonProcesses.add_Click($buttonProcesses_Click)
    #
    # buttonC
    #
    $buttonC.Location = '175, 46'
    $buttonC.Name = "buttonC"
    $buttonC.Size = '75, 23'
    $buttonC.TabIndex = 8
    $buttonC.Text = "C:"
    $buttonC.UseVisualStyleBackColor = $True
    $buttonC.add_Click($buttonC_Click)
    #
    # buttonWarranty
    #
    $buttonWarranty.Location = '94, 103'
    $buttonWarranty.Name = "buttonWarranty"
    $buttonWarranty.Size = '75, 23'
    $buttonWarranty.TabIndex = 7
    $buttonWarranty.Text = "Warranty"
    $buttonWarranty.UseVisualStyleBackColor = $True
    $buttonWarranty.add_Click($buttonWarranty_Click)
    #
    # buttonWakeUp
    #
    $buttonWakeUp.Location = '418, 104'
    $buttonWakeUp.Name = "buttonWakeUp"
    $buttonWakeUp.Size = '75, 23'
    $buttonWakeUp.TabIndex = 6
    $buttonWakeUp.Text = "WakeUp"
    $buttonWakeUp.UseVisualStyleBackColor = $True
    $buttonWakeUp.add_Click($buttonWakeUp_Click)
    $buttonWakeUp.add_MouseHover($ShowHelp)
    #
    # buttonShutDown
    #
    $buttonShutDown.Location = '418, 74'
    $buttonShutDown.Name = "buttonShutDown"
    $buttonShutDown.Size = '75, 23'
    $buttonShutDown.TabIndex = 5
    $buttonShutDown.Text = "ShutDown"
    $buttonShutDown.UseVisualStyleBackColor = $True
    $buttonShutDown.add_Click($buttonShutDown_Click)
    #
    # buttonReboot
    #
    $buttonReboot.Location = '418, 45'
    $buttonReboot.Name = "buttonReboot"
    $buttonReboot.Size = '75, 23'
    $buttonReboot.TabIndex = 4
    $buttonReboot.Text = "Reboot"
    $buttonReboot.UseVisualStyleBackColor = $True
    $buttonReboot.add_Click($buttonReboot_Click)
    #
    # buttonGPUpdate
    #
    $buttonGPUpdate.Location = '95, 16'
    $buttonGPUpdate.Name = "buttonGPUpdate"
    $buttonGPUpdate.Size = '75, 23'
    $buttonGPUpdate.TabIndex = 3
    $buttonGPUpdate.Text = "GPUpdate"
    $buttonGPUpdate.UseVisualStyleBackColor = $True
    $buttonGPUpdate.add_Click($buttonGPUpdate_Click)
    #
    # label1
    #
    $label1.AutoEllipsis = $True
    $label1.ForeColor = 'MediumBlue'
    $label1.Location = '599, 6'
    $label1.Name = "label1"
    $label1.Size = '456, 92'
    $label1.TabIndex = 2
    #
    # labelMachineModelOSRamSer
    #
    $labelMachineModelOSRamSer.Location = '527, 6'
    $labelMachineModelOSRamSer.Name = "labelMachineModelOSRamSer"
    $labelMachineModelOSRamSer.Size = '66, 128'
    $labelMachineModelOSRamSer.TabIndex = 1
    $labelMachineModelOSRamSer.Text = "Machine
Model
OS
Ram
ServiceTag
IPv4
BuildDate

UpTime
"
    $labelMachineModelOSRamSer.TextAlign = 'TopRight'
    #
    # tabpage2
    #
    $tabpage2.Controls.Add($buttonAPPV)
    $tabpage2.Controls.Add($FilteredSCCM)
    $tabpage2.Controls.Add($buttonWin8Apps)
    $tabpage2.Controls.Add($InstalledMSI)
    $tabpage2.Controls.Add($labelLIVE)
    $tabpage2.Controls.Add($labelSCCMLive)
    $tabpage2.Controls.Add($AddRemovePrograms)
    $tabpage2.Controls.Add($FilteredLive)
    $tabpage2.Controls.Add($SCCM_2007_SW3)
    $tabpage2.Location = '4, 22'
    $tabpage2.Name = "tabpage2"
    $tabpage2.Padding = '3, 3, 3, 3'
    $tabpage2.Size = '920, 141'
    $tabpage2.TabIndex = 1
    $tabpage2.Text = "Software"
    $tabpage2.UseVisualStyleBackColor = $True
    #
    # buttonAPPV
    #
    $buttonAPPV.Location = '578, 71'
    $buttonAPPV.Name = "buttonAPPV"
    $buttonAPPV.Size = '75, 23'
    $buttonAPPV.TabIndex = 33
    $buttonAPPV.Text = "APP-V"
    $buttonAPPV.UseVisualStyleBackColor = $True
    $buttonAPPV.add_Click($buttonAPPV_Click)
    $buttonAPPV.add_MouseHover($ShowHelp)
    #
    # FilteredSCCM
    #
    $FilteredSCCM.Location = '439, 42'
    $FilteredSCCM.Name = "FilteredSCCM"
    $FilteredSCCM.Size = '75, 23'
    $FilteredSCCM.TabIndex = 31
    $FilteredSCCM.Text = "Filtered"
    $FilteredSCCM.UseVisualStyleBackColor = $True
    $FilteredSCCM.add_Click($FilteredSCCM_Click)
    #
    # buttonWin8Apps
    #
    $buttonWin8Apps.Location = '578, 102'
    $buttonWin8Apps.Name = "buttonWin8Apps"
    $buttonWin8Apps.Size = '75, 23'
    $buttonWin8Apps.TabIndex = 30
    $buttonWin8Apps.Text = "Win8 Apps"
    $buttonWin8Apps.UseVisualStyleBackColor = $True
    $buttonWin8Apps.add_Click($buttonWin8Apps_Click)
    #
    # InstalledMSI
    #
    $InstalledMSI.Location = '709, 71'
    $InstalledMSI.Name = "InstalledMSI"
    $InstalledMSI.Size = '75, 23'
    $InstalledMSI.TabIndex = 27
    $InstalledMSI.Text = "MSI"
    $InstalledMSI.UseVisualStyleBackColor = $True
    $InstalledMSI.add_Click($InstalledMSI_Click)
    #
    # labelLIVE
    #
    $labelLIVE.Location = '709, 16'
    $labelLIVE.Name = "labelLIVE"
    $labelLIVE.Size = '75, 23'
    $labelLIVE.TabIndex = 22
    $labelLIVE.Text = "LIVE"
    $labelLIVE.TextAlign = 'MiddleCenter'
    #
    # labelSCCMLive
    #
    $labelSCCMLive.Location = '439, 16'
    $labelSCCMLive.Name = "labelSCCMLive"
    $labelSCCMLive.Size = '76, 23'
    $labelSCCMLive.TabIndex = 18
    $labelSCCMLive.Text = "SCCM"
    $labelSCCMLive.TextAlign = 'MiddleCenter'
    #
    # AddRemovePrograms
    #
    $AddRemovePrograms.Location = '709, 102'
    $AddRemovePrograms.Name = "AddRemovePrograms"
    $AddRemovePrograms.Size = '75, 23'
    $AddRemovePrograms.TabIndex = 17
    $AddRemovePrograms.Text = "All Apps"
    $AddRemovePrograms.UseVisualStyleBackColor = $True
    $AddRemovePrograms.add_Click($AddRemovePrograms_Click)
    #
    # FilteredLive
    #
    $FilteredLive.Location = '709, 42'
    $FilteredLive.Name = "FilteredLive"
    $FilteredLive.Size = '75, 23'
    $FilteredLive.TabIndex = 16
    $FilteredLive.Text = "Filtered"
    $FilteredLive.UseVisualStyleBackColor = $True
    $FilteredLive.add_Click($FilteredLive_Click)
    #
    # SCCM_2007_SW3
    #
    $SCCM_2007_SW3.Location = '439, 102'
    $SCCM_2007_SW3.Name = "SCCM_2007_SW3"
    $SCCM_2007_SW3.Size = '75, 23'
    $SCCM_2007_SW3.TabIndex = 15
    $SCCM_2007_SW3.Text = "All Apps"
    $SCCM_2007_SW3.UseVisualStyleBackColor = $True
    $SCCM_2007_SW3.add_Click($SCCM_2007_SW3_Click)
    $SCCM_2007_SW3.add_MouseHover($ShowHelp)
    #
    # tabpage4
    #
    $tabpage4.Controls.Add($buttonSCCM)
    $tabpage4.Controls.Add($buttonMSTSC)
    $tabpage4.Controls.Add($labelLocalApps)
    $tabpage4.Controls.Add($labelRemoteApps)
    $tabpage4.Controls.Add($buttonSysInfo)
    $tabpage4.Controls.Add($buttonManage)
    $tabpage4.Controls.Add($buttonPowerShell)
    $tabpage4.Controls.Add($buttonPSRemote)
    $tabpage4.Controls.Add($buttonRegEdit)
    $tabpage4.Controls.Add($buttonCMD)
    $tabpage4.Location = '4, 22'
    $tabpage4.Name = "tabpage4"
    $tabpage4.Padding = '3, 3, 3, 3'
    $tabpage4.Size = '920, 141'
    $tabpage4.TabIndex = 3
    $tabpage4.Text = "App Launch"
    $tabpage4.UseVisualStyleBackColor = $True
    #
    # buttonSCCM
    #
    $buttonSCCM.Location = '438, 72'
    $buttonSCCM.Name = "buttonSCCM"
    $buttonSCCM.Size = '75, 23'
    $buttonSCCM.TabIndex = 17
    $buttonSCCM.Text = "SCCM"
    $buttonSCCM.UseVisualStyleBackColor = $True
    $buttonSCCM.add_Click($buttonSCCM_Click)
    $buttonSCCM.add_MouseHover($ShowHelp)
    #
    # buttonMSTSC
    #
    $buttonMSTSC.Location = '438, 101'
    $buttonMSTSC.Name = "buttonMSTSC"
    $buttonMSTSC.Size = '75, 23'
    $buttonMSTSC.TabIndex = 16
    $buttonMSTSC.Text = "MSTSC"
    $buttonMSTSC.UseVisualStyleBackColor = $True
    $buttonMSTSC.add_Click($buttonMSTSC_Click)
    #
    # labelLocalApps
    #
    $labelLocalApps.Location = '356, 19'
    $labelLocalApps.Name = "labelLocalApps"
    $labelLocalApps.Size = '93, 20'
    $labelLocalApps.TabIndex = 15
    $labelLocalApps.Text = "Local Apps"
    #
    # labelRemoteApps
    #
    $labelRemoteApps.Location = '27, 19'
    $labelRemoteApps.Name = "labelRemoteApps"
    $labelRemoteApps.Size = '93, 20'
    $labelRemoteApps.TabIndex = 14
    $labelRemoteApps.Text = "Remote Apps"
    #
    # buttonSysInfo
    #
    $buttonSysInfo.Location = '27, 103'
    $buttonSysInfo.Name = "buttonSysInfo"
    $buttonSysInfo.Size = '75, 23'
    $buttonSysInfo.TabIndex = 13
    $buttonSysInfo.Text = "SysInfo"
    $buttonSysInfo.UseVisualStyleBackColor = $True
    $buttonSysInfo.add_Click($buttonSysInfo_Click)
    #
    # buttonManage
    #
    $buttonManage.Location = '27, 74'
    $buttonManage.Name = "buttonManage"
    $buttonManage.Size = '75, 23'
    $buttonManage.TabIndex = 12
    $buttonManage.Text = "Manage"
    $buttonManage.UseVisualStyleBackColor = $True
    $buttonManage.add_Click($buttonManage_Click)
    #
    # buttonPowerShell
    #
    $buttonPowerShell.Location = '356, 72'
    $buttonPowerShell.Name = "buttonPowerShell"
    $buttonPowerShell.Size = '75, 23'
    $buttonPowerShell.TabIndex = 3
    $buttonPowerShell.Text = "Powershell"
    $buttonPowerShell.UseVisualStyleBackColor = $True
    $buttonPowerShell.add_Click($buttonPowerShell_Click)
    #
    # buttonPSRemote
    #
    $buttonPSRemote.Location = '27, 45'
    $buttonPSRemote.Name = "buttonPSRemote"
    $buttonPSRemote.Size = '75, 23'
    $buttonPSRemote.TabIndex = 2
    $buttonPSRemote.Text = "PS Remote"
    $buttonPSRemote.UseVisualStyleBackColor = $True
    $buttonPSRemote.add_Click($buttonPSRemote_Click)
    #
    # buttonRegEdit
    #
    $buttonRegEdit.Location = '356, 101'
    $buttonRegEdit.Name = "buttonRegEdit"
    $buttonRegEdit.Size = '75, 23'
    $buttonRegEdit.TabIndex = 1
    $buttonRegEdit.Text = "RegEdit"
    $buttonRegEdit.UseVisualStyleBackColor = $True
    $buttonRegEdit.add_Click($buttonRegEdit_Click)
    #
    # buttonCMD
    #
    $buttonCMD.Location = '356, 43'
    $buttonCMD.Name = "buttonCMD"
    $buttonCMD.Size = '75, 23'
    $buttonCMD.TabIndex = 0
    $buttonCMD.Text = "CMD"
    $buttonCMD.UseVisualStyleBackColor = $True
    $buttonCMD.add_Click($buttonCMD_Click)
    #
    # tabpage3
    #
    $tabpage3.Controls.Add($buttonSCCMU2M)
    $tabpage3.Controls.Add($buttonProfileSvr)
    $tabpage3.Controls.Add($buttonHome)
    $tabpage3.Controls.Add($buttonProfile)
    $tabpage3.Controls.Add($buttonMySite)
    $tabpage3.Controls.Add($button1)
    $tabpage3.Controls.Add($buttonEmail)
    $tabpage3.Controls.Add($label2)
    $tabpage3.Controls.Add($labelUserIDNameEmailPhone)
    $tabpage3.Controls.Add($buttonRA)
    $tabpage3.Location = '4, 22'
    $tabpage3.Name = "tabpage3"
    $tabpage3.Padding = '3, 3, 3, 3'
    $tabpage3.Size = '920, 141'
    $tabpage3.TabIndex = 2
    $tabpage3.Text = " User "
    $tabpage3.UseVisualStyleBackColor = $True
    #
    # buttonSCCMU2M
    #
    $buttonSCCMU2M.Location = '220, 74'
    $buttonSCCMU2M.Name = "buttonSCCMU2M"
    $buttonSCCMU2M.Size = '75, 23'
    $buttonSCCMU2M.TabIndex = 24
    $buttonSCCMU2M.Text = "SCCM U2M"
    $buttonSCCMU2M.UseVisualStyleBackColor = $True
    $buttonSCCMU2M.add_Click($buttonSCCMU2M_Click)
    $buttonSCCMU2M.add_MouseHover($ShowHelp)
    #
    # buttonProfileSvr
    #
    $buttonProfileSvr.Location = '220, 103'
    $buttonProfileSvr.Name = "buttonProfileSvr"
    $buttonProfileSvr.Size = '75, 23'
    $buttonProfileSvr.TabIndex = 23
    $buttonProfileSvr.Text = "Profile Svr"
    $buttonProfileSvr.UseVisualStyleBackColor = $True
    $buttonProfileSvr.add_Click($buttonProfileSvr_Click)
    $buttonProfileSvr.add_MouseHover($ShowHelp)
    #
    # buttonHome
    #
    $buttonHome.Location = '337, 74'
    $buttonHome.Name = "buttonHome"
    $buttonHome.Size = '75, 23'
    $buttonHome.TabIndex = 22
    $buttonHome.Text = "Home"
    $buttonHome.UseVisualStyleBackColor = $True
    $buttonHome.add_Click($buttonHome_Click)
    #
    # buttonProfile
    #
    $buttonProfile.Location = '337, 103'
    $buttonProfile.Name = "buttonProfile"
    $buttonProfile.Size = '75, 23'
    $buttonProfile.TabIndex = 21
    $buttonProfile.Text = "Profile"
    $buttonProfile.UseVisualStyleBackColor = $True
    $buttonProfile.add_Click($buttonProfile_Click)
    #
    # buttonMySite
    #
    $buttonMySite.Location = '418, 103'
    $buttonMySite.Name = "buttonMySite"
    $buttonMySite.Size = '75, 23'
    $buttonMySite.TabIndex = 7
    $buttonMySite.Text = "MySite"
    $buttonMySite.UseVisualStyleBackColor = $True
    $buttonMySite.add_Click($buttonMySite_Click)
    #
    # button1
    #
    $button1.Location = '418, 74'
    $button1.Name = "button1"
    $button1.Size = '75, 23'
    $button1.TabIndex = 6
    $button1.Text = "RDP"
    $button1.UseVisualStyleBackColor = $True
    $button1.add_Click($button1_Click)
    #
    # buttonEmail
    #
    $buttonEmail.Location = '418, 45'
    $buttonEmail.Name = "buttonEmail"
    $buttonEmail.Size = '75, 23'
    $buttonEmail.TabIndex = 5
    $buttonEmail.Text = "EMAIL"
    $buttonEmail.UseVisualStyleBackColor = $True
    $buttonEmail.add_Click($buttonEmail_Click)
    $buttonEmail.add_MouseHover($ShowHelp)
    #
    # label2
    #
    $label2.ForeColor = 'MediumBlue'
    $label2.Location = '599, 6'
    $label2.Name = "label2"
    $label2.Size = '315, 128'
    $label2.TabIndex = 4
    $label2.TextAlign = 'MiddleLeft'
    #
    # labelUserIDNameEmailPhone
    #
    $labelUserIDNameEmailPhone.Location = '527, 6'
    $labelUserIDNameEmailPhone.Name = "labelUserIDNameEmailPhone"
    $labelUserIDNameEmailPhone.Size = '66, 128'
    $labelUserIDNameEmailPhone.TabIndex = 3
    $labelUserIDNameEmailPhone.Text = "UserID
Name
Email

Phone
Mobile"
    $labelUserIDNameEmailPhone.TextAlign = 'MiddleRight'
    #
    # buttonRA
    #
    $buttonRA.Location = '418, 16'
    $buttonRA.Name = "buttonRA"
    $buttonRA.Size = '75, 23'
    $buttonRA.TabIndex = 0
    $buttonRA.Text = "RA"
    $buttonRA.UseVisualStyleBackColor = $True
    $buttonRA.add_Click($buttonRA_Click)
    #
    # menustrip1
    #
    [void]$menustrip1.Items.Add($optionsToolStripMenuItem)
    [void]$menustrip1.Items.Add($toolstripmenuitem1)
    [void]$menustrip1.Items.Add($fileToolStripMenuItem)
    [void]$menustrip1.Items.Add($helpToolStripMenuItem)
    $menustrip1.Location = '0, 0'
    $menustrip1.Name = "menustrip1"
    $menustrip1.Size = '1100, 24'
    $menustrip1.TabIndex = 0
    $menustrip1.Text = "menustrip1"
    #
    # fileToolStripMenuItem
    #
    [void]$fileToolStripMenuItem.DropDownItems.Add($addQLDPhoneFilterToolStripMenuItem)
    [void]$fileToolStripMenuItem.DropDownItems.Add($clearHistoryToolStripMenuItem)
    [void]$fileToolStripMenuItem.DropDownItems.Add($setHistoryLimitToolStripMenuItem)
    [void]$fileToolStripMenuItem.DropDownItems.Add($checkForUpdatesToolStripMenuItem)
    [void]$fileToolStripMenuItem.DropDownItems.Add($setProfileServerToolStripMenuItem)
    [void]$fileToolStripMenuItem.DropDownItems.Add($editSoftwareFilterToolStripMenuItem)
    $fileToolStripMenuItem.Name = "fileToolStripMenuItem"
    $fileToolStripMenuItem.Size = '61, 20'
    $fileToolStripMenuItem.Text = "Options"
    #
    # helpToolStripMenuItem
    #
    [void]$helpToolStripMenuItem.DropDownItems.Add($aboutToolStripMenuItem)
    [void]$helpToolStripMenuItem.DropDownItems.Add($licenceToolStripMenuItem)
    $helpToolStripMenuItem.Name = "helpToolStripMenuItem"
    $helpToolStripMenuItem.Size = '44, 20'
    $helpToolStripMenuItem.Text = "Help"
    #
    # aboutToolStripMenuItem
    #
    $aboutToolStripMenuItem.Name = "aboutToolStripMenuItem"
    $aboutToolStripMenuItem.Size = '107, 22'
    $aboutToolStripMenuItem.Text = "About"
    $aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
    #
    # imagelistButtonBusyAnimation
    #
    $Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
    #region Binary Data
    $System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAATABAQEwAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/AxwB/wMcAf8DwgH/MAADwgH/AzwB/wOCAf8DwgH/sAADHAH/AwAB/wMAAf8DHAH/
MAADggH/AxwB/wMcAf8DPAH/gAADwgH/AxwB/wMcAf8DwgH/IAADHAH/AwAB/wMAAf8DHAH/A8IB
/wM8Af8DggH/A8IB/xAAA8IB/wMcAf8DHAH/A8IB/wM8Af8DHAH/AxwB/wM8Af8EAAOSAf8DkgH/
A8IB/3AAAxwB/wMAAf8DAAH/AxwB/yAAA8IB/wMcAf8DHAH/A8IB/wOCAf8DHAH/AxwB/wOCAf8Q
AAMcAf8DAAH/AwAB/wMcAf8DwgH/AzwB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAxwB/wMA
Af8DAAH/AxwB/zAAAzwB/wMcAf8DHAH/AzwB/xAAAxwB/wMAAf8DAAH/AxwB/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wM8Af8DggH/A8IB/xAAA8IB/wMcAf8DHAH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wOCAf8DPAH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAMcAf8DAAH/AwAB/wMcAf8wAAM8Af8DHAH/
AxwB/wM8Af8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAMcAf8DAAH/AwAB
/wMcAf8wAAOCAf8DHAH/AxwB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DHAH/AxwB/wPCAf8wAAPCAf8DggH/AzwB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DPAH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAAM8Af8DHAH/AxwB/wM8Af8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wMcAf8DHAH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DPAH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
PAH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AxwB/wMcAf8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADPAH/AxwB/wMcAf8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/AzwB/wM8Af8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DHAH/AxwB/wPCAf8wAAPCAf8DPAH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADHAH/AwAB/wMAAf8DHAH/MAADggH/AxwB/wMc
Af8DPAH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADHAH/AwAB/wMAAf8D
HAH/MAADPAH/AxwB/wMcAf8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/AxwB/wMcAf8DwgH/MAADwgH/AzwB/wM8Af8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wM8Af8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wMcAf8DHAH/A8IB/1AAAxwB/wMAAf8DAAH/AxwB/zAAA4IB/wMcAf8DHAH/AzwB
/zAAA5IB/wOCAf8DggH/A5IB/xAAAxwB/wMAAf8DAAH/AxwB/1AAAxwB/wMAAf8DAAH/AxwB/zAA
AzwB/wMcAf8DHAH/A4IB/wOSAf8DHAH/AxwB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/AzwB
/wOCAf8DwgH/AxwB/wMAAf8DAAH/AxwB/1AAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wOCAf8DPAH/
A8IB/wMcAf8DAAH/AwAB/wMcAf8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AxwB/wMcAf8DPAH/A8IB
/wMcAf8DHAH/A8IB/6AAAxwB/wMAAf8DAAH/AxwB/zAAAzwB/wMcAf8DHAH/A4IB/7AAA8IB/wMc
Af8DHAH/A8IB/zAAA8IB/wOCAf8DPAH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
    #endregion
    $imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
    $Formatter_binaryFomatter = $null
    $System_IO_MemoryStream = $null
    $imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
    #
    # timerJobTracker
    #
    $timerJobTracker.add_Tick($timerJobTracker_Tick)
    #
    # timer1
    #
    $timer1.Interval = 60000
    $timer1.add_Tick($timer1_Tick)
    #
    # toolstripstatuslabel1
    #
    $toolstripstatuslabel1.Name = "toolstripstatuslabel1"
    $toolstripstatuslabel1.Size = '98, 17'
    $toolstripstatuslabel1.Text = "TSTool 3.00          "
    $toolstripstatuslabel1.add_Click($toolstripstatuslabel1_Click)
    #
    # optionsToolStripMenuItem
    #
    [void]$optionsToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem1)
    $optionsToolStripMenuItem.Name = "optionsToolStripMenuItem"
    $optionsToolStripMenuItem.Size = '37, 20'
    $optionsToolStripMenuItem.Text = "File"
    #
    # exitToolStripMenuItem1
    #
    $exitToolStripMenuItem1.Name = "exitToolStripMenuItem1"
    $exitToolStripMenuItem1.Size = '152, 22'
    $exitToolStripMenuItem1.Text = "Exit"
    $exitToolStripMenuItem1.add_Click($exitToolStripMenuItem1_Click)
    #
    # licenceToolStripMenuItem
    #
    $licenceToolStripMenuItem.Name = "licenceToolStripMenuItem"
    $licenceToolStripMenuItem.Size = '152, 22'
    $licenceToolStripMenuItem.Text = "Licence"
    $licenceToolStripMenuItem.add_Click($licenceToolStripMenuItem_Click)
    #
    # addQLDPhoneFilterToolStripMenuItem
    #
    $addQLDPhoneFilterToolStripMenuItem.Name = "addQLDPhoneFilterToolStripMenuItem"
    $addQLDPhoneFilterToolStripMenuItem.Size = '173, 22'
    $addQLDPhoneFilterToolStripMenuItem.Text = "QLD Phone Filter"
    $addQLDPhoneFilterToolStripMenuItem.add_Click($addQLDPhoneFilterToolStripMenuItem_Click)
    #
    # clearHistoryToolStripMenuItem
    #
    $clearHistoryToolStripMenuItem.Name = "clearHistoryToolStripMenuItem"
    $clearHistoryToolStripMenuItem.Size = '173, 22'
    $clearHistoryToolStripMenuItem.Text = "Clear History"
    $clearHistoryToolStripMenuItem.add_Click($clearHistoryToolStripMenuItem_Click)
    #
    # setHistoryLimitToolStripMenuItem
    #
    $setHistoryLimitToolStripMenuItem.Name = "setHistoryLimitToolStripMenuItem"
    $setHistoryLimitToolStripMenuItem.Size = '173, 22'
    $setHistoryLimitToolStripMenuItem.Text = "Set History Limit"
    $setHistoryLimitToolStripMenuItem.add_Click($setHistoryLimitToolStripMenuItem_Click)
    #
    # checkForUpdatesToolStripMenuItem
    #
    $checkForUpdatesToolStripMenuItem.Name = "checkForUpdatesToolStripMenuItem"
    $checkForUpdatesToolStripMenuItem.Size = '173, 22'
    $checkForUpdatesToolStripMenuItem.Text = "Check For Updates"
    $checkForUpdatesToolStripMenuItem.add_Click($checkForUpdatesToolStripMenuItem_Click)
    #
    # tooltip1
    #
    #
    # toolstripmenuitem1
    #
    $toolstripmenuitem1.Name = "toolstripmenuitem1"
    $toolstripmenuitem1.Size = '12, 20'
    #
    # setProfileServerToolStripMenuItem
    #
    $setProfileServerToolStripMenuItem.Name = "setProfileServerToolStripMenuItem"
    $setProfileServerToolStripMenuItem.Size = '173, 22'
    $setProfileServerToolStripMenuItem.Text = "Set Profile Server"
    $setProfileServerToolStripMenuItem.add_Click($setProfileServerToolStripMenuItem_Click)
    #
    # editSoftwareFilterToolStripMenuItem
    #
    $editSoftwareFilterToolStripMenuItem.Name = "editSoftwareFilterToolStripMenuItem"
    $editSoftwareFilterToolStripMenuItem.Size = '173, 22'
    $editSoftwareFilterToolStripMenuItem.Text = "Edit Software Filter"
    $editSoftwareFilterToolStripMenuItem.add_Click($editSoftwareFilterToolStripMenuItem_Click)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formTSTool3.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formTSTool3.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formTSTool3.add_FormClosed($Form_Cleanup_FormClosed)
    #Show the Form
    return $formTSTool3.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
    #Call the form
    Call-TSTool3_1_4_pff | Out-Null
    #Perform cleanup
    OnApplicationExit
}


  <FileID>26325583-ffcb-49bb-8678-2d9a3c76c357</FileID>
  <LastExport>130376006644089606</LastExport>
  <FileVersion>1.2</FileVersion>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formTSTool3" children="Controls">
    <Property name="AcceptButton">
      <Reference name="buttonStartJob" />
    </Property>
    <Property name="ClientSize">1100, 706</Property>
    <Property name="FormBorderStyle">Fixed3D</Property>
    <Property name="Icon">
      <Binary></Binary>
    </Property>
    <Property name="MainMenuStrip">
      <Reference name="menustrip1" />
    </Property>
    <Property name="MaximizeBox">False</Property>
    <Property name="Name">formTSTool3</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">TSTool3</Property>
    <Event name="FormClosed">formMain_FormClosed</Event>
    <Event name="Load">FormEvent_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonCopy" children="Controls">
      <Property name="Location">155, 287</Property>
      <Property name="Name">buttonCopy</Property>
      <Property name="Size">75, 31</Property>
      <Property name="TabIndex">24</Property>
      <Property name="Text">Copy</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonCopy_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.RichTextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="richtextbox1" children="Controls">
      <Property name="BackColor">1, 36, 86</Property>
      <Property name="Font">Lucida Console, 9pt</Property>
      <Property name="ForeColor">238, 237, 240</Property>
      <Property name="Location">12, 326</Property>
      <Property name="Name">richtextbox1</Property>
      <Property name="Size">1080, 343</Property>
      <Property name="TabIndex">23</Property>
      <Property name="Text">
      </Property>
      <Event name="LinkClicked">richtextbox1_LinkClicked</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonClear" children="Controls">
      <Property name="Location">236, 287</Property>
      <Property name="Name">buttonClear</Property>
      <Property name="Size">75, 31</Property>
      <Property name="TabIndex">22</Property>
      <Property name="Text">Clear</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonClear_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelBarcode" children="Controls">
      <Property name="Font">Tahoma, 12pt, style=Bold</Property>
      <Property name="ForeColor">MediumBlue</Property>
      <Property name="Location">420, 51</Property>
      <Property name="Name">labelBarcode</Property>
      <Property name="Size">300, 31</Property>
      <Property name="TabIndex">21</Property>
      <Property name="TextAlign">MiddleLeft</Property>
    </Object>
    <Object type="System.Windows.Forms.PictureBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="picturebox1" children="Controls">
      <Property name="Image">
        <Binary></Binary>
      </Property>
      <Property name="Location">12, 282</Property>
      <Property name="Name">picturebox1</Property>
      <Property name="Size">130, 41</Property>
      <Property name="TabIndex">17</Property>
      <Property name="TabStop">False</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonHistory" children="Controls">
      <Property name="Location">49, 51</Property>
      <Property name="Name">buttonHistory</Property>
      <Property name="Size">75, 31</Property>
      <Property name="TabIndex">18</Property>
      <Property name="Text">History</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonHistory_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelLOCKED" children="Controls">
      <Property name="BackColor">Transparent</Property>
      <Property name="Font">Tahoma, 12pt, style=Bold</Property>
      <Property name="ForeColor">Crimson</Property>
      <Property name="Location">954, 105</Property>
      <Property name="Name">labelLOCKED</Property>
      <Property name="Size">135, 23</Property>
      <Property name="TabIndex">16</Property>
      <Property name="TextAlign">BottomCenter</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelUserID" children="Controls">
      <Property name="BackColor">Transparent</Property>
      <Property name="Font">Tahoma, 12pt, style=Bold</Property>
      <Property name="ForeColor">MediumBlue</Property>
      <Property name="Location">946, 276</Property>
      <Property name="Name">labelUserID</Property>
      <Property name="Size">149, 23</Property>
      <Property name="TabIndex">15</Property>
      <Property name="Text">UserID</Property>
      <Property name="TextAlign">MiddleCenter</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelLocation" children="Controls">
      <Property name="BackColor">Transparent</Property>
      <Property name="Font">Tahoma, 12pt, style=Bold</Property>
      <Property name="ForeColor">MediumBlue</Property>
      <Property name="Location">615, 276</Property>
      <Property name="Name">labelLocation</Property>
      <Property name="Size">305, 23</Property>
      <Property name="TabIndex">14</Property>
      <Property name="Text">Location</Property>
      <Property name="TextAlign">MiddleLeft</Property>
    </Object>
    <Object type="System.Windows.Forms.StatusStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="statusstrip1" children="Controls">
      <Property name="Items">
        <Item type="System.Windows.Forms.ToolStripStatusLabel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="toolstripstatuslabel1" />
        </Item>
      </Property>
      <Property name="Location">0, 684</Property>
      <Property name="Name">statusstrip1</Property>
      <Property name="Size">1100, 22</Property>
      <Property name="SizingGrip">False</Property>
      <Property name="TabIndex">12</Property>
      <Property name="Text">statusstrip1</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonDisconnect" children="Controls">
      <Property name="Location">933, 51</Property>
      <Property name="Name">buttonDisconnect</Property>
      <Property name="Size">75, 31</Property>
      <Property name="TabIndex">11</Property>
      <Property name="Text">Disconnect</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonDisconnect_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelUserName" children="Controls">
      <Property name="BackColor">Transparent</Property>
      <Property name="Font">Tahoma, 9.75pt, style=Bold</Property>
      <Property name="ForeColor">MediumBlue</Property>
      <Property name="Location">923, 299</Property>
      <Property name="Name">labelUserName</Property>
      <Property name="Size">186, 23</Property>
      <Property name="TabIndex">10</Property>
      <Property name="Text">Name</Property>
      <Property name="TextAlign">MiddleCenter</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonStartJob" children="Controls">
      <Property name="ImageList">
        <Reference name="imagelistButtonBusyAnimation" />
      </Property>
      <Property name="Location">333, 51</Property>
      <Property name="Name">buttonStartJob</Property>
      <Property name="Size">75, 31</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">Connect</Property>
      <Property name="TextImageRelation">ImageBeforeText</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonStartJob_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.PictureBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="picturebox3" children="Controls">
      <Property name="BackColor">Black</Property>
      <Property name="BorderStyle">Fixed3D</Property>
      <Property name="Location">948, 130</Property>
      <Property name="Name">picturebox3</Property>
      <Property name="Size">144, 144</Property>
      <Property name="SizeMode">Zoom</Property>
      <Property name="TabIndex">7</Property>
      <Property name="TabStop">False</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonClose" children="Controls">
      <Property name="Location">1014, 51</Property>
      <Property name="Name">buttonClose</Property>
      <Property name="Size">75, 31</Property>
      <Property name="TabIndex">6</Property>
      <Property name="Text">Close</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonClose_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.PictureBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="picturebox2" children="Controls">
      <Property name="BackColor">DarkGray</Property>
      <Property name="BorderStyle">FixedSingle</Property>
      <Property name="Location">12, 51</Property>
      <Property name="Name">picturebox2</Property>
      <Property name="Size">31, 31</Property>
      <Property name="TabIndex">4</Property>
      <Property name="TabStop">False</Property>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textbox1" children="Controls">
      <Property name="AutoCompleteMode">Suggest</Property>
      <Property name="AutoCompleteSource">CustomSource</Property>
      <Property name="BackColor">Info</Property>
      <Property name="Font">Courier New, 15.75pt, style=Bold</Property>
      <Property name="Location">130, 51</Property>
      <Property name="Name">textbox1</Property>
      <Property name="Size">197, 31</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">Barcode</Property>
    </Object>
    <Object type="System.Windows.Forms.TabControl, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="tabcontrol1" children="Controls">
      <Property name="Location">12, 109</Property>
      <Property name="Name">tabcontrol1</Property>
      <Property name="SelectedIndex">0</Property>
      <Property name="Size">928, 167</Property>
      <Property name="TabIndex">1</Property>
      <Object type="System.Windows.Forms.TabPage, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="tabpage1" children="Controls">
        <Property name="Location">4, 22</Property>
        <Property name="Name">tabpage1</Property>
        <Property name="Padding">3, 3, 3, 3</Property>
        <Property name="Size">920, 141</Property>
        <Property name="TabIndex">0</Property>
        <Property name="Text">Machine</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonLogOff" children="Controls">
          <Property name="Location">418, 16</Property>
          <Property name="Name">buttonLogOff</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">19</Property>
          <Property name="Text">Log Off</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonLogOff_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonMonitors" children="Controls">
          <Property name="Location">95, 45</Property>
          <Property name="Name">buttonMonitors</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">18</Property>
          <Property name="Text">Monitor(s)</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonMonitors_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textbox2" children="Controls">
          <Property name="BackColor">Info</Property>
          <Property name="Location">14, 106</Property>
          <Property name="Name">textbox2</Property>
          <Property name="Size">74, 20</Property>
          <Property name="TabIndex">17</Property>
          <Property name="Text">ServiceTag</Property>
          <Property name="TextAlign">Right</Property>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelUpTime" children="Controls">
          <Property name="ForeColor">MediumBlue</Property>
          <Property name="Location">599, 106</Property>
          <Property name="Name">labelUpTime</Property>
          <Property name="Size">315, 15</Property>
          <Property name="TabIndex">16</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonIPConfig" children="Controls">
          <Property name="Location">175, 103</Property>
          <Property name="Name">buttonIPConfig</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">15</Property>
          <Property name="Text">IPConfig</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonIPConfig_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonRDP" children="Controls">
          <Property name="Location">176, 17</Property>
          <Property name="Name">buttonRDP</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">14</Property>
          <Property name="Text">RDP</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonRDP_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonOU" children="Controls">
          <Property name="Location">95, 74</Property>
          <Property name="Name">buttonOU</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">13</Property>
          <Property name="Text">OU</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonOU_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonProcesses" children="Controls">
          <Property name="Location">176, 75</Property>
          <Property name="Name">buttonProcesses</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">10</Property>
          <Property name="Text">Processes</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonProcesses_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonC" children="Controls">
          <Property name="Location">175, 46</Property>
          <Property name="Name">buttonC</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">8</Property>
          <Property name="Text">C:</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonC_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonWarranty" children="Controls">
          <Property name="Location">94, 103</Property>
          <Property name="Name">buttonWarranty</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">7</Property>
          <Property name="Text">Warranty</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonWarranty_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonWakeUp" children="Controls">
          <Property name="Location">418, 104</Property>
          <Property name="Name">buttonWakeUp</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">6</Property>
          <Property name="Text">WakeUp</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonWakeUp_Click</Event>
          <Event name="MouseHover">ShowHelp</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonShutDown" children="Controls">
          <Property name="Location">418, 74</Property>
          <Property name="Name">buttonShutDown</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">5</Property>
          <Property name="Text">ShutDown</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonShutDown_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonReboot" children="Controls">
          <Property name="Location">418, 45</Property>
          <Property name="Name">buttonReboot</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">4</Property>
          <Property name="Text">Reboot</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonReboot_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonGPUpdate" children="Controls">
          <Property name="Location">95, 16</Property>
          <Property name="Name">buttonGPUpdate</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">3</Property>
          <Property name="Text">GPUpdate</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonGPUpdate_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="label1" children="Controls">
          <Property name="AutoEllipsis">True</Property>
          <Property name="ForeColor">MediumBlue</Property>
          <Property name="Location">599, 6</Property>
          <Property name="Name">label1</Property>
          <Property name="Size">456, 92</Property>
          <Property name="TabIndex">2</Property>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelMachineModelOSRamSer" children="Controls">
          <Property name="Location">527, 6</Property>
          <Property name="Name">labelMachineModelOSRamSer</Property>
          <Property name="Size">66, 128</Property>
          <Property name="TabIndex">1</Property>
          <Property name="Text">Machine
Model
OS
Ram
ServiceTag
IPv4
BuildDate

UpTime
</Property>
          <Property name="TextAlign">TopRight</Property>
        </Object>
      </Object>
      <Object type="System.Windows.Forms.TabPage, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="tabpage2" children="Controls">
        <Property name="Location">4, 22</Property>
        <Property name="Name">tabpage2</Property>
        <Property name="Padding">3, 3, 3, 3</Property>
        <Property name="Size">920, 141</Property>
        <Property name="TabIndex">1</Property>
        <Property name="Text">Software</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonAPPV" children="Controls">
          <Property name="Location">578, 71</Property>
          <Property name="Name">buttonAPPV</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">33</Property>
          <Property name="Text">APP-V</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonAPPV_Click</Event>
          <Event name="MouseHover">ShowHelp</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="FilteredSCCM" children="Controls">
          <Property name="Location">439, 42</Property>
          <Property name="Name">FilteredSCCM</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">31</Property>
          <Property name="Text">Filtered</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">FilteredSCCM_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonWin8Apps" children="Controls">
          <Property name="Location">578, 102</Property>
          <Property name="Name">buttonWin8Apps</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">30</Property>
          <Property name="Text">Win8 Apps</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonWin8Apps_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="InstalledMSI" children="Controls">
          <Property name="Location">709, 71</Property>
          <Property name="Name">InstalledMSI</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">27</Property>
          <Property name="Text">MSI</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">InstalledMSI_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelLIVE" children="Controls">
          <Property name="Location">709, 16</Property>
          <Property name="Name">labelLIVE</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">22</Property>
          <Property name="Text">LIVE</Property>
          <Property name="TextAlign">MiddleCenter</Property>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelSCCMLive" children="Controls">
          <Property name="Location">439, 16</Property>
          <Property name="Name">labelSCCMLive</Property>
          <Property name="Size">76, 23</Property>
          <Property name="TabIndex">18</Property>
          <Property name="Text">SCCM</Property>
          <Property name="TextAlign">MiddleCenter</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="AddRemovePrograms" children="Controls">
          <Property name="Location">709, 102</Property>
          <Property name="Name">AddRemovePrograms</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">17</Property>
          <Property name="Text">All Apps</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">AddRemovePrograms_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="FilteredLive" children="Controls">
          <Property name="Location">709, 42</Property>
          <Property name="Name">FilteredLive</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">16</Property>
          <Property name="Text">Filtered</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">FilteredLive_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SCCM_2007_SW3" children="Controls">
          <Property name="Location">439, 102</Property>
          <Property name="Name">SCCM_2007_SW3</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">15</Property>
          <Property name="Text">All Apps</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">SCCM_2007_SW3_Click</Event>
          <Event name="MouseHover">ShowHelp</Event>
        </Object>
      </Object>
      <Object type="System.Windows.Forms.TabPage, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="tabpage4" children="Controls">
        <Property name="Location">4, 22</Property>
        <Property name="Name">tabpage4</Property>
        <Property name="Padding">3, 3, 3, 3</Property>
        <Property name="Size">920, 141</Property>
        <Property name="TabIndex">3</Property>
        <Property name="Text">App Launch</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSCCM" children="Controls">
          <Property name="Location">438, 72</Property>
          <Property name="Name">buttonSCCM</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">17</Property>
          <Property name="Text">SCCM</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonSCCM_Click</Event>
          <Event name="MouseHover">ShowHelp</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonMSTSC" children="Controls">
          <Property name="Location">438, 101</Property>
          <Property name="Name">buttonMSTSC</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">16</Property>
          <Property name="Text">MSTSC</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonMSTSC_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelLocalApps" children="Controls">
          <Property name="Location">356, 19</Property>
          <Property name="Name">labelLocalApps</Property>
          <Property name="Size">93, 20</Property>
          <Property name="TabIndex">15</Property>
          <Property name="Text">Local Apps</Property>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelRemoteApps" children="Controls">
          <Property name="Location">27, 19</Property>
          <Property name="Name">labelRemoteApps</Property>
          <Property name="Size">93, 20</Property>
          <Property name="TabIndex">14</Property>
          <Property name="Text">Remote Apps</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSysInfo" children="Controls">
          <Property name="Location">27, 103</Property>
          <Property name="Name">buttonSysInfo</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">13</Property>
          <Property name="Text">SysInfo</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonSysInfo_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonManage" children="Controls">
          <Property name="Location">27, 74</Property>
          <Property name="Name">buttonManage</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">12</Property>
          <Property name="Text">Manage</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonManage_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonPowerShell" children="Controls">
          <Property name="Location">356, 72</Property>
          <Property name="Name">buttonPowerShell</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">3</Property>
          <Property name="Text">Powershell</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonPowerShell_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonPSRemote" children="Controls">
          <Property name="Location">27, 45</Property>
          <Property name="Name">buttonPSRemote</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">2</Property>
          <Property name="Text">PS Remote</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonPSRemote_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonRegEdit" children="Controls">
          <Property name="Location">356, 101</Property>
          <Property name="Name">buttonRegEdit</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">1</Property>
          <Property name="Text">RegEdit</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonRegEdit_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonCMD" children="Controls">
          <Property name="Location">356, 43</Property>
          <Property name="Name">buttonCMD</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">0</Property>
          <Property name="Text">CMD</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonCMD_Click</Event>
        </Object>
      </Object>
      <Object type="System.Windows.Forms.TabPage, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="tabpage3" children="Controls">
        <Property name="Location">4, 22</Property>
        <Property name="Name">tabpage3</Property>
        <Property name="Padding">3, 3, 3, 3</Property>
        <Property name="Size">920, 141</Property>
        <Property name="TabIndex">2</Property>
        <Property name="Text"> User </Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSCCMU2M" children="Controls">
          <Property name="Location">220, 74</Property>
          <Property name="Name">buttonSCCMU2M</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">24</Property>
          <Property name="Text">SCCM U2M</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonSCCMU2M_Click</Event>
          <Event name="MouseHover">ShowHelp</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonProfileSvr" children="Controls">
          <Property name="Location">220, 103</Property>
          <Property name="Name">buttonProfileSvr</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">23</Property>
          <Property name="Text">Profile Svr</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonProfileSvr_Click</Event>
          <Event name="MouseHover">ShowHelp</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonHome" children="Controls">
          <Property name="Location">337, 74</Property>
          <Property name="Name">buttonHome</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">22</Property>
          <Property name="Text">Home</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonHome_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonProfile" children="Controls">
          <Property name="Location">337, 103</Property>
          <Property name="Name">buttonProfile</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">21</Property>
          <Property name="Text">Profile</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonProfile_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonMySite" children="Controls">
          <Property name="Location">418, 103</Property>
          <Property name="Name">buttonMySite</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">7</Property>
          <Property name="Text">MySite</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonMySite_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="button1" children="Controls">
          <Property name="Location">418, 74</Property>
          <Property name="Name">button1</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">6</Property>
          <Property name="Text">RDP</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">button1_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonEmail" children="Controls">
          <Property name="Location">418, 45</Property>
          <Property name="Name">buttonEmail</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">5</Property>
          <Property name="Text">EMAIL</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonEmail_Click</Event>
          <Event name="MouseHover">ShowHelp</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="label2" children="Controls">
          <Property name="ForeColor">MediumBlue</Property>
          <Property name="Location">599, 6</Property>
          <Property name="Name">label2</Property>
          <Property name="Size">315, 128</Property>
          <Property name="TabIndex">4</Property>
          <Property name="TextAlign">MiddleLeft</Property>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelUserIDNameEmailPhone" children="Controls">
          <Property name="Location">527, 6</Property>
          <Property name="Name">labelUserIDNameEmailPhone</Property>
          <Property name="Size">66, 128</Property>
          <Property name="TabIndex">3</Property>
          <Property name="Text">UserID
Name
Email

Phone
Mobile</Property>
          <Property name="TextAlign">MiddleRight</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonRA" children="Controls">
          <Property name="Location">418, 16</Property>
          <Property name="Name">buttonRA</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">0</Property>
          <Property name="Text">RA</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">buttonRA_Click</Event>
        </Object>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.MenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="menustrip1" children="Controls">
      <Property name="Items">
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="optionsToolStripMenuItem" />
        </Item>
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="toolstripmenuitem1" />
        </Item>
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="fileToolStripMenuItem" />
        </Item>
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="helpToolStripMenuItem" />
        </Item>
      </Property>
      <Property name="Location">0, 0</Property>
      <Property name="Name">menustrip1</Property>
      <Property name="Size">1100, 24</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">menustrip1</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="fileToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="addQLDPhoneFilterToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="clearHistoryToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="setHistoryLimitToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="checkForUpdatesToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="setProfileServerToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="editSoftwareFilterToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">fileToolStripMenuItem</Property>
    <Property name="Size">61, 20</Property>
    <Property name="Text">Options</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="helpToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="aboutToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="licenceToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">helpToolStripMenuItem</Property>
    <Property name="Size">44, 20</Property>
    <Property name="Text">Help</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="aboutToolStripMenuItem">
    <Property name="Name">aboutToolStripMenuItem</Property>
    <Property name="Size">107, 22</Property>
    <Property name="Text">About</Property>
    <Event name="Click">aboutToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ImageList, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="imagelistButtonBusyAnimation">
    <Property name="ImageStream">
      <Binary>AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAATABAQEwAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8AugADwgH/AxwB/wMcAf8DwgH/MAADwgH/AzwB/wOCAf8DwgH/sAADHAH/AwAB/wMAAf8DHAH/MAADggH/AxwB/wMcAf8DPAH/gAADwgH/AxwB/wMcAf8DwgH/IAADHAH/AwAB/wMAAf8DHAH/A8IB/wM8Af8DggH/A8IB/xAAA8IB/wMcAf8DHAH/A8IB/wM8Af8DHAH/AxwB/wM8Af8EAAOSAf8DkgH/A8IB/3AAAxwB/wMAAf8DAAH/AxwB/yAAA8IB/wMcAf8DHAH/A8IB/wOCAf8DHAH/AxwB/wOCAf8QAAMcAf8DAAH/AwAB/wMcAf8DwgH/AzwB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAxwB/wMAAf8DAAH/AxwB/zAAAzwB/wMcAf8DHAH/AzwB/xAAAxwB/wMAAf8DAAH/AxwB/xAAA5IB/wOSAf8DkgH/A8IB/3AAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wM8Af8DggH/A8IB/xAAA8IB/wMcAf8DHAH/A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wOCAf8DPAH/A8IB/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAMcAf8DAAH/AwAB/wMcAf8wAAM8Af8DHAH/AxwB/wM8Af8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAMcAf8DAAH/AwAB/wMcAf8wAAOCAf8DHAH/AxwB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAPCAf8DHAH/AxwB/wPCAf8wAAPCAf8DggH/AzwB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DPAH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQAA8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAAM8Af8DHAH/AxwB/wM8Af8wAAOSAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/A4IB/wMcAf8DHAH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DPAH/A8IB/yAAA8IB/wPCAf8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8DPAH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPCAf8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AxwB/wMcAf8DggH/A8IB/wOSAf8DkgH/A8IB/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPCAf8DwgH/cAADPAH/AxwB/wMcAf8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/AzwB/wM8Af8DwgH/FAADwgH/A8IB/xQAA8IB/wOSAf8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DHAH/AxwB/wPCAf8wAAPCAf8DPAH/A4IB/wPCAf8wAAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADHAH/AwAB/wMAAf8DHAH/MAADggH/AxwB/wMcAf8DPAH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADHAH/AwAB/wMAAf8DHAH/MAADPAH/AxwB/wMcAf8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADwgH/AxwB/wMcAf8DwgH/MAADwgH/AzwB/wM8Af8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/3wAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wM8Af8DggH/A8IB/zAAA8IB/wPCAf8DkgH/A8IB/xAAA8IB/wMcAf8DHAH/A8IB/1AAAxwB/wMAAf8DAAH/AxwB/zAAA4IB/wMcAf8DHAH/AzwB/zAAA5IB/wOCAf8DggH/A5IB/xAAAxwB/wMAAf8DAAH/AxwB/1AAAxwB/wMAAf8DAAH/AxwB/zAAAzwB/wMcAf8DHAH/A4IB/wOSAf8DHAH/AxwB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/AzwB/wOCAf8DwgH/AxwB/wMAAf8DAAH/AxwB/1AAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wOCAf8DPAH/A8IB/wMcAf8DAAH/AwAB/wMcAf8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AxwB/wMcAf8DPAH/A8IB/wMcAf8DHAH/A8IB/6AAAxwB/wMAAf8DAAH/AxwB/zAAAzwB/wMcAf8DHAH/A4IB/7AAA8IB/wMcAf8DHAH/A8IB/zAAA8IB/wOCAf8DPAH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEBAAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHAAQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8BwwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8AT8E/wH8AT8B/AE/Cw==</Binary>
    </Property>
    <Property name="TransparentColor">Transparent</Property>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerJobTracker">
    <Event name="Tick">timerJobTracker_Tick</Event>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timer1">
    <Property name="Interval">60000</Property>
    <Event name="Tick">timer1_Tick</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripStatusLabel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="toolstripstatuslabel1">
    <Property name="Name">toolstripstatuslabel1</Property>
    <Property name="Size">98, 17</Property>
    <Property name="Text">TSTool 3.00          </Property>
    <Event name="Click">toolstripstatuslabel1_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="optionsToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="exitToolStripMenuItem1" />
      </Item>
    </Property>
    <Property name="Name">optionsToolStripMenuItem</Property>
    <Property name="Size">37, 20</Property>
    <Property name="Text">File</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="exitToolStripMenuItem1">
    <Property name="Name">exitToolStripMenuItem1</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Exit</Property>
    <Event name="Click">exitToolStripMenuItem1_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="licenceToolStripMenuItem">
    <Property name="Name">licenceToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Licence</Property>
    <Event name="Click">licenceToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="addQLDPhoneFilterToolStripMenuItem">
    <Property name="Name">addQLDPhoneFilterToolStripMenuItem</Property>
    <Property name="Size">173, 22</Property>
    <Property name="Text">QLD Phone Filter</Property>
    <Event name="Click">addQLDPhoneFilterToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="clearHistoryToolStripMenuItem">
    <Property name="Name">clearHistoryToolStripMenuItem</Property>
    <Property name="Size">173, 22</Property>
    <Property name="Text">Clear History</Property>
    <Event name="Click">clearHistoryToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="setHistoryLimitToolStripMenuItem">
    <Property name="Name">setHistoryLimitToolStripMenuItem</Property>
    <Property name="Size">173, 22</Property>
    <Property name="Text">Set History Limit</Property>
    <Event name="Click">setHistoryLimitToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkForUpdatesToolStripMenuItem">
    <Property name="Name">checkForUpdatesToolStripMenuItem</Property>
    <Property name="Size">173, 22</Property>
    <Property name="Text">Check For Updates</Property>
    <Event name="Click">checkForUpdatesToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolTip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="tooltip1" />
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="toolstripmenuitem1">
    <Property name="Name">toolstripmenuitem1</Property>
    <Property name="Size">12, 20</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="setProfileServerToolStripMenuItem">
    <Property name="Name">setProfileServerToolStripMenuItem</Property>
    <Property name="Size">173, 22</Property>
    <Property name="Text">Set Profile Server</Property>
    <Event name="Click">setProfileServerToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="editSoftwareFilterToolStripMenuItem">
    <Property name="Name">editSoftwareFilterToolStripMenuItem</Property>
    <Property name="Size">173, 22</Property>
    <Property name="Text">Edit Software Filter</Property>
    <Event name="Click">editSoftwareFilterToolStripMenuItem_Click</Event>
  </Object>
  <Code><![CDATA[
Param([string]$RunningAs)





function OnApplicationLoad {

	set-variable -name TSToolVersion -value "3.1.4" -scope script -description "TSTool Version" 
	
	function Global:Get-ActiveMonitor
	{    
	    param($computer = $env:computername)
	    
	    try
	    {
	        $ActiveMonitors = Get-WmiObject -Namespace root\wmi -Class wmiMonitorID -ComputerName $Computer -ErrorAction 'stop'
	    }
	    catch
	    {
	    	if ($_.Exception.Message.trim() -eq "Not supported")
	    	{
	            $hash = @{"ErrorMessage"="Not Supported - Maybe you are accessing a Virtual Machine?"}
	    	}
	    	else
	    	{
	            $hash = @{"ErrorMessage"=$_.Exception.Message}
	    	}
            
            return New-Object PSObject -Property $hash
        }    

	    $count = 0
		
        # Monitor(s) Information
	    foreach($monitor in $ActiveMonitors)
	    {
	        $count += 1
            New-Object PSObject -Property @{
	            Monitor=$count	
	            ManufacturerName=($monitor.ManufacturerName | % {[char]$_}) -join ''
	            ProductCodeID=($monitor.ProductCodeID | % {[char]$_}) -join ''
	            SerialNumberID=($monitor.SerialNumberID | % {[char]$_}) -join ''
	            Description=($monitor.UserFriendlyName | % {[char]$_}) -join ''
	            ComputerName=$Computer 
	            WeekOfManufacture=$monitor.WeekOfManufacture                       
	            YearOfManufacture=$monitor.YearOfManufacture
	        }         
	    } 
	}
    
    Function Global:Get-MonitorResolution
    {
        Param($computer = $env:computername)          
	    
        try
		{
		$sysMon = Get-WmiObject Win32_DesktopMonitor -ComputerName $Computer -ErrorAction 'stop'
	    }
	    catch                
	    {
		} 
        
		$sysMON | %{
            if($_.ScreenWidth)
            {
                "{0} [{2} x {3}]`n" -f $_.Description, $_.Name, $_.ScreenWidth,$_.ScreenHeight
            }
        }
    }
		
	function Global:Update-Display
	{
		param($ResultToDisplay, $color= '238, 237, 240')		

		if ($color -eq "Yellow"){$richtextbox1.text = ""}
		
		$ResultToDisplay = ($ResultToDisplay | Out-String).replace($null, " ")
       
		$richTextBox1.SelectionColor = $color
		$richtextbox1.appendText($ResultToDisplay)
        $richtextbox1.appendText("`n")
	}
	   	
	function Global:Test-PSRemoting 
	{ 
	    Param(
			[string]$ComputerName,
			[switch]$report
		)  
	        
	    try 
	    {            
	        $result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
	        
	        if($result -eq 1 )
	        {
	            return $True
	        }
	    } 
	    catch 
	    {}
		
		if ($report)
		{
			[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
			$Answer = [Windows.Forms.MessageBox]::Show("PS Remoting Not Enabled on $ComputerName", "TSTool $TSToolVersion","OK","Exclamation")
		}
		return $False 
	}
			
	function Global:Clean-NumberQLD-AU 
	{     
        param($ph)
		#This function has been optimised for Queensland Australia
        
        $pattern = '[0-9\-\s\()]{1,50}'
     
        filter Matches($pattern) {
            $_ | Select-String -AllMatches $pattern |
            Select-Object -ExpandProperty Matches | 
            Select-Object -ExpandProperty Value
        }
     
        $numbers = $ph | Matches $pattern
     
        foreach ($check in $numbers )
        {
            $number = $check -replace '[\.\-\()\s]' , ""
            $len = $number.length
            
            if ($len -ge 8)
            {
                $digit1 = $number.substring(0,1)
                $digit2 = $number.substring(1,1)
                $digit3 = $number.substring(2,1)
                $digit5 = $number.substring(4,1)
            }
            
            if ($len -eq 8 -and $digit1 -eq "5") 
            {
                # standard number starting with 54 
                "07$number"
                break
            }
            elseif ($len -eq 10 -and $digit1 -eq "0" -and ($digit2 -eq "7" -or $digit2 -eq "4")) 
            {
                # standard full number starting with 07 or 04
                $number
                break
            }
            elseif ($len -gt 10) 
            {
                if ($digit1 -eq "6" -and $digit5 -eq "0" -and $len -ge 14)
                {
                    # mobile number with 6000 prefix?
                    $number.substring(4,10)
                }
                elseif ($digit1 -eq "0" -and ($digit2 -eq "7" -or $digit2 -eq "4"))
                {
                    # joined number starting with 07 or 04 
                    $number.substring(0,10)
                }
                elseif ($digit1 -eq "0" -and $digit2 -eq "6" -and $digit3 -eq "1")
                {
                    # number starting with 061 
                    "0$($number.substring(3,9))"
                }            
                elseif ($digit1 -eq "5")
                {
                    # joined number starting with 54  
                    "07$($number.substring(0,8))"
                }
            }    
        } 
    }
	
	function global:Get-RegKey
	{
	    param
	    (
	        [string]$Key, 
	        [string]$Value, 
	        [switch]$Set,
	        [string]$Reg="HKCU:\Software\PowerShell\TSTool"
	    ) 
	  		
		
	    if (-not(Test-Path -Path $Reg))
	    {
	        New-Item -Path $Reg -Force | Out-Null
	    }

	    if ($Set)
	    {
	        Set-ItemProperty -Path $Reg -Name $Key -Value $Value
	    }
	    else
	    {
	        try
	        {
	            Get-ItemProperty -Path $Reg -Name $Key -ErrorAction 'stop' | Select-Object -ExpandProperty $Key
	        }
	        catch
	        {
				0
	        }
	    }
	}
				
	function Global:Use-RunAs
	{   
	    # Test if script is running as Adminstrator and if not use RunAs
	    # -Check ( Return true if Administrator )
	    
	    param([Switch]$Check)
	    
	    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
	        
	    if ($Check) { return $IsAdmin }    

	    if ($MyInvocation.ScriptName -ne "")
	    { 
	        if (-not $IsAdmin) 
	        { 
	            try
	            { 
	                $arg = "-executionpolicy bypass -windowstyle hidden -sta -file `"$($MyInvocation.ScriptName)`" $env:UserName $env:UserName"
	                Start-Process "$psHome\powershell.exe" -Verb Runas -ArgumentList $arg -ErrorAction 'stop' 
	            }
	            catch
	            {
					Write-Warning "Error - Failed to run script.... Credential problem?"
					break
	            }
	            exit # Quit this session of powershell
	        } 
	    } 
	    else 
	    { 
	        Write-Warning "Error - Script must be saved as a .ps1 file first" 
	        break 
	    } 
	}

	function Global:Get-ScriptPath
	{
	    try
	    {
	       $ScriptFullName = $MyInvocation.ScriptName
	        
	       $path = @{ 
	            parent = split-path $ScriptFullName
	            leaf = split-path $ScriptFullName -leaf
	            ScriptFullName = $ScriptFullName
	        }

	        New-Object PSObject -Property $path
	    }
	    catch
	    {        
	    }  
	}
	
	function Global:Get-logonUser
	{
	    try
        {
            Get-WmiObject Win32_Process -filter "Name = 'explorer.exe'" -ErrorAction 'stop' | % {$_.GetOwner().User} | select -Unique
	    }
	    catch
	    {
	        break
	    }	    
	}
	
	function Global:Get-SCCMSoftwareInstalled
    {
    <#
        .Synopsis
            Get Add Remove Programs from SCCM Query
       
        .Description
            Gets all software installed on SCCM client computer as per SCCM audit time. 
        
        .Parameter ResourceID
            Specifies a computer ResourceID
            
        .Parameter NameSpace
            Set this to your SCCM environment
            
        .Parameter SiteServer
            Set this to your SCCM environment
	
       .Example
            PS C:\>Get-SCCMSoftwareInstalled -ResourceID 1 -NameSpace -SiteServer server1
           
        Description
        -----------
            Gets all software installed on SCCM client computer as per SCCM audit time.                 

        .Inputs
            none                
                        
        .Outputs
            PSObject
                       
        .Notes
            NAME:      Get-SCCMSoftwareInstalled
            PURPOSE:   Get software installed 
            VERSION:   1.0
            AUTHOR:    Matthew Painter
            LASTEDIT:  5/Aug/2012            
    #>

            
        param(         
            [Parameter(         
            Mandatory=$true, 
            Position=1,        
            ValueFromPipeline=$false)]         
            [string]$ResourceID,
            
            [Parameter(
            Mandatory=$true,
            ValueFromPipeline=$false)]
            [string]$SiteServer,                
                    
            [Parameter(
            Mandatory=$false,
            ValueFromPipeline=$false)]
            [string]$NameSpace = "root\sms\site_SC1"
        )
        
        if ($ResourceID)
		{		
			try
            {
                $Query = "select * from SMS_G_System_ADD_REMOVE_PROGRAMS where ResourceID=`'$ResourceID`'"
                Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer -ErrorAction 'stop' | Select-Object DisplayName, Publisher, Version, InstallDate | 
                % {        
                    if ($_.DisplayName)
                    {
                        $VerCorrected = if ($_.Version){$_.Version}else{"1"}
                        $AppIndex = "$($_.DisplayName)  -  $VerCorrected"
                    }
                    else
                    {
                        $AppIndex = $null
                    }
                    
				
                    $Hash = @{ 
                        DisplayName = $_.DisplayName
                        Publisher = $_.Publisher
                        Version = $_.Version
                        InstallDate = $_.InstallDate
                        AppIndex = $AppIndex       
                    } 
                    
                    New-Object -TypeName PSObject -Property $Hash | 
                    Select-Object DisplayName, Publisher, Version, InstallDate, AppIndex
                }
            }
            catch
            {
            
            }
  		}
    }	
	
	function Global:Get-SCCMResourceID
	{
	<#
	    .Synopsis
	        Get Computer ResourceID
	   
	    .Description
	        Get Computer ResourceID searching 2 SCCM servers
	        
	        We are in the process of moving to a second SCCM server as part of OS upgrade
	        Identify the SCCM server that is managing a specific computer
	        
	        Machines are managed by new SCCM (primary) after OS upgrade
	        
	    
	    .Parameter ComputerName
	        Specifies a computer. The default is the local computer.
	        
	    .Parameter NameSpace1
	        Set this to your SCCM environment
	        Primary SCCM Server
	        
	    .Parameter SiteServer1
	        Set this to your SCCM environment
	        Primary SCCM Server
	        
	    .Parameter NameSpace2
	        Set this to your SCCM environment
	        SCCM Server migrating from 
	        
	    .Parameter SiteServer2
	        Set this to your SCCM environment
	        SCCM Server migrating from         

	       
	   .Example
	        PS C:\>Get-ResourceID
	       
	    Description
	    -----------
	        Returns ResourceID and server managing this computer  
	      
	        

	    .Inputs
	        System.String
	        You can pipe a ComputerName to Get-ResourceID
	                    
	    .Outputs
	        PSObject
	                   
	    .Notes
	        NAME:      Get-ResourceID
	        PURPOSE:   Get-ResourceID when SCCM server could be one of two
	        VERSION:   1.0
	        AUTHOR:    Matthew Painter
	        LASTEDIT:  3/Aug/2012            
	#>


    [CmdletBinding()]         
    
    param(         
        [Parameter(         
        Mandatory=$false, 
        Position=0,        
        ValueFromPipeline=$True)]         
        [string[]]$ComputerName = $env:ComputerName,
        
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$SiteServer1,
        
                
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$NameSpace1,
        
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$SiteServer2,
        
                
        [Parameter(
        Mandatory=$false,
        ValueFromPipeline=$false)]
        [string]$NameSpace2
    )
    
    

    Process
    {   
        foreach ($Computer in $ComputerName)
        {
            $ResourceID1 = $null
            $ResourceID2 = $null
            
            try
            {
                if (Test-Connection -ComputerName $SiteServer1 -Count 1 -Quiet)
                {
                    $Query = "select * from SMS_G_System_COMPUTER_SYSTEM where Name=`'$computer`'"
                    $ResourceID1 = Get-WmiObject -Query $Query -Namespace $NameSpace1 -ComputerName $SiteServer1 -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty ResourceID -First 1
                    
                    $ResourceID = $ResourceID1
                    $SiteServer = $SiteServer1 
                    $NameSpace = $NameSpace1
                }
            }
            catch
            {
                $errorMessage = $_.Exception.Message
            }
            
            try
            {
                if ((Test-Connection -ComputerName $SiteServer2 -Count 1 -Quiet) -and -not $ResourceID1 -and $SiteServer2)
                {
                    $Query = "select * from SMS_G_System_COMPUTER_SYSTEM where Name=`'$computer`'"
                    $ResourceID2 = Get-WmiObject -Query $Query -Namespace $NameSpace2 -ComputerName $SiteServer2 -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty ResourceID -First 1
          
                    $ResourceID = $ResourceID2                
                    $SiteServer = $SiteServer2 
                    $NameSpace = $NameSpace2
                }           
            }
            catch
            {
                $errorMessage = $_.Exception.Message
            }
            
            
            
            $Hash = @{ 
                Computer = $Computer
                SiteServer1 = $SiteServer1 
                NameSpace1 = $NameSpace1
                ResourceID1 = $ResourceID1                
                SiteServer2 = $SiteServer2 
                NameSpace2 = $NameSpace2
                ResourceID2 = $ResourceID2
                SiteServer = $SiteServer 
                NameSpace = $NameSpace
                ResourceID = $ResourceID
                error = $errorMessage
            }  
            
            New-Object -TypeName PSObject -Property $Hash 
        }            
    }
}

	function Global:Get-SCCMNetworkAdaptor
    {
    	<#
        .Synopsis
            Primary Network Adaptor Settings from SCCM
       
        .Description
            Primary Network Adaptor Settings from SCCM
        
        .Parameter ResourceID
            Specifies a computer ResourceID
            
        .Parameter NameSpace
            Set this to your SCCM environment
            
        .Parameter SiteServer
            Set this to your SCCM environment
	
       .Example
            PS C:\>Get-SCCMNetworkAdaptor -ResourceID 1 -NameSpace -SiteServer server1
           
        Description
        -----------
            Primary Network Adaptor Settings from SCCM
			IP, Subnet, MAC

        .Inputs
            none                
                        
        .Outputs
            PSObject
                       
        .Notes
            NAME:      Get-SCCMNetworkAdaptor
            PURPOSE:   IP, Subnet and MAC from SCCM
            VERSION:   1.0
            AUTHOR:    Matthew Painter
            LASTEDIT:  5/Aug/2012            
    	#>

            
        param(         
            [Parameter(         
            Mandatory=$true, 
            Position=1,        
            ValueFromPipeline=$false)]         
            [string]$ResourceID,
            
            [Parameter(
            Mandatory=$true,
            ValueFromPipeline=$false)]
            [string]$SiteServer,                
                    
            [Parameter(
            Mandatory=$false,
            ValueFromPipeline=$false)]
            [string]$NameSpace
        )
        
        if ($ResourceID)
		{		
			try
            {
				$Query = "select * from SMS_G_System_NETWORK_ADAPTER_CONFIGURATION where ResourceID=`'$ResourceID`' and IPEnabled=1"
	            $NETWORK_ADAPTER_CONFIGURATION = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer | Where-Object {$_.IPAddress -ne "0.0.0.0"}
	            
                # Get First IP enabled IPv4 from SCCM
                $matches = $null
                ($NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty IPAddress -First 1) -match "\b(?:\d{1,3}\.){3}\d{1,3}\b" | out-null
                $IPAddress = if ($matches){$matches[0]}
                
                $matches = $null
                ($NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty IPSubnet -First 1) -match "\b(?:\d{1,3}\.){3}\d{1,3}\b" | out-null
                $IPSubnet = if ($matches){$matches[0]}
                 
	            $computer = $NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty DNSHostName -First 1
				$MACAddress = $NETWORK_ADAPTER_CONFIGURATION | Select-Object -ExpandProperty MACAddress	-First 1		
				
               
                $Hash = @{ 
                    Computer = $Computer
                    IPAddress = $IPAddress
					IPSubnet = $IPSubnet
					MACAddress = $MACAddress        
                } 
                
                New-Object -TypeName PSObject -Property $Hash               
            }
            catch
            {        
            }
		}
    }
			
	function Global:ConvertToGrayScale 
    {       
        # Anonimista - http://gallery.technet.microsoft.com/scriptcenter/6d7bf29b-bbbb-4176-a3a8-77bbd0e81407
        
        param($image) 
         
        $grayImage = New-Object System.Drawing.Bitmap($image.Width, $image.Height) 
        $g = [System.Drawing.Graphics]::FromImage($grayImage) 
             
        $matrix = New-Object System.Drawing.Imaging.Colormatrix 
         
        $matrix.Matrix00 = 0.3 
        $matrix.Matrix01 = 0.3 
        $matrix.Matrix02 = 0.3 
        $matrix.Matrix03 = 0.0 
        $matrix.Matrix04 = 0.0 
         
        $matrix.Matrix10 = 0.59 
        $matrix.Matrix11 = 0.59 
        $matrix.Matrix12 = 0.59 
        $matrix.Matrix13 = 0.0 
        $matrix.Matrix14 = 0.0 
         
        $matrix.Matrix20 = 0.11 
        $matrix.Matrix21 = 0.11 
        $matrix.Matrix22 = 0.11 
        $matrix.Matrix23 = 0.0 
        $matrix.Matrix24 = 0.0 
         
        $matrix.Matrix30 = 0.0 
        $matrix.Matrix31 = 0.0 
        $matrix.Matrix32 = 0.0 
        $matrix.Matrix33 = 1.0 
        $matrix.Matrix34 = 0.0 
         
        $matrix.Matrix40 = 0.0 
        $matrix.Matrix41 = 0.0 
        $matrix.Matrix42 = 0.0 
        $matrix.Matrix43 = 0.0 
        $matrix.Matrix44 = 1.0 
         
        $attributes = New-Object System.Drawing.Imaging.ImageAttributes 
        $attributes.SetColorMatrix($matrix) 
         
        $imageRectangle = New-Object System.Drawing.Rectangle( 
            0, 0, $image.Width, $image.Height) 
        $g.DrawImage($image, $imageRectangle, 0, 0,  
            $image.Width, $image.Height,  
            [System.Drawing.GraphicsUnit]::Pixel, $attributes) 
         
        $g.Dispose() 
         
        $grayImage 
    }
	
	<#
	Check OS compatiblity.
	W8 "6.2.9200" 
	W7SP1 "6.1.7601"
	#>
	
	try
	{
		$OSVersion = gwmi Win32_OperatingSystem | select -ExpandProperty Version
	}
	catch{}
	if ($OSVersion -lt "6.1.7600")
	{
	    [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
        $Answer = [Windows.Forms.MessageBox]::Show("Sorry TSTool3 requires at least Windows7.", "TSTool $TSToolVersion","OK","Exclamation")
        exit
	}
	
	
    If($RunningAs)
    {
		# if script is still not running as Admin - abort something is wrong. 
        if (!(Use-RunAs -check))
        {
            [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
            $Answer = [Windows.Forms.MessageBox]::Show("RunAs failed to work - Check if RunAS is disabled on this computer.`nMaybe $($env:COMPUTERNAME) is a Citrix server?", "TSTool $TSToolVersion","OK","Exclamation")
        	exit
		} 
    }
    else
    {
    	Use-RunAs        
    }		

	
    
	#Previously script did not need STA mode but now does
	#Check if Script is running in STA mode - because $textbox1 autocomplete will not work
	set-variable -name STA -value ([System.Management.Automation.Runspaces.Runspace]::DefaultRunspace.ApartmentState -eq [Threading.ApartmentState]::STA) -scope script -description "True if running STA mode" 
	
	
	if (-not($STA))
	{
		# Ok lets update the shortcut gracefully in case someone has an old shortcut
		$StartMenuIcon = "$([System.Environment]::GetFolderPath("ApplicationData"))\Microsoft\Windows\Start Menu\Programs\TSTool3.lnk"
		$QuickLaunchIcon = "$([System.Environment]::GetFolderPath("ApplicationData"))\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\TSTool3.lnk"
		$DesktopIcon = "$([System.Environment]::GetFolderPath("Desktop"))\TSTool3.lnk"

		$StartMenuIcon, $QuickLaunchIcon, $DesktopIcon | 
		%{
		    if (test-path $_)
		    {
		        # Update main TSTool3 shortcuts with -sta switch
		        $shell = New-Object -COM WScript.Shell
		        $TSToolShortcut = get-item $_ 
		        $shortcut = $shell.CreateShortcut($TSToolShortcut) 
		        if ($shortcut.Arguments -match "TSTool3")
		        {
		            $shortcut.Arguments = $shortcut.Arguments.replace("-executionpolicy bypass -file", "-executionpolicy bypass -sta -file")
		        }
		        $shortcut.Save() 
		    }
		}
	}
	
	
	#Check screen resolution is at least 1024 wide 
    [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null   
    try
    {
        $ScreenWidthPass = $null
        $ScreenWidthProperty = $null 
        $desktops = Get-WmiObject -Class Win32_DesktopMonitor -ComputerName $env:computername -ErrorAction 'stop'
        foreach ($desktop in $desktops) 
        {
            if ($desktop.ScreenWidth -ge 1024)
            {
                $ScreenWidthPass = $true
            }
            if ($desktop.ScreenWidth){$ScreenWidthProperty = $true} 
        }
    }
    catch
    {
        # Cant read screen width - skip check
        $ScreenWidthPass = $true
    }

    # fallback code in case Win8 or virtual machine
    if(!($ScreenWidthPass))
    {
        [System.Windows.Forms.Screen]::AllScreens | %{$_.WorkingArea.width} | 
        %{
            if($_ -ge 1024){$ScreenWidthPass = $true }
        }
    }

    if (!($ScreenWidthPass))
    {
        [Windows.Forms.MessageBox]::Show("TSTool3 requires a screen resolution width =>1024","TSTool $TSToolVersion")
    }
	
    
	# even though console may be hidden, need to increase width to ensure output in rtb1 is correct. 
    if ((get-host).name -eq "ConsoleHost")
    {		
		$pshost = get-host
	    $pswindow = $pshost.ui.rawui

	    $newsize = $pswindow.buffersize
	    $newsize.height = 3000
	    $newsize.width = 150
	    $pswindow.buffersize = $newsize

	    $newsize = $pswindow.windowsize
	    $newsize.height = 50
	    $newsize.width = 150
	    $pswindow.windowsize = $newsize
		
		Write-Host "TSTool $TSToolVersion`n`n" -ForegroundColor 'DarkYellow'
		$pswindow.windowtitle = "TSTool $TSToolVersion Console"
	}
	

	
	# Set path and create external setting files
	set-variable -name ParentDirectory -value ("$(Get-ScriptPath | select -ExpandProperty Parent)")  -scope script -description "Parent Directory of Script" 	
	set-variable -name locationsCSV -value "$ParentDirectory\locations.csv" -scope script -description "Path to location/subnet lookup CSV" 	
	if (!(Test-Path -Path $locationsCSV))
	{
		New-Object -TypeName PSObject -Property @{"Subnet"="0.0.0.0"; "Location"="Unknown"}	| Export-Csv -Path $locationsCSV -NoTypeInformation
	}
	
	set-variable -name FilterFile -value "$ParentDirectory\filterFile.txt" -scope script -description "Path to file with list of programs for filter"
	if (!(Test-Path -Path $FilterFile))
	{		
		New-Item -path $FilterFile -type file -force -value "Dont edit this file directly (use editor)  -  1.0.0"
	}
	
	return $true #just leave this true
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}



$FormEvent_Load={
	
	
	
#Region Dynamic Graphics
# used in menu
$cross = [System.Convert]::FromBase64String('R0lGODlhDQANAIUAALcuLtiSkvLf37QkJLw7O89zc7QlJbo2Ns5ycvr29vjy8sNSUspnZ8hfX/ft
7daLi75CQsBISNSDg8toaMVXV7UpKfPh4bgwMPbo6LctLevMzLUmJt6kpLQmJuOwsM1xcb1BQfTl
5cFLS+Szs9WIiN+lpbcvL9OBgbo3N8llZfjw8MxtbeS2trk1NdF9fbMjI/Tj47MiIvz8/AAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEBAAAh+QQA
AAAAACwAAAAADQANAAAIdQApmEgBQ4bBgzIkBOgQI8aLFQgDRBghg4SIAwNitBBggUCDgghluDCw
4UUBFSEPTogxQENKGQkgvPCwoIKDkCEyxOBgcAEIhDAOxECAkMCDgwhiXAiJAYACgwZenEhZgoHB
GABAhvyQQAaKAi9lKGARFqGAgAA7')
	
$tick = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABEAAAAQCAIAAAB/UwMIAAAABGdBTUEAAK/INwWK6QAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAADSSURBVDhPY/hDNHj/833/pX6gcgYitay/
v55/Pr/+Gv37n+4TpSf/aD7DTAagBqBVhO0BKvLf6Y+sgYAeoAag2Wga8OmBawB6A+gHZG/j9A/E
BiA6/+Y8Wjhh1xO/Px6iARK46HogoV5/ph4SJkAA5EI0AH2PNSZAIQhRYb/JHqgC6BIIF+gNuCno
9sBNhbhEfqk8RA8wEnFFN8g/cNcDzcbvKogpID2g5AA2G47QAhd7uMGtAmoDhgf+RAgNa7jXgSGB
y+twgxDxAwxAgjZAtAEA+Nmc14IfYYIAAAAASUVORK5CYII=')

	
# no user (blank)	
$picturebox3Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmBKKAAAABGdBTUEAAK/INwWK6QAAAAZQTFRF
8PDwAAAAfqfmLAAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAABxSURBVHhe
7dCBAAAAAMOg+VMf5IVQYcCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMG
DBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBj4GhhRkAAB4TTD
rAAAAABJRU5ErkJggg==')	
	
# user (shadow image)	
$picturebox3UserImage = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmBKKAAAABGdBTUEAAK/INwWK6QAAADBQTFRF
6uvsj56yys/XUWmKNVB3ASRWpK+/c4WfHj1p19vgusLNDzBf4ePm8PDwCCpaBCZYlblvFwAAABl0
RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAWtSURBVHhe7ZvrcqQgEIVRGVFRfP+3
3VbxthPHcxomkx9jbW1VEtHPvtOAGf7YZf4Yz/AFutPIV0JfCd1J4O7vXxv6SuhOAnd//9rQV0J3
Erj7+9eGPiEhkyL2lLHTx5q+781W5k0/9WUpv1FfCUMHU7rKNk1TOVe3QtKWzsrV2MqV6ueqBw6m
LawfH9M1+qYqisJZH+QX8i9YNZIWSKQjr59xpisE72ea9fK21j1aN2owRePH8QCwo6yISiIlUGd3
6TyxRKE1hebhmjHD0LpXwomEo60VvqYCEoVdiOX061B1/OP5EfLV9b3CZjJf1T0rJAWQ6apbA9os
27UkkQKotoABbe5fkDKigcR+CJ7Hw3aciFggU8TojFj1bEek0kgg0L8OtGPDEZFAJaevOavYgjFs
Eqj2qKoO91EBkgMy7phAUTbvCE+jgEzLePxeCjREDqGAeodGxLPwfFXCvs8A8S62h0f4PfCNUj7X
vIutib+CHY0AKp3GxRakBq4fCSCgKLv0uwCLiAAik9gJbvRoksWB2orMYmciCxZrOFANVYmXSkNF
BAPpgvTOFyosXMNAvUUzxc/3BYt5PgxUqrLGAa7BKrVfAxI/g9IHAaTLY3uKddC7oJumT+tSVRYs
lGFhoESvn9IHpDMUqE9IZOskDUofKFCyxqYJCOJnIFAGAUm5nxEI6y7chM6AWDUmoeSoOKGOPh+Q
avbzJK8GyWaYhPIA2XxAXVrpEWVVIbkDk1CbAyhAszMMqIdbVC8czbbIy5B7RNI53N4hGkM3o7RV
Wnk2jca6xKCEBuUk+vAZIxKnZToKyVEarylTjhkrcwlbJvsZZkKwhJKBoFQ/LcCBKiv18/rFjqAw
zQCpOx8Lz4hV1LiEUkMj3P5AVSbNoaRI1CClx7yIC9rQUKZlD9SEcCDJHgkTM9iECCBZ89UTgfNo
RmXD0BfquWIAoyIHNHU9lYYNpg3KqOeblbNFD7c8CS+bvbFTNYl8BfsyC6QKj3gHllaZSmdg12ON
h4QwJyNSmDW5xskBDbzOmJUgXmXDUJJm7dEsr1PZNP/gCiOoJ3TMp6TKJF5T8w8mAi1YNBBl1yMR
oqOYaCAREaE0sH1/0BkPNLSEXeNJVW3UMtDhKRZqvJ5qRF5CPTPPb2pshWNnooHIlWAukWm8jFxX
HJklcoXbG75qDMSiPS0hQ21m2jr4jF0w90omq6jNTJHIQ708TWA0uubn+L6Kkd1eFUUET1tZG1Jv
RiF0xtiQhESNCUnrA2svUtnetF1dKXkeD8KIMAmZtq6WzdK6y+PbqwEg03eukt3KOpZllLcFuAn9
HqgtZJ+7vs0QP0NSCIZ0B2TEcpJpGCm9Buq7bDgCFWTnfnl3xuIFUF/mk86a1hrrutcV0iVQtOQk
U/7BDYIccHhZtF0A9aWbTgGkONbV2DBr7vIsyk9A4ufTkY234MyYYTqLcqG6ZyCJyRJ2MnnWlZjG
S9X9D2TK2ll9SCZ0PB+XeY6W/wH1gkPMA4n3/2zgz0d2zkCtS8sQNOAoOeW8FHsCwo8j0G++HiCn
iK66HyUza8+HdO75HSTUO3W9k0Q3nppaO5D0Wd7s65cx4Lh2tQN1n1HYRHlsI21AxmnXDZL0tQwO
e5dkA0pcD0ujOszcNqCaaEOlvf2n0c1Wk2xAynWVTGz7zpkVqFfN2jPhyGO2dvYKlLxRIJFta9eu
QGQ/PPH1z8ObdUN6BOLXMDIjbY4fgbrPZI39q8a1gbwAUe35zLKJj1un/yvQr1VlV5+zWvWfAVoT
bAQqPpTod3mFGIkWIG1rLKc5RSNagORUS85nq54Vt6ssQB8pps/YwUbrmYE+m+oXsiOQnKZVSTnn
oHW39SynvwD0iM3svwN0Muo8G7jTNBhD9WLa9cfj4nbIIqrsfb0gWGwx389AfQEPe+ONS6he/iPW
md9HtBjRP25y7vTp0PtIAAAAAElFTkSuQmCC')
#endregion
	

	
	$AdminLabel = if (Use-RunAs -check){"Administrator:"}
	$formTSTool3.Text = "$AdminLabel TSTool $TSToolVersion - Matthew Painter"
	
	$timer1.Enabled = $false
	
	
	# If max history count is 0 then it needs to be initialised to default 
	[int]$HistoryCountOriginal = Get-RegKey -Key Count
    if($HistoryCountOriginal -eq 0)
    {
		Get-RegKey -Key Count -Value 20 -Set 
    }
	
	

	if (!(Test-Path "$env:temp\history.csv"))
	{
		$History = New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u);"Computer"= $env:COMPUTERNAME; "User"= $env:USERNAME}
        $History | Export-csv -Path "$env:temp\history.csv"	-NoTypeInformation	
	}
	else
	{
		$History = Import-csv -Path "$env:temp\history.csv"
	}
	
	
	$ComputerHistory = $History | Where-Object {$_} | select -ExpandProperty computer
   	if ($ComputerHistory.count -ne $null -and $STA)
    {
       $textbox1.AutoCompleteCustomSource.AddRange($ComputerHistory)
    }


    	


	$ErrorActionPreference = 'stop'
	try
	{
		$computer = ($History[0] | Select-Object -ExpandProperty Computer).toupper()
	}
	catch
	{
        $computer = ($env:ComputerName).toupper()
	}
	$ErrorActionPreference = 'continue'	
	
	$textbox1.Text = $computer 
	
	$formTSTool3.ActiveControl = $textbox1 
	$SelectionStart = $textbox1.SelectionStart
	$textbox1.Focus()
	$textbox1.Select($SelectionStart, 0)
	
	If ($env:logonserver -eq "\\$env:computername" -or $env:logonserver -eq "\\MicrosoftAccount")
	{
		$Domain = "Connected to: Local Machine"
	}
	else
	{
		$ErrorActionPreference = 'stop'
		try
		{
			$Domain = "Connected to: $(([DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).Name)"
		}
		catch
		{
			$Domain = "Connected to: Local Machine"	
		}
		$ErrorActionPreference = 'continue'
	}
	
	# Writing the $Domain variable directly to status strip from here crashes the editor? this is a workaround
	$toolstripstatuslabel1_Click.invoke()
	
		
	$PictureBox3.Image = $picturebox3Image
	set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD"
	

	# Display QLD Filter option selection image
	if ([int](Get-RegKey -Key UseQLDFilter))
	{
		$addQLDPhoneFilterToolStripMenuItem.Image = $tick	
	}
	else
	{
		$addQLDPhoneFilterToolStripMenuItem.Image = $Cross		
	}
	
		
	# Retrieve SCCM Server settings (Set globally for all users of TSTool)
	if (Test-Path "$ParentDirectory\GlobalSettings.csv")
	{
	    $SettingsCSV = Import-Csv "$ParentDirectory\GlobalSettings.csv"

		if($SettingsCSV.SCCMServer) 
		{
			set-variable -name SCCMSiteServer -value $($SettingsCSV.SCCMServer) -scope script -description "SCCM SiteServer" 
		    set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCMNameSpace) -scope script -description "SCCM NameSpace" 
		}
		else
		{
			# Backward compatibility
			if($SettingsCSV.SCCM12Server)
			{
				set-variable -name SCCMSiteServer -value $($SettingsCSV.SCCM12Server) -scope script -description "SCCM SiteServer" 
		    	set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCM12NS) -scope script -description "SCCM NameSpace"
			}
			else
			{
				set-variable -name SCCMSiteServer -value $($SettingsCSV.SCCM07Server) -scope script -description "SCCM SiteServer" 
		    	set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCM07NS) -scope script -description "SCCM NameSpace"
			}
		}
	}
	
    # Check ExecutionPolicy
    if (!( "Unrestricted", "RemoteSigned", "Bypass" | % { if ( (Get-ExecutionPolicy) -eq $_ ){ $True } } ))
    {
      [Windows.Forms.MessageBox]::Show("Warning`nExecution policy is not set correctly!`n`nPS C:\>Set-ExecutionPolicy RemoteSigned", "TSTool $TSToolVersion","Ok","Warning")
    }
	
	$buttonDisconnect.Enabled = $false
	
}

$formMain_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}





#region Main remote machine data retrieval jobs

$buttonStartJob_Click={
	
	$buttonDisconnect.Enabled = $true
	
	[System.Windows.Forms.SendKeys]::SendWait("{ESC}")
	
	$timer1.Enabled = $false
	
	$TextBox1Validated = $textbox1.Text.Replace("`t", "")
	$TextBox1Validated = $TextBox1Validated.Trim()
	$textbox1.Text = $TextBox1Validated.toupper()
		
	if (-not($TextBox1Validated -eq $null -or $TextBox1Validated -eq ""))
	{
	   	$labelBarcode.foreColor = 'SteelBlue'
		$labelBarcode.Text = "$($textbox1.Text) "
		
		$StartJob0_Connectivity.invoke()
		$timer1.Enabled = $true
	}
	
	$picturebox2.BackColor = 'DarkGray'
}


$StartJob0_Connectivity={
	
	# Test connectivity (target machine)
	
    $Computer = $labelBarcode.text
	
	$buttonStartJob.Enabled = $false
	$buttonHistory.Enabled = $false
	$labelBarcode.foreColor = 'SteelBlue'
	
	$SelectionStart = $textbox1.SelectionStart
	$textbox1.Focus()
	$textbox1.Select($SelectionStart, 0)
	
	Add-JobTracker -Name "Connectivity" `
	-JobScript {
   		#--------------------------------------------------
   
		Param($Argument1)
		
		$Computer = $Argument1.Get_Item("Computer")
		
			
		function Global:Test-WMI
		{
			param(
				[string]$Computer = $env:computername,
				[int]$WMITimeOutSec = 10, 
				[switch]$CleanUp
			)

			$Hash = @{"ComputerName" = $Computer}


			$start = Get-Date
			if ($computer.trim() -as [ipaddress]){$isValidIP = $true}else{$isValidIP = $false}
			if ($isValidIP) 
			{
				if (Test-Connection -ComputerName ($Computer.trim()) -Count 1 -Quiet)
				{
					$IP4 = $computer.trim()
				}
				else
				{
					$IP4 = $null
				}
			} 
			else 
			{
				try{$IP4 = Test-Connection -ErrorAction 'stop' -ComputerName ($Computer.trim()) -Count 1 | select -ExpandProperty IPV4Address | select -ExpandProperty IPAddressToString}catch{}
			}
			
			if ($IP4)
			{
				Get-Job | where {$_.Command -match "Test-WMI" -and $_.State -eq "Completed"} | Remove-Job -force
				$JobName = Start-Job -ArgumentList $IP4 -ScriptBlock { "Test-WMI"; (GWMI Win32_ComputerSystem -ComputerName $args).name } | select -ExpandProperty Name

				do{
					$state = Get-Job -name $JobName | select -ExpandProperty State
					Start-Sleep -Milliseconds 50
					$TimeSpan = New-TimeSpan $start (Get-Date) 

				}until($TimeSpan.TotalSeconds -ge $WMITimeOutSec -or $State -eq "Completed")


				if ($State -eq "Completed")
				{
					$Name = (Receive-Job -name $JobName)[1]
					$Hash.Set_Item("WMIAccess", $true)
					if ($Name){ $Hash.Set_Item("ComputerName", $name) }
					Remove-Job -Name $JobName -Force
				}
				else
				{
					$Hash.Set_Item("WMIAccess", $false)

					if ($CleanUp)
					{
						Get-Job -Name $JobName | Remove-Job -force
					}
				}
				$Hash.Set_Item("Ping", $true) 
				$Hash.Set_Item("WMI_Timer", (New-TimeSpan $start (Get-Date) | select -ExpandProperty TotalMilliseconds)) 
			}
			else
			{
				$Hash.Set_Item("Ping", $false)
				$Hash.Set_Item("WMIAccess", $false)
			}
			
			if ( $name -eq $computer.trim() )
			{
				$Hash.Set_Item("DNSCheck", $true)
			}
			else
			{
				if ($isValidIP)
				{
					$Hash.Set_Item("DNSCheck", $true)
				}
				else
				{
					$Hash.Set_Item("DNSCheck", $false)
				}
			}
			
			$Hash.Set_Item("isValidIP", $isValidIP)
			New-Object -TypeName psobject -Property $Hash 
		}


		$Connectivity = Test-WMI -computer $Computer 

		# Build hash table 
		$Hash = @{
		Computer = $Computer
		ComputerName = $Connectivity.ComputerName
		Ping = $Connectivity.Ping
		WMIAccess = $Connectivity.WMIAccess
		WMI_Timer = $Connectivity.WMI_Timer
		C_Permissions = $false
		WinRM = $false
		RDP = $false 
		DNS = $Connectivity.DNSCheck 
		isValidIP = $Connectivity.isValidIP 
		}

		# Return Connectivity Object
		New-Object -TypeName PSObject -Property $Hash
		
		#--------------------------------------------------
	}`
	-CompletedScript {
		Param($Job)

		$Connectivity = Receive-Job -Job $Job 
		
		if ($Connectivity.Ping -and $Connectivity.WMIAccess -and $Connectivity.DNS -eq $true)
		{
			if ($picturebox2.BackColor -ne 'LimeGreen')
			{
				$labelBarcode.Text = "$($labelBarcode.Text) "
				$picturebox2.BackColor = 'LimeGreen'
			}

			# Note labelBarcode is subtley changed when button pressed (space added after name) 
			# Also labelBarcode is also subtley changed if previously no ping or wmi issue
			if ($labelBarcode.Text -eq $Connectivity.ComputerName)
			{
				# we have already loaded this computer due to timer1
				# just do the user specific queries
				$StartJob1.Invoke() 
			}
			else
			{ 
				# New computer loaded via connect button click
				# Or it has gone offline and come back again 
				if ($Connectivity.Computer.trim() -as [ipaddress] -and $Connectivity.ComputerName)
				{
					$labelBarcode.Text = $Connectivity.ComputerName
				} 

				$StartJob1.invoke()
				$StartJob2.invoke()

				[System.Media.SystemSounds]::Asterisk.Play()
			}
		}
		elseif ($Connectivity.Ping -and -not $Connectivity.WMIAccess)
		{
			if ($picturebox2.BackColor -ne 'Blue')
			{
				[System.Media.SystemSounds]::Hand.Play()
			}

			$picturebox2.BackColor = 'blue'
			$labelLOCKED.Text = "WMI Issue" 
			$labelLocation.text = ""
			$label1.text = ""
			$label2.Text = ""
			$textbox2.Text = ""
			$labelUserID.Text = ""
			$labelUserName.text = ""
			$PictureBox3.Image = $picturebox3Image
			set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD" 
			$labelUpTime.text = ""

			$labelBarcode.Text = "$($textbox1.Text) "
		}
		elseif($Connectivity.WMIAccess -and -not $Connectivity.DNS)
		{
			if ($picturebox2.BackColor -ne 'Blue')
			{
				[System.Media.SystemSounds]::Hand.Play()
			} 
			$picturebox2.BackColor = 'blue'
			$labelLOCKED.Text = "DNS Issue" 
			$labelLocation.text = ""
			$label1.text = ""
			$label2.Text = ""
			$textbox2.Text = ""
			$labelUserID.Text = ""
			$labelUserName.text = ""
			$PictureBox3.Image = $picturebox3Image
			set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD" 
			$labelUpTime.text = ""
			$labelBarcode.Text = "$($textbox1.Text) "
		}
		else
		{
			if ($picturebox2.BackColor -ne 'Red')
			{
				[System.Media.SystemSounds]::Hand.Play()
			}
			
			$picturebox2.BackColor = 'Red'
			$labelLOCKED.Text = "OFF LINE"	
			$labelLocation.text = ""
            $label1.text = ""
			$label2.Text = ""
    		$textbox2.Text = ""
			$labelUserID.Text = ""
			$labelUserName.text = ""
			$PictureBox3.Image = $picturebox3Image	
			$labelUpTime.text = ""			
		}
		
				
		# calculate refresh interval time here based on WMI access time (cater for slow machines/connections)
		$timer1.Interval = 30000 + ($Connectivity.WMI_Timer * 6)

		$buttonStartJob.Enabled = $true	
		$buttonHistory.Enabled = $true
		
		$labelBarcode.foreColor = 'MediumBlue'
			
	}`
	-UpdateScript {
		Param($Job)
		#$results = Receive-Job -Job $Job -Keep
		
	}`
	-ArgumentList @{'Computer'= $Computer}
}


$StartJob1={
	
	# User Specific Queries + uptime (Dynamic type properties)
	# Assume ping and wmi test passed 
	
	$Computer = $labelBarcode.text.Trim()
	
	$labelUserID.foreColor = 'SteelBlue'
	$labelUserName.foreColor = 'SteelBlue'	
	$label2.foreColor = 'SteelBlue'
	$labelUpTime.foreColor = 'SteelBlue'
	
	Add-JobTracker -Name "RemoteQuery" `
	-JobScript {
   		#--------------------------------------------------
   
		Param($Argument1)	
		
		$Computer = $Argument1.Get_Item("Computer")
		$DomainConnected = $Argument1.Get_Item("DomainConnected")
		
		
		
		function Global:Get-ScreenSaver
		{
		    param(
			   $computername = $env:computername
			)
			
			$hash = @{on = $false}

		    try
		    {
		        if (GWMI Win32_Process -ComputerName $computername | ?{$_.Name -match "\.scr"})
		        {
		            $hash = @{on = $true}
		        }
		    }
		    catch
		    {}
		    
		    New-Object -TypeName psobject -Property $hash
		}
		
		
		
		function Global:Get-LockedWorkStation
		{
		    param(
		        $computername = $env:computername
		    )

		    $regexa = '.+Domain="(.+)",Name="(.+)"$'
		    $regexd = '.+LogonId="(\d+)"$'

		    try
		    {
		        $logon_sessions = @(Get-WmiObject win32_logonsession -ComputerName $computername -ErrorAction 'stop')
		        $logon_users = @(Get-WmiObject win32_loggedonuser -ComputerName $computername -ErrorAction 'stop')
		        $LogonUI = Get-WmiObject win32_process -computername $computername -ErrorAction 'stop' -filter "name like 'LogonUI.exe'" | select name
		    }
		    catch
		    {
		        break
		    }

		    $session_user = @{}

		    $logon_users |% {
		    $_.antecedent -match $regexa > $nul
		    $username = $matches[1] + "\" + $matches[2]
		    $_.dependent -match $regexd > $nul
		    $session = $matches[1]
		    $session_user[$session] += $username
		    }


		    if (($logon_sessions | ?{$_.logontype -eq 2} | %{$session_user[$_.logonid]}) -and $logonUI)
		    {
		        New-Object -TypeName psobject -Property @{isLocked = $true}   
		    } 
		    else
		    {
		        New-Object -TypeName psobject -Property @{isLocked = $false} 
		    }
		}

		function Get-UserLogonFull
		{
		    <#
		    .Synopsis
		       Get active user sessions from computer
		    
		    .Description
		       Function leverages mjolinor's Get-LoggedonUser that uses WMI and Boe Prox's Get-ComputerSessions 
		       that gets logon sessions using windows utility query.exe
		       
		       Essentially this script only focus's on user sessions retrieved by query.exe and binds 
		       some extra properties like user logon time and authentication type from WMI to the output object. 
		       
		       The benefit of this script over something simple like getting the process owner of explorer.exe
		       Is that you can identify active and disconnected sessions and list the output in the order that 
		       the users logged in.   
		       
		       This is particularly useful when the remote computer you are querying has switched users or is 
		       a terminal server. 
		       
		       Script requires administrator privilege and by default will :-
		       Start the "RemoteRegistry" service if required
		       Changing this key "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\AllowRemoteRPC" = 1
		        
		 
		    .parameter ComputerName 
		       Remote computer to query, by default will act on local machine
		             
		   .Example
		       Get-UserLogonFull -computername Server01 | sort-object -property @{Expression="state";Descending=$false}, @{Expression="starttime";Descending=$true} | ft computer, username, state, StartTime -auto
		       
		    Description
		    -----------
		       List all user logon sessions of computer Server01 
		       Active sessions are listed first then disconnected sessions
		       Sessions are listed in order of logon time with latest logon at top. 
		       
		    .Example
		       Get-Content computers.txt | Get-UserLogonFull | Export-Csv report.csv -NoTypeInformation
		       
		    Description
		    -----------
		       List all logon sessions of all computers saved in computer.txt and output to CSV
		                    
		   .Inputs
		       System.string
		       computer name(s)
		                
		    .Outputs
		       System.object
		       
		                  
		    .Notes
		       NAME:      Get-UserLogonFull
		       PURPOSE:   Get active user sessions
		       VERSION:   1.0
		       AUTHOR:    Matthew Painter
		       LASTEDIT:  01/Aug/2013     
		          
		#>
		 
		    
		    [CmdletBinding()]
		         
		    Param( 
		        [Parameter( 
		        Mandatory = $false, 
		        Position = 0, 
		        ValueFromPipeline = $True)] 
		        [string[]]$computername=$env:computername
		    )
		    
		    begin 
		    {            
		        Function Get-ComputerSessions 
		        { 
		            # Original Boe Prox 01Nov2010 
		            
		            Param(
		            [string]$computer,
		            [switch]$force
		            ) 
		 
		            if ($force)
		            {
		            	try{
		             	   $RemoteRegistry = gwmi -computername $computer -class win32_service -ErrorAction 'stop' | Where-Object { $_.Name -eq "RemoteRegistry" }
		                }catch{}
		                
						if ($RemoteRegistry.State -eq "Stopped" -and $computer -ne $env:computername) 
						{						
		                    $return = $RemoteRegistry.changestartmode("automatic") 
		                    if($return.returnvalue -eq 0) {
		                        $RemoteRegistry.StartService()
								
								Write-Verbose "Attempting to Start Remote Registry"
		                        Start-Sleep -Seconds 15                     
		                    }
						}
						
						$erroractionpreference = 'silentlycontinue'		                
		            		 
		                $registryPath = "SYSTEM\CurrentControlSet\Control\Terminal Server"
		                $PropertyName = "AllowRemoteRPC"
		                $baseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $computer)
		                $key = $baseKey.OpenSubKey($registryPath, $true)
		                        
		                if ([Int32]($key.GetValue($propertyName)) -eq 0)
		                { 
		                    $key.SetValue($propertyName, "1", "DWORD")
		                    Write-Verbose "Attempt To Set Registry Key AllowRemoteRPC "
		                    start-sleep -s 5 
		                } 
		                
		                $key.Close()
		                $baseKey.Close()                
		            }
		            
		            
		            $erroractionpreference = 'stop' 
		              
		            try{
		                $sessions = query session /server:$computer
		            }
		            catch{
		                write-warning $error[0].Exception.Message

		                # fall back in case of remote RPC failure
		                try{
		                    $users = Get-WmiObject Win32_Process -ErrorAction 'stop' -ComputerName $computer -filter "Name = 'explorer.exe'"  | foreach -process {$_.GetOwner().User}
		                    foreach ($user in $users){
		                        $temp = "" | Select Computer,SessionName, Username, Id, State, Type, Device 
		                        $temp.Computer = $computer 
		                        $temp.State = "unknown"
		                        $temp.Username = $user
		                        $temp
		                    } 
		                     
		                }catch{break}
		            } 
		            $erroractionpreference = 'continue'
		            
		            if (!$temp.username){             
		                1..($sessions.count -1) | % { 
		                    $temp = "" | Select Computer,SessionName, Username, Id, State, Type, Device 
		                    $temp.Computer = $computer 
		                    $temp.SessionName = $sessions[$_].Substring(1,18).Trim() 
		                    $temp.Username = $sessions[$_].Substring(19,20).Trim() 
		                    $temp.Id = $sessions[$_].Substring(39,9).Trim() 
		                    $temp.State = $sessions[$_].Substring(48,8).Trim()
		                    $temp.Type = $sessions[$_].Substring(56,12).Trim() 
		                    $temp.Device = $sessions[$_].Substring(68).Trim() 
		                    $temp 
		                }
		            }
		        }
		         
		        function Get-LoggedonUser
		        {    
		            # Original mjolinor 3/17/10
		               
		            param($computername)
		             
		            $regexa = '.+Domain="(.+)",Name="(.+)"$' 
		            $regexd = '.+LogonId="(\d+)"$'     
		             
		            $logontype = @{ 
		                "0"="Local System" 
		                "2"="Interactive" #(Local logon) 
		                "3"="Network" # (Remote logon) 
		                "4"="Batch" # (Scheduled task) 
		                "5"="Service" # (Service account logon) 
		                "7"="Unlock" #(Screen saver) 
		                "8"="NetworkCleartext" # (Cleartext network logon) 
		                "9"="NewCredentials" #(RunAs using alternate credentials) 
		                "10"="RemoteInteractive" #(RDP\TS\RemoteAssistance) 
		                "11"="CachedInteractive" #(Local w\cached credentials) 
		            }
		            
		            try{
		                $err=$null
		                $logon_sessions = @(gwmi win32_logonsession -ComputerName $computername -ErrorAction 'stop') 
		                $logon_users = @(gwmi win32_loggedonuser -ComputerName $computername -ErrorAction 'stop') 
		            }
		            catch{
		                write-warning $error[0].Exception.Message
		                break
		            } 
		             
		            $session_user = @{}  
		             
		            $logon_users |% { 
		                $_.antecedent -match $regexa > $nul 
		                $username = $matches[1] + "\" + $matches[2] 
		                $_.dependent -match $regexd > $nul 
		                $session = $matches[1] 
		                $session_user[$session] += $username 
		            }
		             
		             
		            $logon_sessions |%{ 
		                $starttime = [management.managementdatetimeconverter]::todatetime($_.starttime) 
		                 
		                $loggedonuser = New-Object -TypeName psobject 
		                $loggedonuser | Add-Member -MemberType NoteProperty -Name "Session" -Value $_.logonid 
		                $loggedonuser | Add-Member -MemberType NoteProperty -Name "User" -Value $session_user[$_.logonid] 
		                $loggedonuser | Add-Member -MemberType NoteProperty -Name "Type" -Value $logontype[$_.logontype.tostring()] 
		                $loggedonuser | Add-Member -MemberType NoteProperty -Name "Auth" -Value $_.authenticationpackage 
		                $loggedonuser | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $starttime
		                  
		                $loggedonuser 
		            }
		        } 
		    }    
		    Process { 
		        ForEach($computer in $computername) 
		        {
		            if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
		            {            
		                Write-Verbose "Connecting Computer $computer"
		                
		                $loggedonuser = Get-LoggedonUser -computer $computer 
		                
		                Get-ComputerSessions -computer $computer -force | sort username -unique | sort starttime -Descending | ? {$_.username} | %{
		                    
		                    :foo foreach ($User in $loggedonuser)
		                    {
		                        if ($User.User){
		                            if ($User.User.split("\")[1] -eq $_.UserName){
		                                $_ | add-member -MemberType noteproperty -name User -value $User.user -PassThru |
		                                add-member -MemberType noteproperty -name Auth -value $User.Auth -PassThru |
		                                add-member -MemberType noteproperty -name TypeFull -value $User.Type -PassThru |
		                                add-member -MemberType noteproperty -name StartTime -value $User.StartTime -PassThru
		                                
		                                break foo
		                            }
		                        }
		                    }
		                } 
		            }else
		            {
		                write-verbose "Cant Ping $computer"
		            }
		        }
		    }
		}

		
	
		# Build hash table            
		$Hash = @{
			ComputerName = $Computer
			UserID = " "
			Name = " "
			Phone = " "
			Mobile = " "
			Locked = " " 
			ScreenSaver = " "
			email = " "
			ExceptionMessage = $null
        }

	
        try
        {
            $Win32_OperatingSystem = Get-WmiObject -class Win32_OperatingSystem -ComputerName $Computer -ErrorAction 'stop'
			$UserID = Get-UserLogonFull -computername $computer | sort-object -property @{Expression="state";Descending=$false}, @{Expression="starttime";Descending=$true} | Select-Object -ExpandProperty username -First 1
            			
			$SystemUptime = (New-TimeSpan ([System.Management.ManagementDateTimeconverter]::ToDateTime($Win32_OperatingSystem.LastBootUpTime)) (Get-Date)) 
			Switch ($SystemUptime) 
			{ 
			   {$_.days -eq 1} {$Days="1 Day"} 
			   {$_.days -gt 1} {$Days=[string]$_.days + " Days"} 
			   {$_.hours -eq 1} {$Hrs="1 Hour"} 
			   {$_.hours -gt 1} {$Hrs=[string]$_.hours + " Hours"} 
			   {$_.Minutes -eq 1} {$Mins="1 Minute "} 
			   {$_.Minutes -gt 1} {$Mins=[string]$_.minutes + " Minutes"} 
			   {$_.Seconds -eq 1} {$Secs="1 Second "} 
			   {$_.Seconds -gt 1} {$Secs=[string]$_.seconds + " Seconds"} 
			} 
			 
			$Hash.Set_Item("UpTime", "$Days $Hrs $Mins $Secs".Trim())
			
        }
        catch
        {
			$Hash.Set_Item("ExceptionMessage", $_.Exception.Message)
        }
		
		$Hash.Set_Item("UserId", $UserID)	
		

		if ($UserID)
		{
			if (-not($DomainConnected -match 'Local'))
			{	
				# get properties from AD
				$ErrorActionPreference = 'stop'
				try
				{
					$Searcher = New-Object DirectoryServices.DirectorySearcher([ADSI]"")
				    $Searcher.Filter = "(&(ObjectClass=User)(SAMAccountName=$UserID))"
				    $FoundUser = $Searcher.findOne()
				    $P = $FoundUser | Select path
				    $User = [ADSI]$P.path
					
				    $Hash.Set_Item("Photo", $User.Properties["thumbnailPhoto"].Value)
					$Hash.Set_Item("Name", $User.Properties["DisplayName"].Value)
					$Hash.Set_Item("Phone", $User.Properties["telephoneNumber"].Value)
					$Hash.Set_Item("Mobile", $User.Properties["Mobile"].Value)
					$Hash.Set_Item("email", $User.Properties["mail"].Value)
					
				}
				Catch
				{
					$Hash.Set_Item("Name", "Failed to access AD")
				}
				$ErrorActionPreference = 'Continue'
			}
			
			# Get-LockedWorkStation only works W7 and up, whereas Get-ScreenSaver works XP and up
			if (Get-LockedWorkStation -computer $Computer | Select-Object -ExpandProperty isLocked)
			{				
				$Hash.Set_Item("Locked", $true)
			}
			else
			{				
				if ((Get-ScreenSaver -computer $Computer).on)
				{
					$Hash.Set_Item("ScreenSaver", $true)
				}
			}			
		}	
		else
        {
            $Hash.Set_Item("UserID", "No User")
        }
			
		 # Return Inventory object
		New-Object -TypeName PSObject -Property $Hash
		
		#--------------------------------------------------
	}`
	-CompletedScript {
		Param($Job)
	
		$results = Receive-Job -Job $Job	
		
		If ($results.ExceptionMessage)
		{
			$picturebox2.BackColor = 'Blue'
            Update-Display ($results.ExceptionMessage) -color 'red'
		}
		else
		{
			# Update machine access history 
			$History = "$env:temp\history.csv"                       
    	    
    	    if (test-path $History)
            {
                $HistoryObj = Import-Csv -Path $History
            }
            else
            {
                $HistoryObj = New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u); "Computer"= "$($results.ComputerName)"; "User"= "$($results.UserID)"}
            }  
            
			# Do not want to overwrite a user name in the history with 'no user' just because that user logged off or shutdown
			$ErrorActionPreference = 'stop'
			try
			{
				if (($HistoryObj[0] | Select-Object -ExpandProperty computer) -eq $results.ComputerName)
				{
					if ($results.UserID -eq "No User")
					{
						# stick with history version of last user
						$lastUser = $HistoryObj[0] | Select-Object -ExpandProperty user						
					}
					else
					{
						$lastUser = $results.UserID
					}					
				}
				else
				{
					$lastUser = $results.UserID
				}
			}
			catch
			{
		        $lastUser = $results.UserID
			}
			$ErrorActionPreference = 'continue'	
			
		
    	    $temp = @( New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u); "Computer"= "$($results.ComputerName)"; "User"= $lastUser} )
            $HistoryObj = $HistoryObj | % { if( $_.Computer -ne $results.ComputerName) { $_ } } 
            
            $temp += $HistoryObj    
                      
            $count = [int](Get-RegKey -Key Count)			
        	$temp | Where-Object {$_} | select -first $count | Export-csv -Path $History -NoTypeInformation
			
			$ComputerHistory = $temp | Where-Object {$_} | select -ExpandProperty computer
    		if ($ComputerHistory.count -and $STA)
            {
    	       $textbox1.AutoCompleteCustomSource.AddRange($ComputerHistory)
            }
		}
		
		
		# Update "blue text" results panes		
		$labelUserID.foreColor = 'MediumBlue'
		$labelUserName.foreColor = 'MediumBlue'
		
		$label2.foreColor = 'MediumBlue'
		
		# Many of my users have entered phone number information like "My number is 5412 3456 but dont give to public" (instead of just a number)
		# Using the QLD filter the displayed number will be "0754123456"
		# If you want to use a filter you will probably have to create your own for your particular region
		if ([int](Get-RegKey -Key UseQLDFilter))
		{
			$label2.text = "$($results.UserID) `n$($results.name) `n$($results.email) `n`n$(Clean-NumberQLD-AU $results.phone) `n$(Clean-NumberQLD-AU $results.mobile) "
		}
		else
		{
			$label2.text = "$($results.UserID) `n$($results.name) `n$($results.email) `n`n$($results.phone) `n$($results.mobile) "
		}
		
		set-variable -name email -value $results.email -scope script -description "Email Address of User" 
			
		$labelUserName.text = $results.Name
		$labelUserID.text = $results.UserID
		
		$labelUpTime.foreColor = 'MediumBlue'		
		$labelUpTime.text = "$($results.UpTime)"
	
		
		
		# Update image from AD or put in a dummy image
		
		if ($results.UserID -eq "No User")
        {
            $PictureBox3.Image = $picturebox3Image  
            set-variable -name CurrentImageSet -value $picturebox3Image -scope script -description "Alt to Raw image in bytes from AD"          
        }		
		else
        {
            $PictureBox3.Image = $picturebox3UserImage  
            set-variable -name CurrentImageSet -value $picturebox3UserImage -scope script -description "Alt to Raw image in bytes from AD"          
        }
		
        if ($results.Photo)
        {
            $PictureBox3.Image = $results.Photo
            set-variable -name CurrentImageSet -value $results.Photo -scope script -description "Raw image in bytes from AD"                        
        }
        

		
		
		
		# Red Text Staus Banner	
		if ($results.Locked -eq $true)
		{
			$labelLOCKED.Text = "LOCKED"
		}
		else
		{
			if ($results.ScreenSaver -eq $true)
			{			
				$labelLOCKED.Text = "SCREEN SAVER"	
			}
			else
			{
				$labelLOCKED.Text = ""	
			}
		}
	
	}`
	-UpdateScript {
		Param($Job)
		#$results = Receive-Job -Job $Job -Keep

	}`
	-ArgumentList @{'DomainConnected' = $toolstripstatuslabel1.Text; 'Computer'= $Computer}
}


$StartJob2={
	
	# Machine Specific Queries 	(static type properties)
	
	$Computer = $labelBarcode.text.Trim()
	
	$labelLocation.foreColor = 'SteelBlue'	
	$label1.foreColor = 'SteelBlue'

	
	Add-JobTracker -Name "RemoteQuery" `
	-JobScript {
   		#--------------------------------------------------
		Param($Argument1)
		
		$Computer = $Argument1.Get_Item("Computer")
		$LocationsCSV = $Argument1.Get_Item("LocationsCSV")
		
		$HashLookup = @{}
		foreach($rec in (Import-Csv -Path $LocationsCSV))
		{
			$HashLookup.Set_Item($rec.subnet, $rec.location)
		}
		
		
		# Build hash table            
		$Hash = @{			
			Machine = $computer
			Location = " "
			IPv4 = " "
			UpTime = " "
			ExceptionMessage = $null
        }


		try
	    {
	        # $computer = $env:computername
	        $Win32_NetworkAdapter = Get-WmiObject win32_networkadapter -ComputerName $computer -ErrorAction 'stop'    
	        $Win32_NetworkAdapterConfiguration = Get-WmiObject Win32_NetworkAdapterConfiguration -ComputerName $computer -ErrorAction 'stop'
	        $Win32_OperatingSystem = Get-WmiObject -class Win32_OperatingSystem -ComputerName $computer -ErrorAction 'stop'
	        $Win32_ComputerSystem = Get-WmiObject -class Win32_ComputerSystem -ComputerName $computer -ErrorAction 'stop'
	        $Win32_Bios = Get-WMIObject -Class Win32_Bios -ComputerName $computer -ErrorAction 'stop'
	        
			$Hash.Set_Item("Machine", "$($Win32_ComputerSystem.Name)")
	        $Hash.Set_Item("Model", "$($Win32_ComputerSystem.Manufacturer)$($Win32_ComputerSystem.Model)")
	        $Ram = [math]::round($Win32_ComputerSystem.TotalPhysicalMemory /1Gb,1); if ($Ram -gt 0){ $Hash.Set_Item("Ram", "$Ram Gb") }
	        $Hash.Set_Item("OS", "$($Win32_OperatingSystem.Caption) $($Win32_OperatingSystem.CSDVersion)")
	        $Hash.Set_Item("ServiceTag", "$($Win32_Bios | select -expandproperty serialnumber)")   
	        $Hash.Set_Item("BuildDate", "$([System.Management.ManagementDateTimeconverter]::ToDateTime($Win32_OperatingSystem.installdate))")
	                
	    }
	    catch
	    {
	        $Hash.Set_Item("ExceptionMessage", $_.Exception.Message)
	        # Return Inventory object
	        return New-Object -TypeName PSObject -Property $Hash
	    }
		
		
		function Test-Property
		{
		    param($TestObject, $TestProperty)

		    Get-Member -InputObject $TestObject |
		    % {                                            
		        if(($_.MemberType -eq "Property" ) -and ($_.Name -eq $TestProperty))                        
		        {                            
		            return $true                        
		        }                    
		    }                    
		    return $false 
		}
	            
		
	    try
	    {          
	        $NetEnabledExists = Test-Property -TestObject $Win32_NetworkAdapter -TestProperty "netenabled"    
			$index = $win32_NetworkAdapter | Where-Object {$_.NetConnectionID -and $_.MACAddress -and ($_.netenabled -or !$NetEnabledExists)} | Select-Object -ExpandProperty index 
 
	        $Hash.Set_Item("AdaptorIndex", $index)

	        foreach ($i in $index)
	        {     
	            $ip += ($Win32_NetworkAdapterConfiguration | ? {$_.index -eq $i}).IPAddress
				$sn += ($Win32_NetworkAdapterConfiguration | ? {$_.index -eq $i}).IPSubnet
	        }
	                
	        $IPv4 = $ip | ? { $_ -like '*.*' } | Select-Object -First 1                
	        $Hash.Set_Item("IPv4", $IPv4)
			$ips = $IPv4.split(".")  
	                
	        $SubnetMask = $sn| ? { $_ -like '*.*' } | Select-Object -First 1     
	        $Hash.Set_Item("SubnetMask", $SubnetMask)
			$SubnetMasks = $SubnetMask.split(".")
	        
	           
	        $Subnet = $null            
	        for ($i=0; $i -lt 4; $i++ )   
	        {  
	            $Subnet  += [string]($ips[$i] -band $SubnetMasks[$i])  
	            if($i -lt 3)  
	            {  
	                $Subnet  += "."  
	            }  
	        } 
			
	        $Hash.Set_Item("Subnet", $Subnet)
	        $Hash.Set_Item("Location", ($HashLookup.Get_Item($Subnet)))
	     
	    }
	    catch
	    {
	        $Hash.Set_Item("ExceptionMessage", $_.Exception.Message)
	    }
		
							
		# Return Inventory object
		New-Object -TypeName PSObject -Property $Hash
		
	}`
	-CompletedScript {
		Param($Job)
		
		$results = Receive-Job -Job $Job 
		
		# Update "blue text" results panes	
		$label1.foreColor = 'MediumBlue'
		$labelLocation.foreColor = 'MediumBlue'			
	   	$label1.text = "$($results.Machine)`n$($results.Model)`n$($results.OS)`n$($results.Ram)`n$($results.ServiceTag)`n$($results.IPv4)`n$($results.BuildDate)"
		$textbox2.Text = $results.ServiceTag
		
        # In the case a machine name was resolved from IP passed to script:-
        if ($results.Machine)
        {
            $labelBarcode.Text = $results.Machine.toUpper()
        }
				
		
		# To do - Add something a bit more intuitive around this 
		if ($results.Location)
		{
			$labelLocation.text = $results.Location
		}
		else
		{
			$labelLocation.text = $results.subnet
		}
		

	}`
	-UpdateScript {
		Param($Job)
		
	}`
	-ArgumentList @{'LocationsCSV' = $locationsCSV; 'Computer'= $Computer}
}

#endregion 




#Region Remote Data Retrieval Buttons

$buttonProfileSvr_Click={
	
	$profileServer = Get-RegKey -Key profileServer
	
	if ($profileServer -eq "0")
	{
		# hardcoded but user can edit from application (in a roaming profile environment this method will identify user's active workstations)
		Get-RegKey -Key profileServer -Value "scfs11" -Set 
		$setProfileServerToolStripMenuItem_Click.invoke()
	}
	
	$profileServer = Get-RegKey -Key profileServer
	
	if (Test-Connection -ComputerName $profileServer -Count 1 -Quiet)
	{

		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
		$UserID = [Microsoft.VisualBasic.Interaction]::InputBox("Enter UserID of specific user or enter none to list all users connected to profile server", "TSTool $TSToolVersion", $null)
        
        if ($UserID)
        {
            $ButtonJob = "Filter-NameServerConnection -userID $userID -computer $profileServer | Format-Table username,computername,sharename,activetime -AutoSize"
			$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $profileServer; 'JobBlurb' = "User $userID - Open file conections on profile server $profileServert"; 'userID' = $UserID ; }
			$RemoteJobButtons2.invoke()
        }
        else
        {
            $ButtonJob = "Get-WmiObject win32_serverconnection -computerName $profileServer | sort username | Format-Table username,computername,sharename,activetime -AutoSize"
			$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $profileServer; 'JobBlurb' = "Users with open files on profile server $profileServert"; }
			$RemoteJobButtons2.invoke()
        }
		
	}
	else
	{
		Update-Display "Check you can ping profile server or `nUpdate server name under options menu" -color 'red'		
	}
}

$buttonMonitors_Click={
		
    $Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		Update-Display "$computer Monitor Info" -Color 'Yellow'
	
		if ($label1.Text -match "Windows 7" -or $label1.Text -match "Windows 8")
		{
			$ActiveMonitors = Get-ActiveMonitor -computer $computer
            if (!($ActiveMonitors.ErrorMessage))
            { 
                Update-Display ($ActiveMonitors | select Monitor, Description, SerialNumberID, ProductCodeID, YearOfManufacture, WeekOfManufacture)
                Update-Display (Get-MonitorResolution -computer $computer)
            }
            else
            {
                Update-Display $ActiveMonitors.ErrorMessage -color 'Red'
            }
		}
		else
		{
			Update-Display "This function is only supported on Windows 7 and Windows 8" -color 'Red'
		}
	}
}


$AddRemovePrograms_Click={	
    $Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		$OS = Get-WMIObject -Class win32_operatingsystem
	    $ThisOS = $OS.OSArchitecture
	    
	    $OS = Get-WMIObject -Class win32_operatingsystem -ComputerName $computer
	    $RemoteOS = $OS.OSArchitecture
	    
	    if ($ThisOS -match "32" -and $RemoteOS -match "64" )
	    {
			$Warning =  "Warning - Cant read 64bit registry from this 32bit machine" 		
	    }
		else
		{
			$Warning = $null
		}	
		
		$ButtonJob = "Get-AddRemovePrograms $Computer | select name, version, InstallDate | ft -autosize"
		$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Add Remove Programs (Live) - $computer"; 'Warning' = $Warning; }
		$RemoteJobButtons.invoke()
	}
}

$buttonWin8Apps_Click={	
    $Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		if ($label1.Text -match "Windows 8")
		{
			if (Use-RunAs -check)
			{
				$ButtonJob = "Invoke-Command {Get-AppxPackage -allusers | sort name | select name, version | ft -autosize | out-string} -computername $computer"
				$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Get Windows8 Style 'Modern Apps' (Live) - $computer"; }
				$RemoteJobButtons.invoke()
			}
			else
			{
				Update-Display "Get Windows8 Style 'Modern Apps' (Live) - $computer" -color 'Yellow'
				Update-Display "This command requires Administrator privilage" -color 'Red'	
			}
		}
		else
		{
			# bit dry - yes i know
			Update-Display "Get Windows8 Style 'Modern Apps' (Live) - $computer" -color 'Yellow'
			Update-Display "Computer $computer is not Windows8" -color 'Red'
		}
	}
}

$InstalledMSI_Click={
    $Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
    	$Answer = [Windows.Forms.MessageBox]::Show("Warning - May Take Several Minutes`nAlso a consistency check is performed on every MSI", "TSTool $TSToolVersion","YESNO","Exclamation")
   
		if ($answer -eq "Yes")
		{
			$ButtonJob = "Get-WmiObject win32_Product -computer $computer | Select Name,Version,Vendor,Installdate | Sort-Object name | ft * -autosize"
			$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "MSI Installed (Live) - $computer"; }
			$RemoteJobButtons.invoke()
		}
	}
}

$buttonIPConfig_Click={
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		$ButtonJob = "Get-IPConfig $computer"
		$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Basic IPConfig - $computer"; }
		$RemoteJobButtons.invoke()
	}
}


$buttonGPUpdate_Click={	
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		$ButtonJob = @"
		if ((Invoke-WmiMethod -ComputerName $Computer -Path win32_process -Name create  -ArgumentList "gpupdate /target:Computer /force /wait:0").ReturnValue -eq 0){"Success"}else{"Fail"}
"@
		$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Refreshing Machine GroupPolicy - $computer"; }
		$RemoteJobButtons.invoke()
	}
}


$buttonProcesses_Click={
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		$ButtonJob = @"	
		Get-WmiObject win32_process -computername $computer -ErrorAction 'stop' | select description, CommandLine | sort description | ft -AutoSize
		
"@
		$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Processes Running - $computer"; }
		$RemoteJobButtons.invoke()
	}
}




$RemoteJobButtons={
	
	# These remote job buttons are to be run against connected pc
	if ($buttonStartJob.Enabled -eq $true)
	{		
		# All job type buttons disabled
		$buttonProcesses.Enabled = $false
		$buttonGPUpdate.Enabled = $false
		$buttonIPConfig.Enabled = $false
		$InstalledMSI.Enabled = $false
		$AddRemovePrograms.Enabled = $false
		$FilteredLive.Enabled = $false
		$buttonWin8Apps.Enabled = $false
		$buttonProfileSvr.Enabled = $False
		$buttonWakeUp.Enabled = $False
		
		$formTSTool3.Cursor = 'AppStarting'		
		set-variable -name "JobBlurb" -value $RemoteJobButtonArgs.Get_Item("JobBlurb") -scope script -description "jobBlurb"
		Update-Display $JobBlurb -color 'Yellow'
		Update-Display $RemoteJobButtonArgs.Get_Item("Warning") -color 'Red'
		
		Add-JobTracker -Name "JobName" `
		-JobScript {
	   		#--------------------------------------------------
			Param($Argument1)
			
			$ScriptJob = $Argument1.Get_Item("ScriptJob")
			$computer = $Argument1.Get_Item("computer")
			
			function Get-IPConfig($computer)
			{		
				try
				{
					$Win32_NetworkAdapterConfiguration = Get-WmiObject -Class Win32_NetworkAdapterConfiguration -ComputerName $Computer -ErrorAction 'stop' 
					
					$Win32_NetworkAdapterConfiguration | ? {$_.IPEnabled -eq $true -and $_.DHCPEnabled -eq $true} | 
					Format-List @{ Label="Computer Name"; Expression= { $_.__SERVER }}, Description, MACAddress, IPAddress, IPSubnet, DefaultIPGateway, DHCPEnabled, DHCPServer, @{ Label="DHCP Lease Obtained"; Expression= { [System.Management.ManagementDateTimeconverter]::ToDateTime($_.DHCPLeaseObtained) }},@{ Label="DHCP Lease Expires"; Expression= { [System.Management.ManagementDateTimeconverter]::ToDateTime($_.DHCPLeaseExpires) }}
					
					$Win32_NetworkAdapterConfiguration | ? {$_.IPEnabled -eq $true -and $_.DHCPEnabled -eq $false} | 
					Format-List @{ Label="Computer Name"; Expression= { $_.__SERVER }}, Description, MACAddress, IPAddress, IPSubnet, DefaultIPGateway, DHCPEnabled
				}
				catch
				{
					$_.Exception.Message	
				}					
			}
			
			
			function Get-AddRemovePrograms
			{
				param([string]$computer)
				
				try{
					$RemoteRegistry = gwmi -computername $computer -class win32_service -ErrorAction 'stop' | Where-Object { $_.Name -eq "RemoteRegistry" }
				}catch{}
				
				if ($RemoteRegistry.State -eq "Stopped" -and $computer -ne $env:computername) 
				{						
                    $return = $RemoteRegistry.changestartmode("automatic") 
                    if($return.returnvalue -eq 0) {
                        $RemoteRegistry.StartService()
                        Start-Sleep -Seconds 15                     
                    }
				}
				else
				{			
					$array = @()
					
				    $UninstallKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" 
				    $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine',$computer) 

				    $regkey=$reg.OpenSubKey($UninstallKey) 
	                
	                if ($regkey -ne $null)
	                {
	                
					    $subkeys=$regkey.GetSubKeyNames() 
					     
					    foreach($key in $subkeys)
					    {
					        $thisKey=$UninstallKey+"\\"+$key 
					        $thisSubKey=$reg.OpenSubKey($thisKey) 
					        $obj = New-Object PSObject
					        $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computer
					        $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value $($thisSubKey.GetValue("DisplayName"))
					        $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($thisSubKey.GetValue("DisplayVersion"))
					        $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($thisSubKey.GetValue("InstallDate"))
					        $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher"))
							$obj | Add-Member -MemberType NoteProperty -Name "SystemComponent" -Value $($thisSubKey.GetValue("SystemComponent")) 
					        $array += $obj          
					    } 
					}		
				
			    	# 32bit software installed on a 64 bit machine			   
			        $UninstallKey="SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
			        $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine',$computer)
						
			        $regkey=$reg.OpenSubKey($UninstallKey)
	                
	                if ($regkey -ne $null)
	                {                     
				        $subkeys=$regkey.GetSubKeyNames()
						
				        foreach($key in $subkeys){				     
				            $thisKey=$UninstallKey+"\\"+$key  
				            $thisSubKey=$reg.OpenSubKey($thisKey)  
				            $obj = New-Object PSObject 
				            $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computer 
				            $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value $($thisSubKey.GetValue("DisplayName")) 
				            $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($thisSubKey.GetValue("DisplayVersion")) 
				            $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value $($thisSubKey.GetValue("InstallLocation")) 
				            $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($thisSubKey.GetValue("InstallDate")) 
				            $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher")) 
							$obj | Add-Member -MemberType NoteProperty -Name "SystemComponent" -Value $($thisSubKey.GetValue("SystemComponent"))
				            $array += $obj                          
				        }
	                }			     

					$hklm = 2147483650
	                $key = "SOFTWARE\Microsoft\Internet Explorer"
	                $value = "Version"                        

	                try
	                {
	                    $wmi = [wmiclass]"\\$computer\root\default:stdRegProv"
	                    $IEVer = ($wmi.GetStringValue($hklm,$key,$value)).svalue
	                }
	                catch
	                {                        
	                }
	                
	                $obj = New-Object PSObject 
	                $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computer 
	                $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value "Internet Explorer"
	                $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($IEVer) 
	                $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value "" 
	                $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value ""
	                $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value ""
					$obj | Add-Member -MemberType NoteProperty -Name "SystemComponent" -Value ""
	                $array += $obj 
					
					
					$array = $array | %{
	                    $VerCorrected = if ($_.Version){$_.Version}else{"1"}
	                    $AppIndex = "$($_.Name)  -  $VerCorrected"
						$_ | Add-Member -MemberType NoteProperty -Name "AppIndex" -Value $AppIndex -PassThru
	         		}
					
					$array | Where-Object { $_.Name -and -not($_.SystemComponent) } | select ComputerName, Name, Version, InstallDate, appindex | sort appindex -Unique
				} # end if
			}
		
	
			Invoke-Expression $ScriptJob
			
			#--------------------------------------------------
		}`
		-CompletedScript {
			Param($Job)
			#Enable remote job type Buttons
			$buttonProcesses.Enabled = $true
			$buttonGPUpdate.Enabled = $true
			$buttonIPConfig.Enabled = $true
			$InstalledMSI.Enabled = $true
			$AddRemovePrograms.Enabled = $true
			$FilteredLive.Enabled = $true
			$buttonWin8Apps.Enabled = $true
			$buttonProfileSvr.Enabled = $true
			$buttonWakeUp.Enabled = $true

			$formTSTool3.Cursor = 'Default'
			
			$JobButtonResult = Receive-Job -Job $Job 			
			
		
			if ($JobBlurb -match "Filtered Add Remove Programs")
			{
				set-variable -name "filteredResult" -value $JobButtonResult -scope script -description "output of JobButtonResult"
				update-display ( $filteredResult | %{ if ( -not ($filterList.ContainsKey($_.AppIndex)) ){$_} } | select name, version, InstallDate | ft -AutoSize ) 
			}
			else
			{
				Update-Display $JobButtonResult
			}
			
			
			 
			
		}`
		-UpdateScript {
			Param($Job)
			#$results = Receive-Job -Job $Job -Keep
		}`
		-ArgumentList $RemoteJobButtonArgs		
	}
}

$RemoteJobButtons2={
	
	# These remote job buttons are to be run against remote servers etc (not connected pc)
	if ($true)
	{		
		# All job type buttons disabled
		$buttonProcesses.Enabled = $false
		$buttonGPUpdate.Enabled = $false
		$buttonIPConfig.Enabled = $false
		$InstalledMSI.Enabled = $false
		$AddRemovePrograms.Enabled = $false
		$buttonWin8Apps.Enabled = $false
		$buttonProfileSvr.Enabled = $False
		$buttonWakeUp.Enabled = $False
		
		$formTSTool3.Cursor = 'AppStarting'		 
		Update-Display $RemoteJobButtonArgs.Get_Item("JobBlurb") -color 'Yellow'
		Update-Display $RemoteJobButtonArgs.Get_Item("Warning") -color 'Red'
		
		Add-JobTracker -Name "JobName" `
		-JobScript {
	   		#--------------------------------------------------
			Param($Argument1)
			
			$ScriptJob = $Argument1.Get_Item("ScriptJob")
			$computer = $Argument1.Get_Item("computer")
            $userID = $Argument1.Get_Item("userID")
			
			# insert remote functions here	\/
            
            function Filter-NameServerConnection
            {
                param($userID, $computer)
                $filter = "UserName = `'$userID`' "
                Get-WmiObject win32_serverconnection -computerName $computer -filter $filter
            }
			
			
		
			function Send-WOL
            {                
                param($Computer, $NameSpace, $SiteServer, $max)    
             
                try
                {
                    $Query = "select * from SMS_R_System where name=`'$Computer`'"
                    $R_System = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer
                    
                    foreach ($System in $R_System)
                    { 
                        $Subnet = $System.IPSubnets
                        $MACAddress = $System.MACAddresses
                        $System | ft name, LastLogonUserName, IPSubnets, MACAddresses -AutoSize                 
                        break 
                    }
                    
                    $Query = "select * from SMS_R_System where IPSubnets=`'$Subnet`'"
                    $SubnetComputers = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer | select -ExpandProperty name        

                }
                catch
                {
                    $SubnetComputers = $env:computername
                    "Target computer not found in SCCM"                    
                }
                
              
                $scriptblock = {                    
                    param ($MACAddress)
                    
                    
                    $WOLScript = @"
                function WOL{
                param(`$MACAddress)
                `$WOLString = `$MACAddress.split(':') | %{ [byte]('0x' + `$_) };
                `$UDPclient = new-Object System.Net.Sockets.UdpClient;
                `$UDPclient.Connect(([System.Net.IPAddress]::Broadcast),4000);
                `$packet = [byte[]](,0xFF * 6);
                `$packet += `$WOLString * 16;
                [void]`$UDPclient.Send(`$packet, `$packet.Length);
                # New-Item c:\temp\wol.txt -type file -force -value "WOL packet sent to `$MACAddress" | out-null
                
                }
                WOL "$MACAddress"
                Remove-Item `$MyINvocation.InvocationName
"@
                      
                    New-Item c:\temp -type directory -force | out-null
                    $WOLScript | Out-File -FilePath c:\temp\wol.ps1 -Encoding ascii 
                    powershell -executionpolicy bypass -file c:\temp\wol.ps1
                    return $env:computername 
                }
             
                if ($MACAddress)
                {
                    try
                    {
                        for ($i=1; $i-le 1; $i++)
                        {
                            Invoke-Command -ComputerName $SubnetComputers -ScriptBlock $scriptblock -ArgumentList $MACAddress -ErrorAction 'silentlycontinue' |
                            %{
                                $count = $count+1
                                "Wakeup packet sent from $_"
                                if ($count -ge $max){continue}
                            }
                        } 
                    }    
                    catch{}                         
                    
                }
                else
                {
                    "`nFailed to retrieve MAC Address for computer $computer"        
                }
            }
			
           					
			Invoke-Expression $ScriptJob			
			#--------------------------------------------------
		}`
		-CompletedScript {
			Param($Job)
			#Enable remote job type Buttons
			$buttonProcesses.Enabled = $true
			$buttonGPUpdate.Enabled = $true
			$buttonIPConfig.Enabled = $true
			$InstalledMSI.Enabled = $true
			$AddRemovePrograms.Enabled = $true
			$buttonWin8Apps.Enabled = $true
			$buttonProfileSvr.Enabled = $true
			$buttonWakeUp.Enabled = $true

			$formTSTool3.Cursor = 'Default'
			
			$JobButtonResult = Receive-Job -Job $Job 			
			Update-Display $JobButtonResult 
			
		}`
		-UpdateScript {
			Param($Job)
			#$results = Receive-Job -Job $Job -Keep
		}`
		-ArgumentList $RemoteJobButtonArgs		
	}
}


#endregion




#region Applaunch Tab Items

$buttonCMD_Click={
	Update-Display "Open Command Prompt" -color "Yellow"
	ii "$env:windir\system32\cmd.exe"
}

$buttonPSRemote_Click={
    $Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and (Test-PSRemoting $Computer -report))
	{
		Update-Display "Start PS Remote Session with $Computer" -color "Yellow"
		$arg = "-noexit -executionpolicy bypass -command Enter-PSSession -ComputerName $Computer"
		Start-Process "$psHome\powershell.exe" -ArgumentList $arg	
	}
	else
	{
		Update-Display "Start PS Remote Session with $Computer" -color "Yellow"
		Update-Display "Computer $computer is offline or does not have PSRemoting enabled - Launching just console" -color "Red"
		$buttonPowerShell_Click.invoke()
	}
	
}

$buttonPowerShell_Click={
	Update-Display "Open Powershell Console" -color "Yellow"
	$arg = "-executionpolicy bypass"
    Start-Process "$psHome\powershell.exe" -ArgumentList $arg 	
}


$buttonRegEdit_Click={
	Update-Display "Open registry editing tool regedit.exe" -color "Yellow"
	ii "$env:windir\regedit.exe"
}

$buttonMSTSC_Click={
	$remote =  "mstsc.exe"
	iex $remote	
}

#endregion




#region TSTool buttons that wont freeze GUI


$buttonRDP_Click={
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -or $picturebox2.BackColor.Name -eq 'Blue')
	{
		$remote =  "mstsc.exe /v: $computer"
		iex $remote
	}
}


$button1_Click={
	#This is the second RDP button
	$buttonRDP_Click.invoke()
}

$buttonRA_Click={
    $Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $labelUserID.Text -ne "No User")
	{
		Update-Display "Initiating Remote Assistance Session with computer $computer" -color 'Yellow'
		msra /offerRA $computer	
	}
}

$buttonEmail_Click={
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and -not($labelUserID.Text -eq "" -or $labelUserID.Text -eq "No User" -or $labelUserID.Text -eq "UserID"))
	{		
		if ( $email -ne $null -and $email -ne "".Trim() -and $email -ne " " )
		{
			Update-Display "Compose email to - $email" -color 'Yellow'
			try
	        {
    			Start-Process -FilePath "mailto:$email" -ErrorAction "Stop"
			}
			catch
			{
				Update-Display "Cant email $email" -color 'red'
			}
		}	
	}	
}

$buttonMySite_Click={
	if (-not($labelUserID.Text -eq "" -or $labelUserID.Text -eq "No User" -or $labelUserID.Text -eq "UserID"))
	{
	    Start-Process -FilePath "http://mysite/person.aspx?accountname=$($labelUserID.Text)"
	}
	else
	{
		Start-Process -FilePath "http://mysite"
	}
}

$buttonWarranty_Click={
	# Start-Process -FilePath "http://www.dell.com/support/troubleshooting/us/en/04/Index?c=us&s=bsd&cs=04&l=en&t=warranty&servicetag=$($textbox2.text)" 
	Start-Process -FilePath "http://www.dell.com/support/my-support/us/en/555/product-support/servicetag/$($textbox2.text)" 
}






$buttonManage_Click={
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $label1.Text -ne "")
	{
		$computer = $labelBarcode.text.Trim()
	}
	else
	{
		$computer = $env:COMPUTERNAME
	}
	
	compmgmt.msc /computer=$computer
	Update-Display "Connect to compmgmt MMC $computer" -color 'Yellow'	
}

$buttonSysInfo_Click={
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $label1.text -ne "")
	{
		$computer = $labelBarcode.text.Trim()		
	}
	else
	{
		$computer = $env:COMPUTERNAME
	}
	
	msinfo32.exe /computer $computer
	Update-Display "connect to msinfo32 $computer" -color 'Yellow'
}



$buttonOU_Click={
	
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $labelBarcode.text.Trim() -ne "")
	{
		Update-Display "Get - Computer and User OU" -color 'Yellow'
		if (-not($toolstripstatuslabel1.Text -match 'Local'))
		{
			Try
			{
				$UserID = $labelUserID.Text
				$Computer = $labelBarcode.text.Trim()
				
				if ($UserID -and $UserID -ne "UserID")
				{
					$UserOU = $null
					$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
					$searcher.Filter = "(&(objectClass=User)(samAccountName=$UserID))" 
					$result = $searcher.FindOne() 

					if ($result)
					{
						$UserOU = "$UserID OU - $($result.GetDirectoryEntry().Parent)"
					}
					else
					{
						$UserOU = "$UserID account not found in AD"
					}
				}

				if ($Computer -ne "")
				{
					$ComputerOU = $null
					$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
					$searcher.Filter = "(&(objectClass=Computer)(Name=$Computer))" 
					$result = $searcher.FindOne() 

					if ($result)
					{
						$ComputerOU = "$Computer OU - $($result.GetDirectoryEntry().Parent)"
					}
					else
					{
						$ComputerOU = "$Computer account not found in AD"
					}
				}
		    }
			catch
			{
				Update-Display "Error accessing AD" -color "Red"
			}
			
			Update-Display "$UserOU`n$ComputerOU`n "
			If (-not($UserOU -or $ComputerOU)){ Update-Display "-" }
		}
		else
		{
			Update-Display "`nNot on Domain`n " -color "Red"		
		}
	}
}

$buttonC_Click={
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		explorer.exe "\\$Computer\c$"	
	}
}

$buttonHome_Click={
	
	$UserID = $labelUserID.Text
	if  (-not($UserID -eq "UserID" -or $UserID -eq ""))
	{
		Update-Display "Get - $UserID Home Path" -Color 'Yellow'
		if ($UserID -and (-not($toolstripstatuslabel1.Text -match 'Local')))
		{
			Try
			{
				$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
				$searcher.Filter = "(&(objectClass=User)(samAccountName=$UserID))" 
				$result = $searcher.FindOne() 

				$HomeDirectory = $result.GetDirectoryEntry().HomeDirectory
			}
			catch
			{
				$HomeDirectory = "Error accessing AD"			
			}
			
			Update-Display $HomeDirectory

			if (-not($HomeDirectory))
			{
				Update-Display "Error - No HomeDirectory Path Set in AD" -color "Red"
			}
			else
			{
				if (-not($HomeDirectory -match "Error"))
				{
					explorer.exe "$HomeDirectory"
				}	
			}
		}
		else
		{
			Update-Display "Not On Domain" -color "Red"
		}
	}
}

$buttonProfile_Click={
	
	$UserID = $labelUserID.Text
	if  (-not($UserID -eq "UserID" -or $UserID -eq ""))
	{
		Update-Display "Get - $UserID Profile Path" -Color 'Yellow'
		if ($UserID -and (-not($toolstripstatuslabel1.Text -match 'Local')))
		{
			Try
			{
				$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'') 
				$searcher.Filter = "(&(objectClass=User)(samAccountName=$UserID))" 
				$result = $searcher.FindOne() 

				$ProfilePath = $result.GetDirectoryEntry().ProfilePath
			}
			catch
			{
				$ProfilePath = "Error accessing AD"			
			}
			
			Update-Display $ProfilePath

			if (-not($ProfilePath))
			{
				Update-Display "Error - No Profile Path Set in AD" -color "Red"
			}
			else
			{
				if (-not($ProfilePath -match "Error"))
				{
					explorer.exe "$ProfilePath"
				}	
			}
		}
		else
		{
			Update-Display "Not On Domain" -color "Red"
		}
	}
}






$buttonLogOff_Click={
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
		{
			$Answer = [Windows.Forms.MessageBox]::Show("Log-Off $computer ?", "TSTool $TSToolVersion","YesNo","Question")
			if( $Answer -eq "Yes" )
			{
				Update-Display "LogOff $computer" -Color 'Yellow'
				try
				{
					$return = (Get-WmiObject win32_operatingsystem -ComputerName $Computer -ErrorAction 'stop').Win32Shutdown(4).ReturnValue
					if ($return -eq 0)
					{
						Update-Display "$computer accepted Forced Log-Off command"
					}
				}
				catch
				{
					Update-Display $_.Exception.Message	-color "Red"
					$buttonStartJob_Click.invoke()
				}		
			}
		}
		else
		{
			$buttonStartJob_Click.invoke()
		}
	}
	
}

$buttonReboot_Click={
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
		{
			$Answer = [Windows.Forms.MessageBox]::Show("Reboot $computer ?", "TSTool $TSToolVersion","YesNo","Question")
			if( $Answer -eq "Yes" )
			{
				Update-Display "Reboot $computer" -Color 'Yellow'
				try
				{
					$return = (Get-WmiObject win32_operatingsystem -ComputerName $Computer -ErrorAction 'stop').Win32Shutdown(6).ReturnValue
					if ($return -eq 0)
					{
						Update-Display "$computer accepted forced reboot command"
					}
				}
				catch
				{
					Update-Display $_.Exception.Message	-color "Red"	
					$buttonStartJob_Click.invoke()
				}		
			}
		}
		else
		{
			$buttonStartJob_Click.invoke()
		}
	}
}

$buttonShutDown_Click={
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $Computer -ne "" -and $label1.Text -ne "")
	{
		if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
		{
			$Answer = [Windows.Forms.MessageBox]::Show("Shutdown $Computer ?", "TSTool $TSToolVersion","YesNo","Question")
			if( $Answer -eq "Yes" )
			{
				Update-Display "ShutDown $computer" -Color 'Yellow'
				try
				{
					$return = (Get-WmiObject win32_operatingsystem -ComputerName $Computer -ErrorAction 'stop').Win32Shutdown(5).ReturnValue
					if ($return -eq 0)
					{
						Update-Display "$computer accepted forced shutdown command"
					}
				}
				catch
				{
					Update-Display $_.Exception.Message	-color "Red"	
					$buttonStartJob_Click.invoke()
				}
			}
		}
		else
		{
			$buttonStartJob_Click.invoke()
		}
	}	
}

$buttonWakeUp_Click={
       
	$Computer = $labelBarcode.text.Trim()
	
	Update-Display "Send Wakeup packet to $computer" -Color 'Yellow'	
	
	if ( -not($computer -as [ipaddress]) )
	{
		if ($picturebox2.BackColor.Name -eq 'LimeGreen')
	    {
			Update-Display "Computer $computer Already On"                        
	    }
	    elseif ($picturebox2.BackColor.Name -eq 'Blue')
	    {
			Update-Display "Computer $computer Already On - however there is a connectivity issue"		
		}
		elseif ($picturebox2.BackColor.Name -eq 'DarkGray')
		{
			Update-Display "Connect to computer first then click on wakeup again if neccesary" 	
		}
		else
		{
	        $ButtonJob = "Send-WOL -computer $computer -NameSpace $SCCMNameSpace -SiteServer $SCCMSiteServer -max 1"
	        $RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $profileServer; 'JobBlurb' = "Send Wakeup packet to $computer"; 'userID' = $UserID ; }
	        $RemoteJobButtons2.invoke()
	    }
	}
	else
	{
		Update-Display "Supply computer name - Cannot wake up a computer using an IP" -color "Red"	
	}
}



$SCCM_2007_SW3_Click={
		
    $Computer = $labelBarcode.text.Trim()
    if ($Computer -ne "")
    {
    	Update-Display "SCCM Report - 'Add Remove Programs' $computer" -color Yellow
		
		$SCCMServer = Get-SCCMResourceID -Computer $Computer -SiteServer1 $SCCMSiteServer -NameSpace1 $SCCMNameSpace 

		if ($SCCMServer.ResourceID)
		{
            Update-Display (Get-SCCMSoftwareInstalled -NameSpace $SCCMServer.NameSpace -SiteServer $SCCMServer.SiteServer -ResourceID $SCCMServer.ResourceID | Select-Object DisplayName, Version, InstallDate | sort DisplayName -Unique | ft * -AutoSize )
    	}
        else
        {
            Update-Display "Computer $computer not found in SCCM" -color "Red"
        }
    }
}


#endregion








#region form function controls

$ShowHelp={
	#display popup help
	Switch ($this.name) {		
		"buttonProfileSvr" {$tip="Find user's active computer(s) based on open connection to profile server"}
		"buttonSCCMU2M" {$tip="Find user's primary computer based on SCCM 2012 report"}
		"buttonWakeUp" {$tip="SCCM 2012 WOL over subnet"}
		"SCCM_2007_SW2" {$tip="SCCM 2007 HTML Report - All advertisements for a specific computer"}
		"SCCM_2007_SW3" {$tip="SCCM Report - All software in 'Add Remove Programs'"}
		"buttonEmail" {$tip=$email}
		"buttonSCCM" {$tip="Launch SCCM 2012 Console"}
		"buttonAPPV_Click" {$tip="List App-V Applications Installed"}
		default {$tip="No help found for $($this.name)"}
	}
	$tooltip1.SetToolTip($this,$tip)
} #end ShowHelp

$NotImplemented={
	$Answer = [Windows.Forms.MessageBox]::Show("Sorry Not Implemented Yet", "TSTool $TSToolVersion","OK","Exclamation")
}

$richtextbox1_LinkClicked=[System.Windows.Forms.LinkClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.LinkClickedEventArgs]
	ii $_.linktext
}

$buttonDisconnect_Click={
	
	$Computer = $labelBarcode.text.Trim()
	
	Update-Display "Disconnecting $Computer" -color "yellow"	
	Update-Display "Cancelling remote job threads" 	
	Update-Display "Stopping refresh timer" 
	
	Stop-JobTracker	
	
	$buttonDisconnect.Enabled = $false	
	$buttonStartJob.Enabled = $true	
	$buttonHistory.Enabled = $true
	$timer1.Enabled = $false
	$picturebox2.BackColor = 'DarkGray'
	
	#Enable remote job type Buttons
	$buttonProcesses.Enabled = $true
	$buttonGPUpdate.Enabled = $true
	$buttonIPConfig.Enabled = $true
	$InstalledMSI.Enabled = $true
	$AddRemovePrograms.Enabled = $true

	$formTSTool3.Cursor = 'Default'	
	
	# greyout image
    $ms = New-Object -ComObject System.IO.MemoryStream
    $ms.Write($CurrentImageSet, 0, $CurrentImageSet.Length)
    Add-Type -AssemblyName System.Drawing
    $image = [System.Drawing.Image]::FromStream($ms)
                    
    $pictureBox3.Image = ConvertToGrayScale($image)
}

$toolstripstatuslabel1_Click={
	$toolstripstatuslabel1.Text = $Domain	
}

$addQLDPhoneFilterToolStripMenuItem_Click={
	if ([int](Get-RegKey -Key UseQLDFilter))
	{
		$addQLDPhoneFilterToolStripMenuItem.Image = $Cross	
		Get-RegKey -Key UseQLDFilter -Value 0 -Set  
	}
	else
	{
		$addQLDPhoneFilterToolStripMenuItem.Image = $tick
		Get-RegKey -Key UseQLDFilter -Value 1 -Set  
	}
	
}


$aboutToolStripMenuItem_Click={
	[System.Windows.Forms.MessageBox]::Show("TSTool3`n`nMatthew Painter`nTechnical Services Team`n@painter1024","TSTool $TSToolVersion");
}

$licenceToolStripMenuItem_Click={
	[System.Windows.Forms.MessageBox]::Show("TSTool3 is subject to Microsoft Public License (Ms-PL)`n`nhttp://www.microsoft.com/en-us/openness/licenses.aspx","TSTool $TSToolVersion"); 
	ii "$ParentDirectory\licence.txt"	
}

$picturebox1_Click={
	$aboutToolStripMenuItem_Click.invoke()
}

$exitToolStripMenuItem1_Click={
	$formTSTool3.Close()	
}

$buttonClear_Click={
	cls	
	$richtextbox1.Text = ""
}

$buttonCopy_Click={
	
	
$RichTextBox1.SetFocus
 	$richtextbox1.SelectAll() 
 	$richtextbox1.copy()
	$richtextbox1.DeselectAll()
	
}

$buttonClose_Click={
	$formTSTool3.Close()
}

$timer1_Tick={
	$StartJob0_Connectivity.invoke()
}

$timerJobTracker_Tick={
	Update-JobTracker
}

#endregion

#region History

$buttonHistory_Click={
	
	Update-Display "TSTool Connection History" -color "Yellow"
	
	$History = Import-Csv -Path "$env:temp\history.csv" 	
	Update-Display ($History | select date, computer, user | ft -auto) 	
}


$clearHistoryToolStripMenuItem_Click={

	$Answer = [Windows.Forms.MessageBox]::Show("Delete History File", "TSTool $TSToolVersion","YesNo","Question")
	if( $Answer -eq "Yes" -and (Test-Path "$env:temp\history.csv"))
	{
		Update-Display "Delete History File" -color 'Yellow'
		Remove-Item "$env:temp\history.csv"
		$History = New-Object -TypeName psobject -Property @{"Date"= (Get-Date -Format u); "Computer"= $env:COMPUTERNAME; "User"= $env:USERNAME}
        $History | Export-csv -Path "$env:temp\history.csv"	-NoTypeInformation
		
		$ComputerHistory = $History | Where-Object {$_} | select -ExpandProperty computer
    	if ($ComputerHistory.count -ne $null -and $STA)
        {
	       $textbox1.AutoCompleteCustomSource.AddRange($ComputerHistory)
        }
	}
}

$setHistoryLimitToolStripMenuItem_Click={
	
	[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
	$HistoryCountOriginal = Get-RegKey -Key Count -Value Count
 	[int]$HistoryCount = [Microsoft.VisualBasic.Interaction]::InputBox("Enter maximum number of computers to store in TSTool3 connection history`n`n Valid values are between 1 and 99", "TSTool $TSToolVersion", $HistoryCountOriginal) 
    try
	{
		if($HistoryCount -and ($HistoryCount -is [int]) -and $HistoryCount -le 99 -and $HistoryCount -gt 1)
	    {
	 		Get-RegKey -Key Count -Value $HistoryCount -Set 
	    }
	}
	catch
	{}
}



$checkForUpdatesToolStripMenuItem_Click={
	
	function Check-TSTool3Upgrade
	{
	    param(
	        $URL, 
	        [string]$start = ">Ver 3.",
	        [string]$end = "</span>",
	        [single]$currentVer       
	    )
	    	    
	    # Example string to parse from page
	    # <span style="color:#ff0000">Ver 3.0.15</span>
		
		try
		{			
			$URL = "$URL/description"
			$error = $false
		   
		    [net.httpWebRequest]$request = [net.webRequest]::create($URL)                  
		    $request.Proxy = [System.Net.WebRequest]::DefaultWebProxy
		    $request.Proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials                  
		    [net.httpWebResponse]$response = $request.getResponse()
		    $responseStream = $response.getResponseStream()
		    $sr = new-object IO.StreamReader($responseStream)
		    $InputPage = $sr.ReadToEnd()  
		    

		    $RegEx = "(?<=$start).*?(?=$end)"
		    $latestVer = $InputPage | Select-String -Pattern $RegEx -AllMatches | 
		    Select-Object -ExpandProperty Matches | % {$_.value} | select -first 1
		}
		catch
		{
			$error = $true	
		}
	    
	    New-Object -TypeName psobject -Property @{
	        Latest = $latestVer
	        current = $currentVer
	        UpgradeRequired = ($latestVer -gt $currentVer)
	        URL = $URL
	        startStr = $start
	        endStr = $end
			error = $error
	    }
	} 

	$URL = "http://gallery.technet.microsoft.com/scriptcenter/TSTool3-8bb4dc72"	
	$TSTool3Upgrade = Check-TSTool3Upgrade -URL $URL -currentVer ($TSToolVersion.replace("3.", ""))
		
	if( $TSTool3Upgrade.UpgradeRequired -and (!($TSTool3Upgrade.error)) )
	{
		$Answer = [Windows.Forms.MessageBox]::Show("There is an new version available for download. `n`nDo you want to review TSTool 3.$($TSTool3Upgrade.latest)?", "TSTool $TSToolVersion","YesNo","Question")
		if( $Answer -eq "Yes")
		{
			Start-Process -FilePath $URL
		}
	}
	else
	{
		if ($TSTool3Upgrade.error)
		{
			$Answer = [Windows.Forms.MessageBox]::Show("Newer version not found", "TSTool $TSToolVersion","OK","Exclamation")
		}
		else
		{
			$Answer = [Windows.Forms.MessageBox]::Show("You seem to have the latest version", "TSTool $TSToolVersion","OK","Exclamation")
		}
	}
}



#endregion 

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Job-Begin -Name "JobName" `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param(
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$Name, 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[ScriptBlock]$JobScript,
	$ArgumentList = $null,
	[ScriptBlock]$CompletedScript,
	[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if($job -ne $null)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{	"Job" = $Job;
						"CompleteScript" = $CompletedScript;
						"UpdateScript" = $UpdateScript}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)	
		
		#Start the Timer
		if(-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif($CompletedScript -ne $null)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}

}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for($index =0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if($psObject -ne $null) 
		{
			if($psObject.Job -ne $null)
			{
				if($psObject.Job.State -ne "Running")
				{				
					#Call the Complete Script Block
					if($psObject.CompleteScript -ne $null)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif($psObject.UpdateScript -ne $null)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start()#Resume the timer	
	}	
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion















$setProfileServerToolStripMenuItem_Click={
	
	[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
	
	$profileServerTemp = Get-RegKey -Key profileServer
	do
	{	 	
		$profileServer = [Microsoft.VisualBasic.Interaction]::InputBox("Enter name of profile server", "TSTool $TSToolVersion", $profileServerTemp)

		if ($profileServer -eq "" -or $profileServer -eq $null)
		{
			$profileServer = $profileServerTemp			
		}

	} until ($profileServer -ne "")

	Get-RegKey -Key profileServer -Value $profileServer -Set 
}


$buttonSCCMU2M_Click={
	
	Update-Display "SCCM 2012 - User 2 Machine" -color Yellow
	
	Function Get-SCCMComputer
	{
		param($NameSpace, $SCCMServer)
		
		if (Test-Connection -ComputerName $SCCMServer -Count 1 -Quiet)
		{
			[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null	
			$user = [Microsoft.VisualBasic.Interaction]::InputBox("Enter UserID to query in SCCM 2012", "TSTool $TSToolVersion", $env:username)
				
			$DomainUser = "$env:userdomain\\$user"
		    $Query = "select * from SMS_UserMachineRelationship where UniqueUserName=`'$DomainUser`'"
				
			try
			{
				$WMIQuery = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SCCMServer -ErrorAction 'stop'
			}
			catch{}
				
			try
			{
				$WMIQuery | 
			    % { 
			        $Hash = @{ 
			            User = $User
			            Computer = $_.ResourceName 
			            CreationTime = $_.CreationTime
			            IsActive = $_.IsActive
			            SiteServer = $SiteServer 
			        } 

			        New-Object -TypeName PSObject -Property $Hash -ErrorAction 'stop' | 
			        Select-Object User, Computer, IsActive, CreationTime, SiteServer
			    }		
			}
			catch
			{
				Update-Display "SCCM 2012 Server Query Failed" -color red	
			}
				
		}
		else
		{
			Update-Display "Check SCCM 2012 server name set in GlobalSettings.csv file" -color red		
		}
	}
	
	Update-Display (Get-SCCMComputer -NameSpace $SCCMNameSpace -SCCMServer $SCCMSiteServer | sort creationtime | ft user, computer, creationTime -AutoSize)
	
}

$editSoftwareFilterToolStripMenuItem_Click={
	
	Update-Display "Launch Software Filter Editor" -color Yellow
	
	# This makes the SoftwareReport script modal. (alt code)
    # powershell -file "$ParentDirectory\Get-SoftwareReport.ps1"
        
    $arg = "-executionpolicy bypass -windowstyle hidden -sta -file `"$ParentDirectory\Get-SoftwareReport.ps1`""
    Start-Process "$psHome\powershell.exe" -ArgumentList $arg -ErrorAction 'stop'
}

$buttonSCCM_Click={
	
	Update-Display "Launch SCCM 2012 Console" -color Yellow
	
	$progFiles = if (${Env:ProgramFiles(x86)})
	{
	    ${Env:ProgramFiles(x86)}
	}
	else
	{
		$env:programfiles
	}
	
	$configMnger = "$progFiles\Microsoft Configuration Manager\AdminConsole\bin\Microsoft.ConfigurationManagement.exe"	
	if (Test-Path $configMnger)
	{
		start-process -FilePath $configMnger
	}
	else
	{
		Update-Display "Cant Find: $configMnger" -color red	
	}
}

$buttonAPPV_Click={
	
	Update-Display "List App-V applications installed $Computer" -color Yellow
	
    if ($picturebox2.BackColor.Name -eq 'LimeGreen')
    {
		$Computer = $labelBarcode.text.Trim()
	
		try
		{
			$appv = gwmi -computer $Computer -Namespace root\microsoft\appvirt\client -class application -ErrorAction 'stop'
			Update-Display ($appv | sort name | ft Name, Version, PackageGUID -AutoSize)
		}
		catch
		{
			Update-Display "Error accessing $computer App-V WMI namespace" -color red	
		}
	}	
}




$FilteredSCCM_Click={

	$Computer = $labelBarcode.text.Trim()
	if ($Computer -ne "")
	{
		Update-Display "SCCM Report - 'Add Remove Programs (Filtered)' $computer" -color Yellow	
			
		$SCCMApps = $null
		
		$SCCMServer = Get-SCCMResourceID -Computer $Computer -SiteServer1 $SCCMSiteServer -NameSpace1 $SCCMNameSpace 
		
		if ($SCCMServer.ResourceID)
		{
	        $SCCMApps = Get-SCCMSoftwareInstalled -NameSpace $SCCMServer.NameSpace -SiteServer $SCCMServer.SiteServer -ResourceID $SCCMServer.ResourceID | sort AppIndex -Unique 
		}
	    else
	    {
	        Update-Display "Computer $computer not found in SCCM" -color "Red"
	    }
		
		if (Test-Path $filterFile)
		{
			$filterList = @{}
			Get-Content $filterFile | %{ $filterList.Add($_, ($_ -split '  -  ')[1]) }	
			
			if ($SCCMApps)
			{
				Update-Display (($SCCMApps | %{if ( ($_.AppIndex) -and -not ($filterList.ContainsKey($_.AppIndex)) ){$_} } ) | ft Displayname, Version -AutoSize)
			}
		}	
		else
		{
			Update-Display "Cant Find SW Filter" -color "Red"	
		}
	}
}

$FilteredLive_Click={
	
	$Computer = $labelBarcode.text.Trim()
	if ($picturebox2.BackColor.Name -eq 'LimeGreen' -and $label1.Text -ne "")
	{
		$Computer = $labelBarcode.text.Trim()
		
		if (Test-Path $filterFile)
		{
			$filterList = @{}
			Get-Content $filterFile | %{ $filterList.Add($_, ($_ -split '  -  ')[1]) }
		
			
			$OS = Get-WMIObject -Class win32_operatingsystem
		    $ThisOS = $OS.OSArchitecture
		    
		    $OS = Get-WMIObject -Class win32_operatingsystem -ComputerName $computer
		    $RemoteOS = $OS.OSArchitecture
		    
		    if ($ThisOS -match "32" -and $RemoteOS -match "64" )
		    {
				$Warning =  "Warning - Cant read 64bit registry from this 32bit machine" 		
		    }
			else
			{
				$Warning = $null
			}	

			$ButtonJob = "Get-AddRemovePrograms -Computer $Computer"
			$RemoteJobButtonArgs = @{'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'JobBlurb' = "Filtered Add Remove Programs (Live) - $computer"; 'Warning' = $Warning; }
			$RemoteJobButtons.invoke()
			
		}	
		else
		{
			Update-Display "Cant Find SW Filter" -color "Red"	
		}
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf385|</Assembly>
    <Assembly>System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089|C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.dll</Assembly>
    <Assembly>System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089|C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Windows.Forms.dll</Assembly>
    <Assembly>System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a|C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Drawing.dll</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a|C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Design.dll</Assembly>
    <Assembly>System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089|C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Data.dll</Assembly>
    <Assembly>System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089|C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.XML.dll</Assembly>
    <Assembly>System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a|C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.DirectoryServices.dll</Assembly>
  </Assemblies>
  <Packager>
    <General>
      <PackageName>
      </PackageName>
      <PackageIcon>
      </PackageIcon>
      <ManifestCreation>1</ManifestCreation>
      <CustomManifest>
      </CustomManifest>
      <Platform>-1</Platform>
      <RunSTA>0</RunSTA>
    </General>
    <Security>
      <Username>
      </Username>
      <Password>
      </Password>
      <SignPackage>False</SignPackage>
      <Certificate>
      </Certificate>
      <CertificatePassword>
      </CertificatePassword>
      <RunAs>0</RunAs>
    </Security>
    <Version>
      <FileVersion>1.0.0.0</FileVersion>
      <ProductVersion>1.0.0.0</ProductVersion>
      <ProductName>
      </ProductName>
      <Description>
      </Description>
      <Company>MPS.inc</Company>
      <Copyright>
      </Copyright>
      <InternalName>
      </InternalName>
      <OriginalFileName>
      </OriginalFileName>
      <Comment>
      </Comment>
    </Version>
  </Packager>

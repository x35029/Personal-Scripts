#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: ca608a9e-03c1-43f1-bd8f-e7d744d12ca7
# Source File: Get-SoftwareReport2.0.11a.pff
#------------------------------------------------------------------------
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.0.7
# Generated On: 9/09/2013 10:24 PM
# Generated By: Matt
#========================================================================
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {    
    
    #region Control Helper Functions
    
        
    function Global:Load-ListBox 
    {
    <#
        .SYNOPSIS
            This functions helps you load items into a ListBox.

        .DESCRIPTION
            Use this function to dynamically load items into the ListBox control.

        .PARAMETER  ListBox
            The ListBox control you want to add items to.

        .PARAMETER  Items
            The object or objects you wish to load into the ListBox's Items collection.

        .PARAMETER  DisplayMember
            Indicates the property to display for the items in this control.
        
        .PARAMETER  Append
            Adds the item(s) to the ListBox without clearing the Items collection.
        
        .EXAMPLE
            Load-ListBox $ListBox1 "Red", "White", "Blue"
        
        .EXAMPLE
            Load-ListBox $listBox1 "Red" -Append
            Load-ListBox $listBox1 "White" -Append
            Load-ListBox $listBox1 "Blue" -Append
        
        .EXAMPLE
            Load-ListBox $listBox1 (Get-Process) "ProcessName"
    #>
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory=$true)]
            [System.Windows.Forms.ListBox]$listBox,
            [ValidateNotNull()]        
            [Parameter(Mandatory=$true)]
            $Items,
            [Parameter(Mandatory=$false)]
            [string]$DisplayMember,
            [switch]$Append
        )
        
        if(-not $Append)
        {
            $listBox.Items.Clear()    
        }
        
        if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
        {
            $listBox.Items.AddRange($Items)
        }
        elseif ($Items -is [Array])
        {
            $listBox.BeginUpdate()
            foreach($obj in $Items)
            {
                $listBox.Items.Add($obj)
            }
            $listBox.EndUpdate()
        }
        else
        {
            $listBox.Items.Add($Items)    
        }

        $listBox.DisplayMember = $DisplayMember    
    }
    
    function Global:Load-ListBoxItems
    {
        param($items, $listbox, $filterList)
        
        $items | 
        %{
            $tempProgram = "$($_.name)  -  $($_.version)"
            if (-not($filterList.ContainsKey($tempProgram)))
            {
                Load-ListBox $listBox $tempProgram -Append | Out-Null
            }
        }
    }
    
    function Global:Refresh-FilterList
    {
        
    }
    
    function Global:Update-Display
    {
        param($ResultToDisplay, $color, $richtextbox, [switch]$new)        

        if ($new){$richtextbox.text = ""}
        
        $ResultToDisplay = ($ResultToDisplay | Out-String).replace($null, " ")
       
        $richTextBox.SelectionColor = $color
        $richtextbox.appendText($ResultToDisplay)
        
        $richtextbox.ScrollToCaret();

    }
    
    function Global:Use-RunAs
    {   
        # Test if script is running as Adminstrator and if not use RunAs
        # -Check ( Return true if Administrator )
        
        param([Switch]$Check)
        
        $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
            
        if ($Check) { return $IsAdmin }    

        if ($MyInvocation.ScriptName -ne "")
        { 
            if (-not $IsAdmin) 
            { 
                try
                { 
                    $arg = "-executionpolicy bypass -windowstyle hidden -sta -file `"$($MyInvocation.ScriptName)`" $env:UserName $env:UserName"
                    Start-Process "$psHome\powershell.exe" -Verb Runas -ArgumentList $arg -ErrorAction 'stop' 
                }
                catch
                {
                    set-variable -name RunAsFail -value $true -scope script -description "Alows script to check if runas was aborted or failed" 
                    return
                }
                exit # Quit this session of powershell
            } 
        } 
        else 
        { 
            Write-Warning "Error - Script must be saved as a .ps1 file first" 
            break 
        } 
    }

    function Global:Get-ScriptPath
    {
        try
        {
           $ScriptFullName = $MyInvocation.ScriptName
            
           $path = @{ 
                parent = split-path $ScriptFullName
                leaf = split-path $ScriptFullName -leaf
                ScriptFullName = $ScriptFullName
            }

            New-Object PSObject -Property $path
        }
        catch
        {        
        }  
    }
    
    function global:Get-RegKey
    {
        param
        (
            [string]$Key, 
            [string]$Value, 
            [switch]$Set,
            [string]$Reg="HKCM:\Software\PowerShell\TSTool"
        ) 
           
        
        if ($Set)
        {
            Set-ItemProperty -Path $Reg -Name $Key -Value $Value
        }
        else
        {
            try
            {
                Get-ItemProperty -Path $Reg -Name $Key -ErrorAction 'stop' | Select-Object -ExpandProperty $Key
            }
            catch
            {
                0
            }
        }
    }
    
    #endregion
    
    
    if ((get-host).name -eq "ConsoleHost" -or (get-host).name -eq "Windows PowerShell ISE Host")
    {
        Use-RunAs
    }
    
                
    return $true #return true for success or false for failure
}

function OnApplicationExit {
    
    $script:ExitCode = 0 #Set the exit code for the Packager
    
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-Get-SoftwareReport2_0_11a_pff {

    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
    [void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
    [void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $TSSPF = New-Object 'System.Windows.Forms.Form'
    $tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
    $tabpage1 = New-Object 'System.Windows.Forms.TabPage'
    $richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
    $tabpage2 = New-Object 'System.Windows.Forms.TabPage'
    $richtextbox2 = New-Object 'System.Windows.Forms.RichTextBox'
    $tabpage3 = New-Object 'System.Windows.Forms.TabPage'
    $labelRemoveItemFromProfil = New-Object 'System.Windows.Forms.Label'
    $FilteredLive = New-Object 'System.Windows.Forms.Label'
    $listbox1 = New-Object 'System.Windows.Forms.ListBox'
    $tabpage4 = New-Object 'System.Windows.Forms.TabPage'
    $labelDoubleClickItemToRem = New-Object 'System.Windows.Forms.Label'
    $FilteredSCCM = New-Object 'System.Windows.Forms.Label'
    $listbox2 = New-Object 'System.Windows.Forms.ListBox'
    $tabpage5 = New-Object 'System.Windows.Forms.TabPage'
    $LabelFilterItem = New-Object 'System.Windows.Forms.Label'
    $labelDoubleClickToAddItem = New-Object 'System.Windows.Forms.Label'
    $listbox3 = New-Object 'System.Windows.Forms.ListBox'
    $tabpage6 = New-Object 'System.Windows.Forms.TabPage'
    $labelThisToolUsesTheSameS = New-Object 'System.Windows.Forms.Label'
    $labelNameSpace = New-Object 'System.Windows.Forms.Label'
    $textbox3 = New-Object 'System.Windows.Forms.TextBox'
    $labelServer = New-Object 'System.Windows.Forms.Label'
    $labelSCCMServerSettings = New-Object 'System.Windows.Forms.Label'
    $textbox1 = New-Object 'System.Windows.Forms.TextBox'
    $richtextbox3 = New-Object 'System.Windows.Forms.RichTextBox'
    $buttonCopy = New-Object 'System.Windows.Forms.Button'
    $labelSoftwareProfileFilte = New-Object 'System.Windows.Forms.Label'
    $buttonClose = New-Object 'System.Windows.Forms.Button'
    $buttonStartJob = New-Object 'System.Windows.Forms.Button'
    $textbox2 = New-Object 'System.Windows.Forms.TextBox'
    $panel1 = New-Object 'System.Windows.Forms.Panel'
    $richtextbox4 = New-Object 'System.Windows.Forms.RichTextBox'
    $buttonStartJob2 = New-Object 'System.Windows.Forms.Button'
    $timerJobTracker = New-Object 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
    
    $TSSPF_Load={
        
        set-variable -name Version -value "2.0.11" -scope script -description "SPF Version"
        set-variable -name Author -value "Matthew Painter" -scope script -description "SPF Author"    
        Write-Host "SPF Version $version - By $Author Technical Services Team."
        
        
        function Get-ScriptPath{
            try{
               $ScriptFullName = $MyInvocation.ScriptName
                
               $path = @{ 
                    parent = split-path $ScriptFullName
                    leaf = split-path $ScriptFullName -leaf
                    ScriptFullName = $ScriptFullName
                }
    
                New-Object PSObject -Property $path
            }
            catch{}  
        }
        
        set-variable -name ParentDirectory -value ("$(Get-ScriptPath | select -ExpandProperty Parent)")  -scope script -description "Parent Directory of Script"
        
        
        # (Set globally for all users of TSTool)     
        if (Test-Path "$ParentDirectory\GlobalSettings.csv")
        {
            $SettingsCSV = Import-Csv "$ParentDirectory\GlobalSettings.csv"
    
            if($SettingsCSV.SCCMServer) 
            {
                set-variable -name SCCMServer -value $($SettingsCSV.SCCMServer) -scope script -description "SCCM SiteServer" 
                set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCMNameSpace) -scope script -description "SCCM NameSpace" 
            }
            else
            {
                # Backward compatibility
                if($SettingsCSV.SCCM12Server)
                {
                    set-variable -name SCCMServer -value $($SettingsCSV.SCCM12Server) -scope script -description "SCCM SiteServer" 
                    set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCM12NS) -scope script -description "SCCM NameSpace"
                }
                else
                {
                    set-variable -name SCCMServer -value $($SettingsCSV.SCCM07Server) -scope script -description "SCCM SiteServer" 
                    set-variable -name SCCMNameSpace -value $($SettingsCSV.SCCM07NS) -scope script -description "SCCM NameSpace"
                }
            }
        }
        
        $textbox1.Text = $SCCMServer 
        $textbox3.Text = $SCCMNameSpace
        
        $filterList = @{}
        
        set-variable -name FilterFile -value "$((Get-ScriptPath).parent)\filterFile.txt" -scope script -description "Path to external file with list of filtered programs"
        if (-not(Test-Path $filterFile))
        {
            New-Item -path $FilterFile -ItemType file -Force
        }
        else
        {
            Get-Content $filterFile | %{ $filterList.Add($_, ($_ -split '  -  ')[1]) }    
            $filterList.keys | sort | %{ Load-ListBox -listBox $listBox3 -Items $_ -Append | Out-Null }    
        }
            
        $ThisOS = Get-WMIObject -Class win32_operatingsystem | select -ExpandProperty OSArchitecture      
        if ($ThisOS -match "32" )
        {
            Write-Warning  "Warning this computer is 32bit - Cant read 32bit software on remote 64bit machines"         
        }
    
        $tabcontrol1.SelectedTab = $tabpage4
        
        if (Test-Path "$env:temp\history.csv")
        {
            $History = Import-csv -Path "$env:temp\history.csv"
            try{$History = $History[0]}catch{}
            $textbox2.Text = ($History | Select-Object -ExpandProperty Computer).toupper()
        }
        else
        {
            $textbox2.Text = ($env:COMPUTERNAME).toupper()
        }    
        
        Update-Display -ResultToDisplay "SPF Version $version - By $Author Technical Services Team.`n" -color 'Black' -richtextbox $richtextbox3 -new        
    }
    
    
    
    
    
    
    
    
    $formMain_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
    #Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
        
        # $listBox3.items | Out-File $filterFile
        
        #Stop any pending jobs
        Stop-JobTracker
    }
    
    
    $RefreshFilterList={
        Get-Content $filterFile | %{ $filterList.Set_Item($_, ($_ -split '  -  ')[1]) }
    }
    
    
    
    
    $RemoteJobButtons={
        
        # Run Remote Jobs
        
        $buttonStartJob.Enabled = $false    
        $TSSPF.Cursor = 'AppStarting'         
    
        
        Add-JobTracker -Name "JobName" `
        -JobScript {
               #--------------------------------------------------
            Param($Argument1)
            
            $ScriptJob = $Argument1.Get_Item("ScriptJob")
            $computer = $Argument1.Get_Item("computer")
            $FunctionType = $Argument1.Get_Item("FunctionType")
            $SiteServer = $Argument1.Get_Item("SCCMServer")
            $NameSpace = $Argument1.Get_Item("$SCCMNameSpace")
    
            
            function Get-AddRemovePrograms($Computer)
            {
                        
                try{ $RemoteRegistry = gwmi -computername $computer -class win32_service -ErrorAction 'stop' | Where-Object { $_.Name -eq "RemoteRegistry" } }catch{}
                
                if ($RemoteRegistry.State -eq "Stopped" -and $computer -ne $env:computername) 
                {                        
                    $return = $RemoteRegistry.changestartmode("automatic") 
                    if($return.returnvalue -eq 0) {
                        $RemoteRegistry.StartService()
                        Start-Sleep -Seconds 15                     
                    }
                }
                            
                $array = @()
            
                $UninstallKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" 
                $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine',$computer) 
    
                $regkey=$reg.OpenSubKey($UninstallKey) 
                
                if ($regkey -ne $null)
                {
                
                    $subkeys=$regkey.GetSubKeyNames() 
                     
                    foreach($key in $subkeys)
                    {
                        $thisKey=$UninstallKey+"\\"+$key 
                        $thisSubKey=$reg.OpenSubKey($thisKey) 
                        $obj = New-Object PSObject
                        $obj | Add-Member -MemberType NoteProperty -Name "Computer" -Value $computer
                        $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value $($thisSubKey.GetValue("DisplayName"))
                        $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($thisSubKey.GetValue("DisplayVersion"))
                        $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($thisSubKey.GetValue("InstallDate"))
                        $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher"))
                        $obj | Add-Member -MemberType NoteProperty -Name "FunctionType" -Value "Live"
                        $obj | Add-Member -MemberType NoteProperty -Name "status" -Value $true
                        $array += $obj  
                    } 
                    
                    
                
                    # 32bit software installed on a 64 bit machine
               
                    $UninstallKey="SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
                    $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine',$computer)
                        
                    $regkey=$reg.OpenSubKey($UninstallKey)
                    
                    if ($regkey -ne $null)
                    {
                     
                        $subkeys=$regkey.GetSubKeyNames()
                     
                        foreach($key in $subkeys){
                     
                            $thisKey=$UninstallKey+"\\"+$key  
                            $thisSubKey=$reg.OpenSubKey($thisKey)  
                            $obj = New-Object PSObject 
                            $obj | Add-Member -MemberType NoteProperty -Name "Computer" -Value $computer 
                            $obj | Add-Member -MemberType NoteProperty -Name "Name" -Value $($thisSubKey.GetValue("DisplayName")) 
                            $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($thisSubKey.GetValue("DisplayVersion")) 
                            $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value $($thisSubKey.GetValue("InstallLocation")) 
                            $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($thisSubKey.GetValue("InstallDate")) 
                            $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher")) 
                            $obj | Add-Member -MemberType NoteProperty -Name "FunctionType" -Value "Live"
                            $obj | Add-Member -MemberType NoteProperty -Name "status" -Value $true                                            
                            $array += $obj                         
                        }
                    }             
    
                    $array 
                } 
            }
            
            function Get-SCCMSoftwareInstalled
            {
                <#
                .Synopsis
                    Get Add Remove Programs from SCCM Query
               
                .Description
                    Report of software installed on SCCM client
                    Same as "Add Remove Programs" list
                
                .Parameter Computer
                    Specifies a computer name
                    
                .Parameter NameSpace
                    Set this to your SCCM environment
                    
                .Parameter SiteServer
                    Set this to your SCCM environment
                
               .Example
                    PS C:\>Get-SCCMSoftwareInstalled -computer pc01 
                   
                Description
                -----------
                    Report of software installed on SCCM client computer pc01                 
    
                .Inputs
                    string
                    You can pass a list of computer names to Get-SCCMSoftwareInstalled
                                    
                                
                .Outputs
                    PSObject
                               
                .Notes
                    NAME:      Get-SCCMSoftwareInstalled
                    PURPOSE:   Get software installed 
                    VERSION:   1.1
                    AUTHOR:    Matthew Painter
                    LASTEDIT:  15-2-13            
                #>
    
                [CmdletBinding(SupportsShouldProcess=$true)] 
                    
                param(         
                    [Parameter(         
                    Mandatory=$true, 
                    Position=1,        
                    ValueFromPipeline=$true)]         
                    [string[]]$computerName,
                    
                    [Parameter(
                    Mandatory=$true,
                    ValueFromPipeline=$false)]
                    [string]$SiteServer,                
                            
                    [Parameter(
                    Mandatory=$false,
                    ValueFromPipeline=$false)]
                    [string]$NameSpace = "root\sms\site_SC1"
                )
                
    
                
                process
                {    
                       foreach ($computer in $computername)
                    { 
                        try
                        {
                            $Query = "select * from SMS_G_System_COMPUTER_SYSTEM where Name=`'$computer`'"
                            $ResourceID = Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty ResourceID -First 1   
                           
                            $Query = "select * from SMS_G_System_ADD_REMOVE_PROGRAMS where ResourceID=`'$ResourceID`'"               
                            Get-WmiObject -Query $Query -Namespace $NameSpace -ComputerName $SiteServer  | 
                            % {        
                                $Hash = @{ 
                                    Computer = $Computer
                                    Name = $_.DisplayName
                                    Publisher = $_.Publisher
                                    Version = $_.Version
                                    InstallDate = $_.InstallDate
                                    FunctionType = "SCCM" 
                                    status = $true
                                } 
                                
                                New-Object -TypeName PSObject -Property $Hash 
                            }
                        }
                        catch
                        {
                            $Hash = @{ 
                                Computer = $Computer
                                Name = $null
                                Publisher = $null
                                Version = $null
                                InstallDate = $null
                                FunctionType = "SCCM"
                                status = $false
                            } 
                            
                            New-Object -TypeName PSObject -Property $Hash 
                        }
                    }
                }
            }    
                
                               
            Invoke-Expression $ScriptJob 
            
            #--------------------------------------------------
        }`
        -CompletedScript {
            Param($Job)
            #Enable remote job type Buttons
            $buttonStartJob.Enabled = $true
    
            $TSSPF.Cursor = 'Default'
            
            $JobButtonResult = Receive-Job -Job $Job |  
            Where-Object { $_.Name } | sort name -Unique | 
            % {if($_.Version){$_.Version = $_.Version.replace("-"," ")}else{$_.Version = 1}; $_.Name = $_.Name.replace("  -  "," - "); $_} |
            Select-Object Name, Version, FunctionType, computer, status
                                
                                
            $FunctionType = $JobButtonResult | %{if ($_.FunctionType){$_}} | select -ExpandProperty FunctionType -First 1
            $Computer = $JobButtonResult | %{if ($_.computer){$_}} | select -ExpandProperty computer -First 1
            $status = $JobButtonResult | %{if ($_.status){$_}} | select -ExpandProperty status -First 1
            
            
            # Update-Display -ResultToDisplay "Retrieving $FunctionType Software list for $computer" -color 'Black' -richtextbox $richtextbox3 
                    
            
            # Display filtered list of applications, direct from remote workstation
            if ($FunctionType -eq "Live")
            {
                if ($status)
                {                
                    $listbox1.Items.Clear()
                    
                    set-variable -name LiveResult -value $JobButtonResult -scope script -description "Last software Scan 'Live Results'" 
                    Load-ListBoxItems $LiveResult $listbox1 $filterList
                    Update-Display -ResultToDisplay ($JobButtonResult | %{"$($_.name)  -  $($_.version)"}) -color 'black' -richtextbox $richtextbox1 -new
                }
                else
                {
                    Update-Display -ResultToDisplay "Problem Accessing Software List on $computer" -color 'Red' -richtextbox $richtextbox3 
                }
    
            }
            
            
            
            # Display filtered list of applications, direct from SCCM
            if ($FunctionType -eq "SCCM")
            {
                if ($status)
                {
                    $listbox2.Items.Clear()
    
                    set-variable -name SCCMResult -value $JobButtonResult -scope script -description "Last software Scan 'SCCM Results'"
                    Load-ListBoxItems $SCCMResult $listbox2 $filterList
                    Update-Display -ResultToDisplay ($JobButtonResult | %{"$($_.name)  -  $($_.version)"}) -color 'black' -richtextbox $richtextbox2 -new                
                }
                else
                {
                    Update-Display -ResultToDisplay "Problem Accessing Software List From SCCM" -color 'Red' -richtextbox $richtextbox3 
                }
            }
            
            
        }`
        -UpdateScript {
            Param($Job)
            #$results = Receive-Job -Job $Job -Keep
        }`
        -ArgumentList $RemoteJobButtonArgs        
    
    }
    
    
    
    
    $buttonStartJob_Click={
        $computer = $textbox2.Text
    
        if (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
        {    
            $ButtonJob = "Get-AddRemovePrograms $Computer"
            $RemoteJobButtonArgs = @{ 'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; }
            $RemoteJobButtons.invoke()
            
            Update-Display -ResultToDisplay "Retrieving 'Live' Software list for $computer" -color 'Black' -richtextbox $richtextbox3 
        }
        else
        {
            Update-Display -ResultToDisplay "Cant Ping $computer" -color 'red' -richtextbox $richtextbox3
            Update-Display -ResultToDisplay "" -color 'black' -richtextbox $richtextbox1 -new
            $listbox1.Items.Clear()
        }
    
        
        if (Test-Connection -ComputerName $SCCMServer -Count 1 -Quiet)
        {
            $ButtonJob = "Get-SCCMSoftwareInstalled -computerName $Computer -siteserver $SCCMServer -namespace $SCCMNameSpace"
            $RemoteJobButtonArgs = @{ 'ScriptJob' = $ButtonJob ; 'Computer' = $Computer; 'SiteServer' = $SCCMServer; 'NameSpace' = $SCCMNameSpace;}
            $RemoteJobButtons.invoke()
            
            Update-Display -ResultToDisplay "Retrieving 'SCCM' Software list for $computer" -color 'Black' -richtextbox $richtextbox3 
            
            set-variable -name SCCMPingBad -value $false -scope script -description "Ping Status of SCCM Server"
        }
        else
        {
            if(!($SCCMPingBad))
            {
                Update-Display -ResultToDisplay "Cant Ping SCCM Server $SCCMServer" -color 'red' -richtextbox $richtextbox3 
                Update-Display -ResultToDisplay "" -color 'black' -richtextbox $richtextbox2 -new
                $listbox2.Items.Clear()
            }
            
            set-variable -name SCCMPingBad -value $true -scope script -description "Status of SCCM Server"
        }
    
        
    }
    
    
    #region Job Tracker
    $JobTrackerList = New-Object System.Collections.ArrayList
    function Add-JobTracker
    {
        <#
            .SYNOPSIS
                Add a new job to the JobTracker and starts the timer.
        
            .DESCRIPTION
                Add a new job to the JobTracker and starts the timer.
        
            .PARAMETER  Name
                The name to assign to the Job
        
            .PARAMETER  JobScript
                The script block that the Job will be performing. 
                Important: Do not access form controls from this script block.
        
            .PARAMETER ArgumentList
                The arguments to pass to the job
        
            .PARAMETER  CompleteScript
                The script block that will be called when the job is complete.
                The job is passed as an argument. The Job argument is null when the job fails.
        
            .PARAMETER  UpdateScript
                The script block that will be called each time the timer ticks. 
                The job is passed as an argument. Use this to get the Job's progress.
        
            .EXAMPLE
                Job-Begin -Name "JobName" `
                -JobScript {    
                    Param($Argument1)#Pass any arguments using the ArgumentList parameter
                    #Important: Do not access form controls from this script block.
                    Get-WmiObject Win32_Process -Namespace "root\CIMV2"
                }`
                -CompletedScript {
                    Param($Job)        
                    $results = Receive-Job -Job $Job        
                }`
                -UpdateScript {
                    Param($Job)
                    #$results = Receive-Job -Job $Job -Keep
                }
        
            .LINK
                
        #>
        
        Param(
        [ValidateNotNull()]
        [Parameter(Mandatory=$true)]
        [string]$Name, 
        [ValidateNotNull()]
        [Parameter(Mandatory=$true)]
        [ScriptBlock]$JobScript,
        $ArgumentList = $null,
        [ScriptBlock]$CompletedScript,
        [ScriptBlock]$UpdateScript)
        
        #Start the Job
        $job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
        
        if($job -ne $null)
        {
            #Create a Custom Object to keep track of the Job & Script Blocks
            $members = @{    "Job" = $Job;
                            "CompleteScript" = $CompletedScript;
                            "UpdateScript" = $UpdateScript}
            
            $psObject = New-Object System.Management.Automation.PSObject -Property $members
            
            [void]$JobTrackerList.Add($psObject)    
            
            #Start the Timer
            if(-not $timerJobTracker.Enabled)
            {
                $timerJobTracker.Start()
            }
        }
        elseif($CompletedScript -ne $null)
        {
            #Failed
            Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
        }
    
    }
    
    function Update-JobTracker
    {
        <#
            .SYNOPSIS
                Checks the status of each job on the list.
        #>
        
        #Poll the jobs for status updates
        $timerJobTracker.Stop() #Freeze the Timer
        
        for($index =0; $index -lt $JobTrackerList.Count; $index++)
        {
            $psObject = $JobTrackerList[$index]
            
            if($psObject -ne $null) 
            {
                if($psObject.Job -ne $null)
                {
                    if($psObject.Job.State -ne "Running")
                    {                
                        #Call the Complete Script Block
                        if($psObject.CompleteScript -ne $null)
                        {
                            #$results = Receive-Job -Job $psObject.Job
                            Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
                        }
                        
                        $JobTrackerList.RemoveAt($index)
                        Remove-Job -Job $psObject.Job
                        $index-- #Step back so we don't skip a job
                    }
                    elseif($psObject.UpdateScript -ne $null)
                    {
                        #Call the Update Script Block
                        Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
                    }
                }
            }
            else
            {
                $JobTrackerList.RemoveAt($index)
                $index-- #Step back so we don't skip a job
            }
        }
        
        if($JobTrackerList.Count -gt 0)
        {
            $timerJobTracker.Start()#Resume the timer    
        }    
    }
    
    function Stop-JobTracker
    {
        <#
            .SYNOPSIS
                Stops and removes all Jobs from the list.
        #>
        #Stop the timer
        $timerJobTracker.Stop()
        
        #Remove all the jobs
        while($JobTrackerList.Count -gt 0)
        {
            $job = $JobTrackerList[0].Job
            $JobTrackerList.RemoveAt(0)
            Stop-Job $job
            Remove-Job $job
        }
    }
    
    $timerJobTracker_Tick={
        Update-JobTracker
    }
    
    #endregion
    
    
    
    
    
    
    
    
    # This is the filtered live list
    $listbox1_SelectedIndexChanged={
        if ($listBox1.SelectedItem -ne $null)
        {  
            $FilteredLive.Text = $listBox1.SelectedItem
        }    
    }
    
    
    # This is the filtered SCCM list
    $listbox2_SelectedIndexChanged={
        if ($listBox2.SelectedItem -ne $null)
        {  
            $FilteredSCCM.Text = $listBox2.SelectedItem
        }    
    }
    
    
    # This is the filter list
    $listbox3_SelectedIndexChanged={
        if ($listBox3.SelectedItem -ne $null)
        {              
            $LabelFilterItem.text = $listBox3.SelectedItem
        }
    }
    
    
    # Remove from filtered Live
    $buttonRemoveLive_Click={
        
        if ($FilteredLive.Text -ne "")
        {
            [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
            $Answer = [Windows.Forms.MessageBox]::Show($this, "Remove item from filtered list?`n`n$($FilteredLive.Text)`n", "SPF $Version",[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Question, [System.Windows.Forms.MessageBoxDefaultButton]::Button1)    
    
            if ($Answer -eq "Yes")        
            {
                # Refresh Filter in memory
                Get-Content $filterFile | %{ $filterList.Set_Item($_, ($_ -split '  -  ')[1]) }
                
                $filterList.Add( ($FilteredLive.Text) , ($FilteredLive.Text -split '  -  ')[1] )            
                $listBox3.Items.Clear()
                
                $listBox1.Items.Remove($FilteredLive.Text)    
                $listBox2.Items.Remove($FilteredLive.Text)        
            
                $filterList.keys | sort | %{ Load-ListBox -listBox $listBox3 -Items $_ -Append | Out-Null }
                
                $FilteredLive.Text = ""
                
                # Write Filter back to file 
                $listBox3.items | Out-File $filterFile        
            }
        }        
    }
    
    
    # Remove from filtered SCCM
    $buttonRemoveSCCM_Click={
        
        if ($FilteredSCCM.Text -ne "")
        {
            [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null        
            $Answer = [Windows.Forms.MessageBox]::Show($this, "Remove item from filtered list?`n`n$($FilteredSCCM.Text)`n", "SPF $Version",[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Question, [System.Windows.Forms.MessageBoxDefaultButton]::Button1)    
            
            if ($Answer -eq "Yes")
            {        
                # Refresh Filter in memory 
                Get-Content $filterFile | %{ $filterList.Set_Item($_, ($_ -split '  -  ')[1]) }
                
                $filterList.Add( ($FilteredSCCM.Text) , ($FilteredSCCM.Text -split '  -  ')[1] )            
                $listBox3.Items.Clear()
                
                $listBox2.Items.Remove($FilteredSCCM.Text)
                $listBox1.Items.Remove($FilteredSCCM.Text)        
            
                $filterList.keys | sort | %{ Load-ListBox -listBox $listBox3 -Items $_ -Append | Out-Null }
                
                $FilteredSCCM.Text = ""            
                            
                # Write Filter back to file 
                $listBox3.items | Out-File $filterFile
            }
        }        
    }
    
    
    # Add item back into filtered software lists
    $buttonAdd_Click={    
    
        if ($LabelFilterItem.Text -ne "")
        {
            
            [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null        
            $Answer = [Windows.Forms.MessageBox]::Show($this, "Add item back into filtered lists?`n`n$($LabelFilterItem.Text)`n", "SPF $Version",[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Question, [System.Windows.Forms.MessageBoxDefaultButton]::Button1)    
            
            if ($Answer -eq "Yes")
            {
                # Refresh Filter in memory 
                Get-Content $filterFile | %{ $filterList.Set_Item($_, ($_ -split '  -  ')[1]) }
                
                $filterList.Remove($LabelFilterItem.Text)        
                $listBox3.Items.Remove($LabelFilterItem.Text)
                
                $listbox1.Items.Clear()
                Load-ListBoxItems $LiveResult $listbox1 $filterList
    
                $listbox2.Items.Clear()
                Load-ListBoxItems $SCCMResult $listbox2 $filterList
                
                $LabelFilterItem.Text = ""    
                
                # Write Filter back to file 
                $listBox3.items | Out-File $filterFile
            }
        }
    }
    
    
    # Actions when lists are double clicked
    $addLiveToFilter=
    {
        $buttonRemoveLive_Click.invoke()
    }
    
    
    $addSCCMToFilter=
    {
        $buttonRemoveSCCM_Click.invoke()
    }
    
    
    $removeFromFilter=
    {
        $buttonAdd_Click.invoke()
    }
    
    
    
    
    
    
    
    
    $buttonClose_Click={
        $TSSPF.Close()
    }
    
    $buttonCopy_Click={
        
        # $panel1.BringToFront()
        
        if( "$($tabcontrol1.SelectedTab)" -eq "TabPage: {filtered - SCCM}" )
        {        
            Update-Display -ResultToDisplay "Filtered software profile from SCCM for $computer`n" -color 'black' -richtextbox $richtextbox4 -new
            
            $listbox2Items = $listbox2.Items | %{$_}
            Update-Display -ResultToDisplay $listbox2Items -color 'black' -richtextbox $richtextbox4 
        }    
        
        if( "$($tabcontrol1.SelectedTab)" -eq "TabPage: {filtered - Live}" )
        {
            Update-Display -ResultToDisplay "Filtered Software profile live from $computer`n" -color 'black' -richtextbox $richtextbox4 -new
            
            $listbox1Items = $listbox1.Items | %{$_}
            Update-Display -ResultToDisplay $listbox1Items -color 'black' -richtextbox $richtextbox4          
        }    
        
        if( "$($tabcontrol1.SelectedTab)" -eq "TabPage: {Unfiltered - SCCM}" )
        {
            Update-Display -ResultToDisplay "Complete software list from SCCM for $computer`n" -color 'black' -richtextbox $richtextbox4 -new        
            Update-Display -ResultToDisplay $richtextbox2.Text -color 'black' -richtextbox $richtextbox4     
        }
            
        if( "$($tabcontrol1.SelectedTab)" -eq "TabPage: {Unfiltered - Live}" )
        {
            Update-Display -ResultToDisplay "Complete Software list live from $computer`n" -color 'black' -richtextbox $richtextbox4 -new        
            Update-Display -ResultToDisplay $richtextbox1.Text -color 'black' -richtextbox $richtextbox4              
        }
        
        
        $richtextbox4.SelectAll()    
        if ($richTextBox4.SelectionLength -gt 0)
        {
            [Windows.Forms.Clipboard]::SetText($richTextBox4.Text)
        }
        
        Start-Sleep -Seconds 2
        
        # $panel1.SendToBack()
    }
    
    
    
    
    
    
    
    
    
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
    
    $Form_StateCorrection_Load=
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $TSSPF.WindowState = $InitialFormWindowState
    }
    
    $Form_Cleanup_FormClosed=
    {
        #Remove all event handlers from the controls
        try
        {
            $listbox1.remove_SelectedIndexChanged($listbox1_SelectedIndexChanged)
            $listbox1.remove_MouseDoubleClick($addLiveToFilter)
            $listbox2.remove_SelectedIndexChanged($listbox2_SelectedIndexChanged)
            $listbox2.remove_MouseDoubleClick($addSCCMToFilter)
            $listbox3.remove_SelectedIndexChanged($listbox3_SelectedIndexChanged)
            $listbox3.remove_MouseDoubleClick($removeFromFilter)
            $buttonCopy.remove_Click($buttonCopy_Click)
            $buttonClose.remove_Click($buttonClose_Click)
            $buttonStartJob.remove_Click($buttonStartJob_Click)
            $TSSPF.remove_FormClosed($formMain_FormClosed)
            $TSSPF.remove_Load($TSSPF_Load)
            $timerJobTracker.remove_Tick($timerJobTracker_Tick)
            $TSSPF.remove_Load($Form_StateCorrection_Load)
            $TSSPF.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        { }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    #
    # TSSPF
    #
    $TSSPF.Controls.Add($tabcontrol1)
    $TSSPF.Controls.Add($richtextbox3)
    $TSSPF.Controls.Add($buttonCopy)
    $TSSPF.Controls.Add($labelSoftwareProfileFilte)
    $TSSPF.Controls.Add($buttonClose)
    $TSSPF.Controls.Add($buttonStartJob)
    $TSSPF.Controls.Add($textbox2)
    $TSSPF.Controls.Add($panel1)
    $TSSPF.AcceptButton = $buttonStartJob
    $TSSPF.CancelButton = $buttonClose
    $TSSPF.ClientSize = '938, 589'
    $TSSPF.Name = "TSSPF"
    $TSSPF.Text = "SPF"
    $TSSPF.add_FormClosed($formMain_FormClosed)
    $TSSPF.add_Load($TSSPF_Load)
    #
    # tabcontrol1
    #
    $tabcontrol1.Controls.Add($tabpage1)
    $tabcontrol1.Controls.Add($tabpage2)
    $tabcontrol1.Controls.Add($tabpage3)
    $tabcontrol1.Controls.Add($tabpage4)
    $tabcontrol1.Controls.Add($tabpage5)
    $tabcontrol1.Controls.Add($tabpage6)
    $tabcontrol1.Location = '12, 107'
    $tabcontrol1.Name = "tabcontrol1"
    $tabcontrol1.SelectedIndex = 0
    $tabcontrol1.Size = '915, 469'
    $tabcontrol1.TabIndex = 0
    #
    # tabpage1
    #
    $tabpage1.Controls.Add($richtextbox1)
    $tabpage1.BackColor = 'Window'
    $tabpage1.Location = '4, 22'
    $tabpage1.Name = "tabpage1"
    $tabpage1.Padding = '3, 3, 3, 3'
    $tabpage1.Size = '907, 443'
    $tabpage1.TabIndex = 0
    $tabpage1.Text = "Unfiltered - Live"
    #
    # richtextbox1
    #
    $richtextbox1.Location = '109, 31'
    $richtextbox1.Name = "richtextbox1"
    $richtextbox1.Size = '689, 381'
    $richtextbox1.TabIndex = 0
    $richtextbox1.Text = ""
    #
    # tabpage2
    #
    $tabpage2.Controls.Add($richtextbox2)
    $tabpage2.Location = '4, 22'
    $tabpage2.Name = "tabpage2"
    $tabpage2.Padding = '3, 3, 3, 3'
    $tabpage2.Size = '907, 443'
    $tabpage2.TabIndex = 1
    $tabpage2.Text = "Unfiltered - SCCM"
    $tabpage2.UseVisualStyleBackColor = $True
    #
    # richtextbox2
    #
    $richtextbox2.Location = '109, 31'
    $richtextbox2.Name = "richtextbox2"
    $richtextbox2.Size = '689, 381'
    $richtextbox2.TabIndex = 1
    $richtextbox2.Text = ""
    #
    # tabpage3
    #
    $tabpage3.Controls.Add($labelRemoveItemFromProfil)
    $tabpage3.Controls.Add($FilteredLive)
    $tabpage3.Controls.Add($listbox1)
    $tabpage3.Location = '4, 22'
    $tabpage3.Name = "tabpage3"
    $tabpage3.Padding = '3, 3, 3, 3'
    $tabpage3.Size = '907, 443'
    $tabpage3.TabIndex = 2
    $tabpage3.Text = "Filtered - LIVE"
    $tabpage3.UseVisualStyleBackColor = $True
    #
    # labelRemoveItemFromProfil
    #
    $labelRemoveItemFromProfil.Location = '815, 46'
    $labelRemoveItemFromProfil.Name = "labelRemoveItemFromProfil"
    $labelRemoveItemFromProfil.Size = '86, 83'
    $labelRemoveItemFromProfil.TabIndex = 7
    $labelRemoveItemFromProfil.Text = "Double Click
Item to 
Remove
From Profile"
    #
    # FilteredLive
    #
    $FilteredLive.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
    $FilteredLive.Location = '109, 15'
    $FilteredLive.Name = "FilteredLive"
    $FilteredLive.Size = '689, 39'
    $FilteredLive.TabIndex = 5
    $FilteredLive.TextAlign = 'TopRight'
    #
    # listbox1
    #
    $listbox1.FormattingEnabled = $True
    $listbox1.Location = '109, 57'
    $listbox1.Name = "listbox1"
    $listbox1.Size = '689, 368'
    $listbox1.TabIndex = 2
    $listbox1.add_SelectedIndexChanged($listbox1_SelectedIndexChanged)
    $listbox1.add_MouseDoubleClick($addLiveToFilter)
    #
    # tabpage4
    #
    $tabpage4.Controls.Add($labelDoubleClickItemToRem)
    $tabpage4.Controls.Add($FilteredSCCM)
    $tabpage4.Controls.Add($listbox2)
    $tabpage4.Location = '4, 22'
    $tabpage4.Name = "tabpage4"
    $tabpage4.Padding = '3, 3, 3, 3'
    $tabpage4.Size = '907, 443'
    $tabpage4.TabIndex = 3
    $tabpage4.Text = "Filtered - SCCM"
    $tabpage4.UseVisualStyleBackColor = $True
    #
    # labelDoubleClickItemToRem
    #
    $labelDoubleClickItemToRem.Location = '815, 46'
    $labelDoubleClickItemToRem.Name = "labelDoubleClickItemToRem"
    $labelDoubleClickItemToRem.Size = '86, 85'
    $labelDoubleClickItemToRem.TabIndex = 10
    $labelDoubleClickItemToRem.Text = "Double Click
Item to 
Remove
From Profile
"
    #
    # FilteredSCCM
    #
    $FilteredSCCM.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
    $FilteredSCCM.Location = '109, 15'
    $FilteredSCCM.Name = "FilteredSCCM"
    $FilteredSCCM.Size = '689, 39'
    $FilteredSCCM.TabIndex = 9
    $FilteredSCCM.TextAlign = 'TopRight'
    #
    # listbox2
    #
    $listbox2.FormattingEnabled = $True
    $listbox2.Location = '109, 57'
    $listbox2.Name = "listbox2"
    $listbox2.Size = '689, 368'
    $listbox2.TabIndex = 4
    $listbox2.add_SelectedIndexChanged($listbox2_SelectedIndexChanged)
    $listbox2.add_MouseDoubleClick($addSCCMToFilter)
    #
    # tabpage5
    #
    $tabpage5.Controls.Add($LabelFilterItem)
    $tabpage5.Controls.Add($labelDoubleClickToAddItem)
    $tabpage5.Controls.Add($listbox3)
    $tabpage5.Location = '4, 22'
    $tabpage5.Name = "tabpage5"
    $tabpage5.Padding = '3, 3, 3, 3'
    $tabpage5.Size = '907, 443'
    $tabpage5.TabIndex = 4
    $tabpage5.Text = "Filter"
    $tabpage5.UseVisualStyleBackColor = $True
    #
    # LabelFilterItem
    #
    $LabelFilterItem.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
    $LabelFilterItem.Location = '109, 15'
    $LabelFilterItem.Name = "LabelFilterItem"
    $LabelFilterItem.Size = '689, 39'
    $LabelFilterItem.TabIndex = 7
    $LabelFilterItem.TextAlign = 'TopRight'
    #
    # labelDoubleClickToAddItem
    #
    $labelDoubleClickToAddItem.Location = '815, 46'
    $labelDoubleClickToAddItem.Name = "labelDoubleClickToAddItem"
    $labelDoubleClickToAddItem.Size = '76, 86'
    $labelDoubleClickToAddItem.TabIndex = 6
    $labelDoubleClickToAddItem.Text = "Double Click 
To Add Item 
Back into 
Profile"
    #
    # listbox3
    #
    $listbox3.FormattingEnabled = $True
    $listbox3.Location = '109, 57'
    $listbox3.Name = "listbox3"
    $listbox3.Size = '689, 368'
    $listbox3.TabIndex = 4
    $listbox3.add_SelectedIndexChanged($listbox3_SelectedIndexChanged)
    $listbox3.add_MouseDoubleClick($removeFromFilter)
    #
    # tabpage6
    #
    $tabpage6.Controls.Add($labelThisToolUsesTheSameS)
    $tabpage6.Controls.Add($labelNameSpace)
    $tabpage6.Controls.Add($textbox3)
    $tabpage6.Controls.Add($labelServer)
    $tabpage6.Controls.Add($labelSCCMServerSettings)
    $tabpage6.Controls.Add($textbox1)
    $tabpage6.Location = '4, 22'
    $tabpage6.Name = "tabpage6"
    $tabpage6.Padding = '3, 3, 3, 3'
    $tabpage6.Size = '907, 443'
    $tabpage6.TabIndex = 5
    $tabpage6.Text = "Settings"
    $tabpage6.UseVisualStyleBackColor = $True
    #
    # labelThisToolUsesTheSameS
    #
    $labelThisToolUsesTheSameS.Location = '314, 228'
    $labelThisToolUsesTheSameS.Name = "labelThisToolUsesTheSameS"
    $labelThisToolUsesTheSameS.Size = '332, 59'
    $labelThisToolUsesTheSameS.TabIndex = 7
    $labelThisToolUsesTheSameS.Text = "This tool uses the same SCCM server settings as TSTool. 
Edit GlobalSettings.csv file (in same folder) 
"
    #
    # labelNameSpace
    #
    $labelNameSpace.Location = '209, 157'
    $labelNameSpace.Name = "labelNameSpace"
    $labelNameSpace.Size = '100, 23'
    $labelNameSpace.TabIndex = 6
    $labelNameSpace.Text = "Name Space"
    $labelNameSpace.TextAlign = 'MiddleRight'
    #
    # textbox3
    #
    $textbox3.Location = '314, 157'
    $textbox3.Name = "textbox3"
    $textbox3.Size = '132, 20'
    $textbox3.TabIndex = 4
    #
    # labelServer
    #
    $labelServer.Location = '209, 120'
    $labelServer.Name = "labelServer"
    $labelServer.Size = '100, 23'
    $labelServer.TabIndex = 3
    $labelServer.Text = "Server"
    $labelServer.TextAlign = 'MiddleRight'
    #
    # labelSCCMServerSettings
    #
    $labelSCCMServerSettings.Location = '299, 85'
    $labelSCCMServerSettings.Name = "labelSCCMServerSettings"
    $labelSCCMServerSettings.Size = '157, 23'
    $labelSCCMServerSettings.TabIndex = 2
    $labelSCCMServerSettings.Text = "SCCM Server Settings"
    $labelSCCMServerSettings.TextAlign = 'MiddleCenter'
    #
    # textbox1
    #
    $textbox1.Location = '314, 120'
    $textbox1.Name = "textbox1"
    $textbox1.Size = '132, 20'
    $textbox1.TabIndex = 0
    #
    # richtextbox3
    #
    $richtextbox3.Location = '510, 12'
    $richtextbox3.Name = "richtextbox3"
    $richtextbox3.Size = '397, 89'
    $richtextbox3.TabIndex = 27
    $richtextbox3.Text = ""
    #
    # buttonCopy
    #
    $buttonCopy.Location = '306, 54'
    $buttonCopy.Name = "buttonCopy"
    $buttonCopy.Size = '75, 31'
    $buttonCopy.TabIndex = 26
    $buttonCopy.Text = "Copy"
    $buttonCopy.UseVisualStyleBackColor = $True
    $buttonCopy.add_Click($buttonCopy_Click)
    #
    # labelSoftwareProfileFilte
    #
    $labelSoftwareProfileFilte.Font = "Verdana, 20.25pt, style=Bold"
    $labelSoftwareProfileFilte.Location = '31, 9'
    $labelSoftwareProfileFilte.Name = "labelSoftwareProfileFilte"
    $labelSoftwareProfileFilte.Size = '449, 38'
    $labelSoftwareProfileFilte.TabIndex = 25
    $labelSoftwareProfileFilte.Text = "Software Profile Filter"
    #
    # buttonClose
    #
    $buttonClose.DialogResult = 'Cancel'
    $buttonClose.Location = '387, 54'
    $buttonClose.Name = "buttonClose"
    $buttonClose.Size = '75, 31'
    $buttonClose.TabIndex = 22
    $buttonClose.Text = "Close"
    $buttonClose.UseVisualStyleBackColor = $True
    $buttonClose.add_Click($buttonClose_Click)
    #
    # buttonStartJob
    #
    $buttonStartJob.Location = '225, 54'
    $buttonStartJob.Name = "buttonStartJob"
    $buttonStartJob.Size = '75, 31'
    $buttonStartJob.TabIndex = 19
    $buttonStartJob.Text = "Query"
    $buttonStartJob.TextImageRelation = 'ImageBeforeText'
    $buttonStartJob.UseVisualStyleBackColor = $True
    $buttonStartJob.add_Click($buttonStartJob_Click)
    #
    # textbox2
    #
    $textbox2.AutoCompleteMode = 'Suggest'
    $textbox2.AutoCompleteSource = 'CustomSource'
    $textbox2.BackColor = 'Info'
    $textbox2.Font = "Courier New, 15.75pt, style=Bold"
    $textbox2.Location = '22, 54'
    $textbox2.Name = "textbox2"
    $textbox2.Size = '197, 31'
    $textbox2.TabIndex = 20
    #
    # panel1
    #
    $panel1.Controls.Add($richtextbox4)
    $panel1.Location = '4, 107'
    $panel1.Name = "panel1"
    $panel1.Size = '933, 555'
    $panel1.TabIndex = 28
    #
    # richtextbox4
    #
    $richtextbox4.Location = '133, 28'
    $richtextbox4.Name = "richtextbox4"
    $richtextbox4.Size = '656, 434'
    $richtextbox4.TabIndex = 0
    $richtextbox4.Text = ""
    #
    # buttonStartJob2
    #
    $buttonStartJob2.Location = '140, 188'
    $buttonStartJob2.Name = "buttonStartJob2"
    $buttonStartJob2.Size = '75, 23'
    $buttonStartJob2.TabIndex = 0
    $buttonStartJob2.Text = "Start"
    $buttonStartJob2.TextImageRelation = 'ImageBeforeText'
    $buttonStartJob2.UseVisualStyleBackColor = $True
    #
    # timerJobTracker
    #
    $timerJobTracker.add_Tick($timerJobTracker_Tick)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $TSSPF.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $TSSPF.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $TSSPF.add_FormClosed($Form_Cleanup_FormClosed)
    #Show the Form
    return $TSSPF.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
    #Call the form
    Call-Get-SoftwareReport2_0_11a_pff | Out-Null
    #Perform cleanup
    OnApplicationExit
}

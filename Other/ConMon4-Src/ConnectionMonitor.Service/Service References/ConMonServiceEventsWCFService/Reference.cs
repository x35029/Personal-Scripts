//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConnectionMonitor.Service.ConMonServiceEventsWCFService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConMonServiceEventsWCFService.IConMonServiceEvents", CallbackContract=typeof(ConnectionMonitor.Service.ConMonServiceEventsWCFService.IConMonServiceEventsCallback))]
    public interface IConMonServiceEvents {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/Subscribe")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/Unsubscribe")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/ServiceStarted")]
        void ServiceStarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/NICEnabled")]
        void NICEnabled(string nicName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/ServiceStopped")]
        void ServiceStopped();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/ServicePaused")]
        void ServicePaused();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/ServiceRestarted")]
        void ServiceRestarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/DependentServicesChecked")]
        void DependentServicesChecked(string[] dependentServicesStarted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/IPAddressChanged")]
        void IPAddressChanged();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/NICsFound")]
        void NICsFound(string[] nicNames);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/ServicePowerEvent")]
        void ServicePowerEvent(System.ServiceProcess.PowerBroadcastStatus status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConMonServiceEventsCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnServiceStarted")]
        void OnServiceStarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnNICEnabled")]
        void OnNICEnabled(string nicName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnServiceStopped")]
        void OnServiceStopped();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnServicePaused")]
        void OnServicePaused();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnServiceRestarted")]
        void OnServiceRestarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnDependentServicesChecked")]
        void OnDependentServicesChecked(string[] dependentServicesStarted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnIPAddressChanged")]
        void OnIPAddressChanged();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnNICsFound")]
        void OnNICsFound(string[] nicNames);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConMonServiceEvents/OnServicePowerEvent")]
        void OnServicePowerEvent(System.ServiceProcess.PowerBroadcastStatus status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConMonServiceEventsChannel : ConnectionMonitor.Service.ConMonServiceEventsWCFService.IConMonServiceEvents, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConMonServiceEventsClient : System.ServiceModel.DuplexClientBase<ConnectionMonitor.Service.ConMonServiceEventsWCFService.IConMonServiceEvents>, ConnectionMonitor.Service.ConMonServiceEventsWCFService.IConMonServiceEvents {
        
        public ConMonServiceEventsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ConMonServiceEventsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ConMonServiceEventsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ConMonServiceEventsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ConMonServiceEventsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public void ServiceStarted() {
            base.Channel.ServiceStarted();
        }
        
        public void NICEnabled(string nicName) {
            base.Channel.NICEnabled(nicName);
        }
        
        public void ServiceStopped() {
            base.Channel.ServiceStopped();
        }
        
        public void ServicePaused() {
            base.Channel.ServicePaused();
        }
        
        public void ServiceRestarted() {
            base.Channel.ServiceRestarted();
        }
        
        public void DependentServicesChecked(string[] dependentServicesStarted) {
            base.Channel.DependentServicesChecked(dependentServicesStarted);
        }
        
        public void IPAddressChanged() {
            base.Channel.IPAddressChanged();
        }
        
        public void NICsFound(string[] nicNames) {
            base.Channel.NICsFound(nicNames);
        }
        
        public void ServicePowerEvent(System.ServiceProcess.PowerBroadcastStatus status) {
            base.Channel.ServicePowerEvent(status);
        }
    }
}
